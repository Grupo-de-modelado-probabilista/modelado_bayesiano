[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Modelado Bayesiano",
    "section": "",
    "text": "‎\nLa estadística trata sobre la recolección, organización, análisis e interpretación de datos, es por ello que la estadística es esencial para el correcto análisis de datos.\nExisten dos grandes conjuntos de herramientas para analizar datos:\nAnálisis Exploratorio de Datos (EDA): Consiste en resúmenes numéricos como la media, moda, desviación estándar, rangos intercuartiles, etc (esto se conoce también como estadística descriptiva). Además hace énfasis en el uso de métodos visuales para inspeccionar los datos, como por ejemplo histogramas y gráficos de dispersión.\nEstadística Inferencial: Consiste en usar datos para generar enunciados que exceden los propios datos. A veces esto implica realizar predicciones, a veces entender los detalles de algún fenómeno en particular o elegir entre varias explicaciones plausibles.\nMuchos de los cursos y libros sobre estadística, principalmente aquellos dirigidos a no-estadísticos, enseñan una serie de recetas que más o menos tienen la siguiente forma.\nLa principal meta de estos cursos es la de enseñar a usar la lata adecuada y con suerte alguna que otra discusión sobre el emplatado. Esta aproximación pedagógica, dificulta entender conceptualmente la unidad de los diferentes métodos enseñados y tiene como resultado la reproducción de prácticas poco transparentes y/o útiles.\nEn este curso se intenta una aproximación totalmente diferente. También aprenderemos recetas, pero intentaremos que los platos tengan un sabor más casero y menos enlatado, aprenderemos a mezclar ingredientes frescos que se acomoden a diferentes situaciones gastronómicas.\nEste enfoque es posible por dos razones:",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#a-quienes-está-dirijido",
    "href": "index.html#a-quienes-está-dirijido",
    "title": "Modelado Bayesiano",
    "section": "A quienes está dirijido?",
    "text": "A quienes está dirijido?\nEste es un curso introductorio para personas sin conocimiento previo de estadística o ciencia de datos. Se asume familiaridad con Python y librerías de Python usadas en análisis de datos como Numpy, matplotlib, Pandas, etc.\nQuienes no sepan Python, pero tengan familiaridad con otros lenguajes de programación también podrán aprovechar el curso, aunque puede que experimente un poco más de fricción.\nPor último quienes no tengan interés en aprender a usar código para analisis de datos pueden aún aprovechar parte del material para obtener una visión a vuelo de pájaro de los métodos Bayesianos.",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#cómo-usar-este-material",
    "href": "index.html#cómo-usar-este-material",
    "title": "Modelado Bayesiano",
    "section": "Cómo usar este material",
    "text": "Cómo usar este material\n\nVersión estática: Esta página contiene una versión estática del material. Es decir podrás ver el texto y las figuras pero no podrás modificarlos, ni interactuar con el material.\nVersión interactiva online: . Esta versión permite interactuar con el material, modificarlo y ejecutarlo en tu navegador.\nVersión interactiva local: También es posible descargar el material y ejecutarlo en tu propia computadora. Para ello hacé click y seguí las instrucciones de la próxima sección (Instalación).",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#instalación",
    "href": "index.html#instalación",
    "title": "Modelado Bayesiano",
    "section": "Instalación",
    "text": "Instalación\nPara usar este material es necesario tener instalado Python. Se recomienda la versión 3.9 o superior. Además es necesario instalar los siguientes paquetes:\n\nPyMC 5.15.1\nArviZ 0.18.0\nPreliZ 0.7.0\ngraphviz (una dependencia opcional de PyMC)\n\nSe recomienda instalar primero Anaconda. Luego instalar el resto de los paquetes con los comandos:\nconda install pip\npip install pymc==5.15.1 arviz==0.18.0 preliz==0.7.0 graphviz\nComo alternativa pueden crear un ambiente con los paquetes necesario descargando el archivo y ejecutando el comando\nconda env create -f environment.yml",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "index.html#contribuciones",
    "href": "index.html#contribuciones",
    "title": "Modelado Bayesiano",
    "section": "Contribuciones",
    "text": "Contribuciones\nTodo el contenido de este repositorio es abierto, esto quiere decir que cualquier persona interesada puede contribuir al mismo. Todas las contribuciones serán bien recibidas incluyendo:\n\nCorrecciones ortográficas\nNuevas figuras\nCorrecciones en el código Python, incluidas mejoras de estilo\nMejores ejemplos\nMejores explicaciones\nCorrecciones de errores conceptuales\n\nLa forma de contribuir es vía Github, es decir los cambios deberán ser hechos en forma de pull requests y los problemas/bugs deberán reportarse como Issues.",
    "crumbs": [
      "‎"
    ]
  },
  {
    "objectID": "00_Probabilidad.html",
    "href": "00_Probabilidad.html",
    "title": "1  Probabilidad",
    "section": "",
    "text": "1.1 Azahar, azar y dados\nLos objetivos de este capítulo son:\nLas palabras azahar y azar no son similares por casualidad ambas provienen de la misma palabra árabe que significa flor. Desde la antigüedad, y hasta el día de hoy, ciertos juegos, como el juego de la taba, utilizan un hueso con dos lados planos a modo de dado. De hecho se podría decir que la taba es el antecesor del dado moderno. Para facilitar distinguir un lado del otro, es común que uno de los lados esté marcado de alguna forma. Resulta ser que los árabes usaban una flor. Con el tiempo el castellano adoptó azahar, para designar solo ciertas flores como las del naranjo y azar como sinónimo de aleatorio.\nEmpecemos, entonces imaginando que tenemos un dado de 6 caras, cada vez que arrojamos el dado solo es posible obtener un número entero del 1-6 es decir {1, 2, 3, 4, 5, 6}. Al arrojar el dado podemos obtener cualquier de estos números sin preferencia de uno sobre otro. Usando Python podemos programar un dado de 6 caras de la siguiente forma:\ndef dado():\n    semilla = time.perf_counter_ns()\n    return semilla % 6 + 1\n\ndado()\n\n6\nAl ejecutar la celda anterior repetidas veces podrán ver que en cada ejecución se obtiene un número (entero) distinto entre 1 y 6. Entender que está haciendo exactamente esta función no es del todo relevante, pero si es útil entender la idea general detrás de esta función. Veamos:\nLas computadoras son en esencia deterministas. Es decir para una misma entrada la salida será siempre igual. Es como calcular \\(\\sqrt{4}\\) el resultado será siempre \\(2\\). Esta consistencia es útil, en el funcionamiento de un desfibrilador automático, en un sistema de control aéreo, o en una app para reproducir música. Pero existen casos en donde necesitamos números aleatorios, por ejemplo en probabilidad y estadística, pero también otras áreas como cyber-seguridad. Para esos casos existen algoritmos que a partir de un valor inicial llamado semilla son capaces de producir una secuencia de valores, que si bien es determinista, a los fines prácticos tiene toda la pinta de aleatoria. Estos número se llaman pseudoaleatorios\nEn el caso de la función dado la semilla la generamos en la linea semilla = time.perf_counter_ns(), time.perf_counter_ns() es una función que mide el tiempo con precisión de nanosegundos. Cada vez que llamamos a dado ese valor será distinto. Luego en la última linea return semilla % 6 + 1 se calcula el resto de la división de la semilla por 6 y se le suma 1. Por ejemplo si la semilla fuese 12 el resto de dividir por 6 (12%6) sería 0, ya que \\(\\frac{12}{6}=2\\). Pero si la semilla fuese 10 entonces el resto de dividir por 6 (10%6) sería 4.\nSupongamos que ustedes, con justa razón, no me creen que dado realmente se comporta como un dado no trucado. Es decir, que todos los números tienen igual chance de salir. ¿Cómo podríamos hacer para evaluar esta posibilidad?\nUsando Python podemos simular la recolección de datos de la siguiente forma.\ndef experimento(N=100):\n    # llamamos a `dado` N veces y guardamos los resultados en `muestra`\n    muestra = [dado() for i in range(N)]   \n\n    # calculamos la proporción de veces que aparece cada valor en ` muestra` y lo imprimimos en pantalla\n    for i in range(1, 7):\n        print(f'{i}: {muestra.count(i)/N:.2g}')\n\nexperimento()\n\n1: 0.26\n2: 0.13\n3: 0.14\n4: 0.1\n5: 0.18\n6: 0.19\nLos números en la primer columna son los posibles resultados. Los de la segunda columna corresponden con la frecuencia con la que aparece cada número. La frecuencia es la cantidad de veces que aparece cada uno de los posibles resultados dividido por N. Siendo N el total de veces que arrojamos el dado.\nHay al menos dos aspectos que vale resaltar en este ejemplo:\nEstas dos observaciones no están restringidas a los dados y los juegos de azar. Si nos pesáramos todos los días obtendríamos distintos valores ya que el peso tiene relación con la cantidad de comida que ingerimos, el agua que tomamos, cuantos orinamos y defecamos, la precisión de la balanza, la ropa que usamos. Por todo ello una sola medida podría no ser representativa de nuestro peso. Es cierto que todas estas variaciones podrían ser demasiado pequeñas para nuestro propósito y podríamos considerarlas irrelevantes, pero eso es adelantarse a nuestra discusión. El punto importante en este momento es que los datos van acompañados de incertidumbre, gran parte de la estadística tiene que ver con métodos y prácticas para lidiar con esa incertidumbre.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#azahar-azar-y-dados",
    "href": "00_Probabilidad.html#azahar-azar-y-dados",
    "title": "1  Probabilidad",
    "section": "",
    "text": "Una posibilidad es consultar a los astros o los ángeles.\nOtra sería pensar mucho sobre el problema para luego quizá declararse agnóstico sobre la truquez no solo de nuestro dado digital si no de los dados en general y aún más sobre la posibilidad misma de acceder al conocimiento.\nUna tercera alternativa es recolectar datos y analizarlos, esta última es la opción preferida por quienes practican disciplinas científicas, en particular la estadística.\n\n\n\n\n\n\nCada vez que se ejecuta la celda anterior, es decir cada vez que realizamos el experimento, se obtiene un resultado distinto. Esta es precisamente la razón de usar dados en juegos de azar, cada vez que los arrojamos obtenemos un número que no podemos predecir con absoluta certeza.\nSi arrojamos muchas veces un mismo dado la capacidad de predecir cada una de las tiradas no mejora. En ese sentido recolectar datos no nos ayuda. Pero recolectar datos si mejora la capacidad de predecir el listado de las frecuencias, de hecho la capacidad mejora de forma consistente al aumentar N. Para un valor de N=10000 verás que las frecuencias obtenidas son aproximadamente \\(0.17\\) y resulta ser que \\(0.17 \\approx \\frac{1}{6}\\) que es lo que esperado si cada número en el dado tuviera la misma posibilidad de aparecer.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#probabilidades",
    "href": "00_Probabilidad.html#probabilidades",
    "title": "1  Probabilidad",
    "section": "1.2 Probabilidades",
    "text": "1.2 Probabilidades\nEs posible utilizar probabilidades para asignar números precisos a la incertidumbre de lo que observamos, medimos, modelamos, etc. Por ello Joseph K. Blitzstein y Jessica Hwang dicen La matemática es la lógica de la certeza mientras que la probabilidad es la lógica de la incerteza.\nEntender como pensar en presencia de incerteza es central en Estadística y Ciencia de Datos y prácticamente en cualquier disciplina científica. Esta incerteza proviene de diversas fuentes, incluyendo datos incompletos, errores de medición, límites de los diseños experimentales, dificultad de observar ciertos eventos, aproximaciones, etc.\nA continuación veremos una breve introducción a conceptos centrales en probabilidad a partir de lo cuales podremos comprender mejor los fundamentos del modelado Bayesiano. Para quienes tengan interés en profundizar en el tema recomiendo leer el libro Introduction to Probability de Joseph K. Blitzstein y Jessica Hwang.\nEl marco matemático para trabajar con las probabilidades se construye alrededor de los conjuntos matemáticos.\nEl espacio muestral \\(\\mathcal{X}\\) es el conjunto de todos los posibles resultados de un experimento. Un evento \\(A\\) es un subconjunto de \\(\\mathcal{X}\\). Decimos que \\(A\\) ha ocurrido si al realizar un experimento obtenemos como resultado \\(A\\). Si tuviéramos un típico dado de 6 caras tendríamos que:\n\\[\\mathcal{X} = \\{1, 2, 3, 4, 5, 6\\} \\tag {0.0}\\]\nPodemos definir al evento \\(A\\) como:\n\\[A = \\{2\\} \\tag {0.1}\\]\nSi queremos indicar la probabilidad del evento \\(A\\) escribimos \\(P(A=2)\\) o de forma abreviada \\(P(A)\\).\n\\(P(A)\\) puede tomar cualquier valor en el intervalo comprendido entre 0 y 1 (incluidos ambos extremos), en notación de intervalos esto se escribe como [0, 1]. Es importante notar que no es necesariamente cierto que \\(P(A) = \\frac{1}{6}\\).\nAl definir el evento \\(A\\) podemos usar más de un elemento de \\(\\mathcal{X}\\). Por ejemplo, números impares \\(A = \\{1, 3, 5\\}\\), o números mayores o iguales a 4 \\(A = \\{4,5,6\\}\\), o \\(A = \\{1,2,4,6\\}\\). Para cualquier problema concreto la definición de un evento como \\(A\\) dependerá directamente del problema.\nResumiendo, los eventos son subconjuntos de un espacio muestral definido adecuadamente y las probabilidades son números entre 0 y 1 asociados a la posibilidad que esos eventos ocurran. Si el evento es imposible entonces la probabilidad de ese evento será exactamente 0, si en cambio el evento sucede siempre entonces la probabilidad de ese evento será de 1. Todos los valores intermedios reflejan grados de incerteza. Desde este punto de vista es natural preguntarse cual es la probabilidad que la masa de Saturno sea \\(x\\) kg, o hablar sobre la probabilidad de lluvia durante el 25 de Mayo de 1810, o la probabilidad de que mañana amanezca.\nEsta interpretación del concepto de probabilidad como medida de incertidumbre se suele llamar interpretación Bayesiana o subjetiva. Existen otras interpretaciones, por ej según la interpretación frecuentista una probabilidad es la proporción de veces que un evento sucedería si pudiéramos repetir infinitas veces una observación bajo las mismas condiciones. Es importante destacar que estas interpretaciones son andamiajes conceptuales, interpretaciones filosóficas. El aparato matemático que describe las probabilidades es uno solo y no distingue entre estas u otras interpretaciones.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#probabilidad-condicional",
    "href": "00_Probabilidad.html#probabilidad-condicional",
    "title": "1  Probabilidad",
    "section": "1.3 Probabilidad condicional",
    "text": "1.3 Probabilidad condicional\nUna probabilidad condicional es simplemente la probabilidad de un evento dado que conocemos que otro evento ha sucedido. Al preguntar cual es la probabilidad que llueva dado que está nublado estamos planteando una probabilidad condicional.\nDado dos eventos \\(A\\) y \\(B\\) siendo \\(P(B) &gt; 0\\), la probabilidad de \\(A\\) dado \\(B\\) es definida como:\n\\[\nP(A \\mid B) \\triangleq \\frac{P(A, B)}{P(B)} \\tag{0.2}\n\\]\n\\(P(A, B)\\) es la probabilidad conjunta, es decir la probabilidad que suceda el evento \\(A\\) y que ocurra el evento \\(B\\), también se suele escribir como \\(P(A \\cap B)\\), el símbolo \\(\\cap\\) indica intersección de conjuntos.\n\\(P(A \\mid B)\\) es lo que se conoce como probabilidad condicional, y es la probabilidad de que ocurra el evento A condicionada por el conocimiento que B ha ocurrido. Por ejemplo la probabilidad que una vereda esté mojada puede ser diferente de la probabilidad que esa vereda esté mojada dado que está lloviendo.\nUna probabilidad condicional se puede visualizar como la reducción del espacio muestral. Para ver esto de forma más clara vamos a usar una figura adaptada del libro Introduction to Probability de Joseph K. Blitzstein y Jessica Hwang. En ella se puede ver como pasamos de tener los eventos \\(A\\) y \\(B\\) en el espacio muestral \\(\\mathcal{X}\\), en el primer cuadro, a tener \\(P(A \\mid B)\\) en el último cuadro donde el espacio muestral se redujo de \\(\\mathcal{X}\\) a \\(B\\).\n\nEl concepto de probabilidad condicional está en el corazón de la estadística y es central para pensar en como debemos actualizar el conocimiento que tenemos de un evento a la luz de nuevos datos. Veremos más sobre esto en los próximos capítulos. Por ahora dejamos este tema con la siguiente aclaración. Desde el punto de vista práctico, todas las probabilidades son condicionales (respecto de algún supuesto o modelo) aún cuando no lo expresemos explícitamente, no existen probabilidades sin contexto.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#distribuciones-de-probabilidad",
    "href": "00_Probabilidad.html#distribuciones-de-probabilidad",
    "title": "1  Probabilidad",
    "section": "1.4 Distribuciones de probabilidad",
    "text": "1.4 Distribuciones de probabilidad\nA nosotros en general no nos interesará calcular la probabilidad de eventos concretos sino que nos interesará calcular distribuciones de probabilidad. Es decir, en vez de calcular la probabilidad de obtener el número 5 al arrojar un dado, nos interesará averiguar el listado de todas las posibilidades del dado (1 al 6). Una vez obtenido este listado podremos hacer preguntas como ¿Cuál es la probabilidad de obtener el número 5?, ¿Cuánto más probable es obtener número pares que impares? u otras preguntas relacionadas. El nombre formal de este listado es distribución de probabilidad.\nEn el ejemplo del dado obtuvimos una distribución de probabilidad empírica, es decir una distribución calculada a partir de datos. Pero también existen distribuciones teóricas, las cuales son centrales en estadística entre otras razones por que permiten construir modelos probabilistas.\nLas distribuciones de probabilidad teóricas tienen formulas matemáticas precisas, de forma similar a como las circunferencias tienen una definición matemática precisa.\n\nUna circunferencia es el lugar geométrico de los puntos de un plano que equidistan a otro punto llamado centro.\n\nDado el parámetro radio una circunferencia queda perfectamente definida. Si necesitáramos ubicar la circunferencia respecto de otros objetos en el plano, necesitaríamos además las coordenadas del centro, pero omitamos ese detalle por el momento.\nVeamos el siguiente ejemplo:\n\ndef dibuja_circ(radio):\n    _, ax = plt.subplots(figsize=(2, 2))\n    x = np.linspace(0, 2*np.pi, 100)\n    ax.plot(radio*np.cos(x), radio*np.sin(x))\n    ax.set_xlim(-11, 11)\n    ax.set_ylim(-11, 11)\n    ax.set_xticks([])\n    ax.set_yticks([])\n\n\ninteract(dibuja_circ,\n         radio=ipyw.FloatSlider(min=0.5, max=10, step=0.5, value=2.));\n\n\n\n\nPodríamos decir que no existe una sola circunferencia, sino una familia de circunferencias donde cada miembro se diferencia del resto solo por el valor del parámetro radio, ya que una vez definido este parámetro la circunferencia queda definida.\nDe forma similar las distribuciones de probabilidad vienen en familias cuyos miembros quedan definidos por uno o más parámetros. Es común que los nombres de los parámetros de las distribuciones de probabilidad sean letras del alfabeto griego, aunque esto no es siempre así.\nEn el siguiente ejemplo tenemos una distribución de probabilidad que podríamos usar para representar un dado y que es controlada por dos parámetros \\(\\alpha\\) y \\(\\beta\\):\n\ndef dist_dado(α, β):\n    n = 5\n    x = np.arange(0, 6)\n    dist_pmf = special.binom(n, x) * (special.beta(x+α, n-x+β) / special.beta(α, β))\n    plt.vlines(x, 0, dist_pmf, colors='C0', lw=4)\n    plt.ylim(0, 1)\n    plt.xticks(x, x+1)\n\n\ninteract(dist_dado,\n         α=ipyw.FloatSlider(min=0.5, max=10, step=0.5, value=1),\n         β=ipyw.FloatSlider(min=0.5, max=10, step=0.5, value=1));\n\n\n\n\nEsta distribución (o familia de distribuciones) se llama beta-binomial, si cambiamos los parámetros \\(\\alpha\\) y \\(\\beta\\) la “forma particular” de la distribución cambiará, podemos hacer que sea plana o concentrada más hacia el medio o hacia uno u otro extremo, etc. Así como el radio de la circunferencia debe ser positivo, los parámetros \\(\\alpha\\) y \\(\\beta\\) también están restringidos a ser positivos.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#variables-aleatorias-discretas-y-distribuciones-de-probabilidad",
    "href": "00_Probabilidad.html#variables-aleatorias-discretas-y-distribuciones-de-probabilidad",
    "title": "1  Probabilidad",
    "section": "1.5 Variables aleatorias discretas y distribuciones de probabilidad",
    "text": "1.5 Variables aleatorias discretas y distribuciones de probabilidad\nUna variable aleatoria es una función que asocia números reales \\(\\mathbb{R}\\) con un espacio muestral. Continuando con el ejemplo del dado si los eventos de interés fuesen los números del dado entonces el mapeo es simple, ya que asociamos ⚀ con el número 1, ⚁ con el 2, etc. Si tuviéramos dos dados podríamos definir una variable aleatoria \\(S\\) como la suma de ambos dados. En este caso la variable aleatoria tomaría los valores \\(\\{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\\}\\) y si los dados no están trucados la distribución de probabilidad de la variable sería\n\nOtra variable aleatoria podría ser \\(C\\) cuyo espacio muestral es \\(\\{rojo, verde, azul\\}\\). Si los eventos de interés fuesen rojo, verde, azul, entonces podríamos codificarlos de la siguiente forma:\nC(rojo) = 0, C(verde)=1, C(azul)=2\nEsta codificación es útil ya que en general es más fácil operar con números que con cadenas (strings), ya sea que las operaciones las hagamos manualmente o con una computadora.\nUna variable es aleatoria en el sentido de que en cada experimento es posible obtener un evento distinto sin que la sucesión de eventos siga un patrón determinista. Por ejemplo si preguntamos cual es el valor de \\(C\\) tres veces seguida podríamos obtener, rojo, rojo, azul o quizá azul, verde, azul, etc.\nCuando se habla de variables aleatorias, es común que surjan algunos malos entendidos:\n\nLa variable NO puede tomar cualquier valor imaginable, en el ejemplo de los colores solo son posibles 3 valores. En el ejemplo del dado solo 6 valores son posibles.\nAleatorio NO implica que todos los eventos tengan igual probabilidad.\n\nbien podría darse el siguiente ejemplo:\n\\[P(C=rojo) = \\frac{1}{2}, P(C=verde) = \\frac{1}{4}, P(C=azul) = \\frac{1}{4}\\]\nLa equiprobabilidad de los eventos es solo un caso especial.\n\nUna variable aleatoria discreta es una variable que puede tomar valores discretos, los cuales forman un conjunto finito (o infinito numerable). En nuestro ejemplo \\(C\\) es discreta ya que solo puede tomar 3 valores, sin posibilidad de valores intermedios entre ellos, no es posible obtener el valor verde-rojizo! \\(S\\) también es discreta y como ya dijimos solo es posible obtener los enteros en el intervalo [2-12].\nSi en vez de “rótulos” hubiéramos usado el espectro continuo de longitudes onda visibles otro sería el caso, ya que podríamos haber definido a \\(C=\\{400 \\text{ nm} ... 750\\text{ nm}\\}\\) y en este caso no hay dudas que sería posible obtener un valor a mitad de camino entre rojo (\\(\\approx 700 \\text{ nm}\\)) y verde (\\(\\approx 530 \\text{ nm}\\)), de hecho podemos encontrar infinitos valores entre ellos. Este sería el ejemplo de una variable aleatoria continua.\nUna variable aleatoria tiene una lista asociada con la probabilidad de cada evento. El nombre formal de esta lista es distribución de probabilidad, en el caso particular de variables aleatorias discretas se le suele llamar también función de masa de probabilidad (o pmf por su sigla en inglés). Es importante destacar que la \\(pmf\\) es una función que devuelve probabilidades, por lo tanto siempre obtendremos valores comprendidos entre [0, 1] y cuya suma total (sobre todos los eventos) dará 1.\nEn principio nada impide que uno defina su propia distribución de probabilidad. Pero a lo largo de los últimos 3 siglos se han identificado y estudiado muchas distribuciones de probabilidad que dado su utilidad se les ha asignado “nombre propio”, por lo que conviene saber sobre su existencia. El siguiente listado no es exhaustivo ni tiene como propósito que memoricen las distribuciones y sus propiedades, solo que ganen cierta familiaridad con las mismas. Si en el futuro necesitan utilizar alguna \\(pmf\\) pueden volver a esta notebook o pueden revisar Wikipedia donde encontrarán información muy completa.\nEn las siguientes gráficas las alturas de los puntos azules indican la probabilidad de cada valor de \\(x\\). Se indican, además, la media (\\(\\mu\\)) y desviación estándar (\\(\\sigma\\)) de las distribuciones, es importante destacar que estos valores NO son calculados a partir de datos, de hecho no hay datos solo objetos matemáticos. Los valores de \\(\\mu\\) y \\(\\sigma\\) son propiedades matemáticas de las distribuciones, de la misma forma que el área de un círculo es una propiedad que queda definida una vez que fijamos el parámetro radio.\n\n1.5.1 Distribución uniforme discreta\nEs una distribución que asigna igual probabilidad a un conjunto finitos de valores, su \\(pmf\\) es:\n\\[p(k \\mid a, b)={\\frac {1}{b - a + 1}} = \\frac{1}{n}\\tag {0.3}\\]\nPara valores de \\(k\\) en el intervalo [a, b], fuera de este intervalo \\(p(k) = 0\\), donde \\(n=b-a+1\\) es la cantidad total de valores que puede tomar \\(k\\).\nPodemos usar esta distribución para modelar, por ejemplo un dado no cargado.\n\ndist = pz.DiscreteUniform(lower=1, upper=6)\n# PreliZ usa \"plot_pdf\" tanto para distribuciones discretas como continuas\nax = dist.plot_pdf(moments=\"md\", support=(0, 7))\nax.set_xlabel('x')\nax.set_ylabel('p(x)', rotation=0, labelpad=25);\n\n\n\n\n\n\n\n\nEn la figura anterior la altura de cada punto indica la probabilidad de cada evento, usamos puntos y lineas punteadas para remarcar que la distribución es discreta. En este ejemplo en concreto la distribución uniforme está definida en el intervalo [1, 6]. Por lo tanto todos los valores menores a 1 y mayores a 6 tienen probabilidad 0. Al ser una distribución uniforme todos los puntos tienen la misma altura y esa altura es \\(\\frac{1}{6}\\).\nLos parámetros de la distribución discreta uniforme son dos: * El límite inferior representado con la letra “a” en la expresión 0.3 * El límite superior representado con la letra “b” en la expresión 0.3\nSi cambiamos los parámetros la “forma particular” de la distribución cambiará (prueben por ejemplo reemplazar upper=6 en el bloque de código anterior por upper=4). Es por ello que se suele hablar de familia de distribuciones, cada miembro de esa familia es una distribución con una combinación particular y válida de parámetros. Por ejemplo la familia de distribuciones discretas uniforme es aquella indicada en la expresión 0.3, siempre y cuando: * \\(a &lt; b\\) * \\(a \\in \\mathbb {Z}\\) * \\(b \\in  \\mathbb {Z}\\)\ndonde \\(\\mathbb {Z}\\) es el conjunto de los números enteros.\nEs común vincular los parámetros con cantidades que tienen sentido físico por ejemplo en un dado de 6 caras tiene sentido que \\(a=1\\) y \\(b=6\\). A veces desconocemos los valores de los parámetros y es nuestro trabajo utilizar datos y métodos estadísticos para encontrar esos valores.\n\n\n1.5.2 Distribución binomial\nEs la distribución de probabilidad discreta que cuenta el número de éxitos en una secuencia de \\(n\\) ensayos de Bernoulli (experimentos si/no) independientes entre sí, con una probabilidad fija \\(p\\) de ocurrencia del éxito entre los ensayos. Cuando \\(n=1\\) esta distribución se reduce a la distribución de Bernoulli.\n\\[p(x \\mid n,p) = \\frac{n!}{x!(n-x)!}p^x(1-p)^{n-x} \\tag {0.4}\\]\nEl término \\(p^x(1-p)^{n-x}\\) indica la probabilidad de obtener \\(x\\) éxitos en \\(n\\) intentos. Este término solo tiene en cuenta el número total de éxitos obtenidos pero no la secuencia en la que aparecieron. El primer término conocido como coeficiente binomial calcula todas las posibles combinaciones de \\(n\\) en \\(x\\), es decir el número de subconjuntos de \\(x\\) elementos escogidos de un conjunto con \\(n\\) elementos.\n\ndist = pz.Binomial(n=4, p=0.5)\nax = dist.plot_pdf(moments=\"md\")\nax.set_xlabel('x')\nax.set_ylabel('p(x)', rotation=0, labelpad=25);\n\n\n\n\n\n\n\n\n\n\n1.5.3 Distribución de Poisson\nEs una distribución de probabilidad discreta que expresa la probabilidad que \\(x\\) eventos sucedan en un intervalo fijo de tiempo (o espacio o volumen) cuando estos eventos suceden con una tasa promedio \\(\\mu\\) y de forma independiente entre si. Se la utiliza para modelar eventos con probabilidades pequeñas (sucesos raros) como accidentes de tráfico o decaimiento radiactivo.\n\\[\np(x \\mid \\mu) = \\frac{\\mu^{x} e^{-\\mu}}{x!} \\tag {0.5}\n\\]\ndonde x es el número de eventos \\((x =0,1,2,\\ldots)\\)\nTanto la media como la varianza de esta distribución están dadas por \\(\\mu\\).\nA medida que \\(\\mu\\) aumenta la distribución de Poisson se aproxima a una distribución Gaussiana (aunque sigue siendo discreta). La distribución de Poisson tiene estrecha relación con otra distribución de probabilidad, la binomial. Una distribución binomial puede ser aproximada con una distribución de Poisson, cuando \\(n &gt;&gt; p\\), es decir, cuando la cantidad de “éxitos” (\\(p\\)) es baja respecto de la cantidad de “intentos” (p) entonces \\(\\text{Poisson}(np) \\approx \\text{Binon}(n, p)\\). Por esta razón la distribución de Poisson también se conoce como “ley de los pequeños números” o “ley de los eventos raros”. Ojo que esto no implica que \\(\\mu\\) deba ser pequeña, quien es pequeño/raro es \\(p\\) respecto de \\(n\\).\n\ndist = pz.Poisson(mu=2.3)  # número de veces que se espera que ocurra un evento.\n# PreliZ conoce cuales son los límites de una distribución y los usa al grafica\n# Para distribuciones que no tienen límites PreliZ usa los cuantiles 0.001 y 0.999\n# En el caso de la distribución de Poisson, el gráfico va de 0 a el cuantil 0.999\nax = dist.plot_pdf(moments=\"md\")\nax.set_xlabel('x')\nax.set_ylabel('p(x)', rotation=0, labelpad=25);",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#variables-aleatorias-y-distribuciones-de-probabilidad-continuas",
    "href": "00_Probabilidad.html#variables-aleatorias-y-distribuciones-de-probabilidad-continuas",
    "title": "1  Probabilidad",
    "section": "1.6 Variables aleatorias y distribuciones de probabilidad continuas",
    "text": "1.6 Variables aleatorias y distribuciones de probabilidad continuas\nHasta ahora hemos visto variables aleatorias discretas y distribuciones de masa de probabilidad. Existe otro tipo de variable aleatoria que son muy usadas y son las llamadas variables aleatorias continuas, ya que toman valores en \\(\\mathbb{R}\\).\nLa diferencia más importante entre variables aleatoria discretas y continuas es que para las continuas \\(P(X=x) = 0\\), es decir, la probabilidad de cualquier valor es exactamente 0.\nEn las gráficas anteriores, para variables discretas, es la altura de los puntos lo que define la probabilidad de cada evento. Si sumamos todas las alturas siempre obtenemos 1. En una distribución continua no tenemos una cantidad finita de puntos que sumar, en cambio tenemos una cantidad infinita de puntos que definen una curva continua, la altura de esa curva es la densidad de probabilidad. Si queremos averiguar cuanto más probable es el valor \\(x_1\\) respecto de \\(x_2\\) basta calcular:\n\\[\\frac{pdf(x_1)}{pdf(x_2)} \\tag {0.6}\\]\nDonde \\(pdf\\) es la función de densidad de probabilidad (por su sigla en inglés). Y es análoga a la \\(pmf\\) que vimos para variables discretas. Una diferencia importante es que la \\(pdf(x)\\) puede devolver mayores a 1. Para obtener una probabilidad a partir de una \\(pdf\\) debemos integrar en un intervalo dado, ya que es el área bajo la curva y no la altura lo que nos da la probabilidad, es decir es esta integral la que debe dar entre 0 y 1.\n\\[P(a \\lt X \\lt b) =  \\int_a^b pdf(x) dx\\]\nEn muchos textos es común usar \\(p\\) para referirse a la probabilidad de un evento en particular o a la \\(pmf\\) o a la \\(pdf\\), esperando que la diferencia se entienda por contexto.\nA continuación veremos varias distribuciones continuas.\n\n1.6.1 Distribución uniforme\nAún siendo simple, la distribución uniforme es muy usada en estadística, por ejemplo para representar nuestra ignorancia sobre el valor que pueda tomar un parámetro.\n\\[\np(x \\mid a,b)=\\begin{cases} \\frac{1}{b-a} & para\\ a \\le x \\le b \\\\ 0 &  \\text{para el resto} \\end{cases} \\tag {0.7}\n\\]\n\ndist = pz.Uniform(0, 1)  \nx_rvs = dist.rvs(500)  # muestrear 500 valores de la distribución\nax = dist.plot_pdf(moments=\"md\")\nax.hist(x_rvs, density=True)\nax.set_xlabel('x')\nax.set_ylabel('pdf(x)', rotation=0, labelpad=25);\n\n\n\n\n\n\n\n\nEn la figura anterior la curva azul representa la \\(pdf\\). La \\(pdf\\) es un objeto matemático que da la descripción exacta de la distribución, no es algo que exista en la realidad si no una construcción matemática que es útil para aproximar o modelar algún aspecto de la realidad. La \\(pdf\\) es como las esferas, las esferas no existen pero pueden ser útiles para describir objetos tales como pelotas, planetas, átomos, aún cuando ni las pelotas, planetas o átomos sean esferas.\nEl histograma en turquesa representa una muestra tomadas a partir de la \\(pdf\\) representada en azul. A diferencia de la curva azul, que es un objeto (matemático) concreto. Una muestra es aleatoria. Cada vez que ejecutemos la celda anterior la curva azul será la misma pero el histograma cambiará.\nUna aclaración antes de continuar. Los histogramas no son lo mismo que los gráficos de barras. Los histogramas son una forma de representación visual de datos que usa barras a fin de aproximar una distribución continua. Si bien la cantidad de barras es discreta, la distribución que intenta aproximar es continua, es por ello que las barras se dibujan de forma contigua, mientras que en los gráficos de barras (que representan distribuciones discretas) las barras se dibujan espaciadas.\nLuego de estas aclaraciones continuemos con otras distribuciones de probabilidad continuas.\n\n\n1.6.2 Distribución Gaussiana (o normal)\nEs quizá la distribución más conocida. Por un lado por que muchos fenómenos pueden ser descriptos (aproximadamente) usando esta distribución. Por otro lado por que posee ciertas propiedades matemáticas que facilitan trabajar con ella de forma analítica. Es por ello que muchos de los resultados de la estadística se basan en asumir una distribución Gaussiana.\nLa distribución Gaussiana queda definida por dos parámetros, la media \\(\\mu\\) y la desviación estándar \\(\\sigma\\). Una distribución Gaussiana con \\(\\mu = 0\\) y \\(\\sigma = 1\\) es conocida como la distribución Gaussiana estándar.\n\\[\np(x \\mid \\mu,\\sigma) = \\frac{1}{\\sigma \\sqrt{ 2 \\pi}} e^{ - \\frac{ (x - \\mu)^2 } {2 \\sigma^2}} \\tag {0.8}\n\\]\n\ndist = pz.Normal(mu=0, sigma=1)  \nx_rvs = dist.rvs(500)  # muestrear 500 valores de la distribución\nax = dist.plot_pdf(moments=\"md\")\nax.hist(x_rvs, density=True)\nax.set_xlabel('x')\nax.set_ylabel('pdf(x)', rotation=0, labelpad=25);\n\n\n\n\n\n\n\n\n\n\n1.6.3 Distribución t de Student\nHistóricamente esta distribución surgió para estimar la media de una población normalmente distribuida cuando el tamaño de la muestra es pequeño. En estadística Bayesiana su uso más frecuente es el de generar modelos robustos a datos aberrantes.\n\\[p(x \\mid \\nu,\\mu,\\sigma) = \\frac{\\Gamma(\\frac{\\nu + 1}{2})}{\\Gamma(\\frac{\\nu}{2})\\sqrt{\\pi\\nu}\\sigma} \\left(1+\\frac{1}{\\nu}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2\\right)^{-\\frac{\\nu+1}{2}} \\tag {0.9}\n\\]\ndonde \\(\\Gamma\\) es la función gamma y donde \\(\\nu\\) es un parámetro llamado grados de libertad en la mayoría de los textos aunque también se le dice grado de normalidad, ya que a medida que \\(\\nu\\) aumenta la distribución se aproxima a una Gaussiana. En el caso extremo de \\(\\lim_{\\nu\\to\\infty}\\) la distribución es exactamente igual a una Gaussiana.\nEn el otro extremo, cuando \\(\\nu=1\\), (aunque en realidad \\(\\nu\\) puede tomar valores por debajo de 1) estamos frente a una distribución de Cauchy. Es similar a una Gaussiana pero las colas decrecen muy lentamente, eso provoca que en teoría esta distribución no poseen una media o varianza definidas. Es decir, es posible calcular a partir de un conjunto de datos una media, pero si los datos provienen de una distribución de Cauchy, la dispersión alrededor de la media será alta y esta dispersión no disminuirá a medida que aumente el tamaño de la muestra. La razón de este comportamiento extraño es que en distribuciones como la Cauchy están dominadas por lo que sucede en las colas de la distribución, contrario a lo que sucede por ejemplo con la distribución Gaussiana.\nPara esta distribución \\(\\sigma\\) no es la desviación estándar, que como ya se dijo podría estar indefinida, \\(\\sigma\\) es la escala. A medida que \\(\\nu\\) aumenta la escala converge a la desviación estándar de una distribución Gaussiana.\n\ndist = pz.StudentT(nu=4, mu=0, sigma=2)  \nx_rvs = dist.rvs(500)  # muestrear 500 valores de la distribución\nax = dist.plot_pdf(moments=\"md\")\nax.hist(x_rvs, density=True)\nax.set_xlabel('x')\nax.set_ylabel('pdf(x)', rotation=0, labelpad=25);\n\n\n\n\n\n\n\n\n\n\n1.6.4 Distribución exponencial\nLa distribución exponencial se define solo para \\(x &gt; 0\\). Esta distribución se suele usar para describir el tiempo que transcurre entre dos eventos que ocurren de forma continua e independiente a una taza fija. El número de tales eventos para un tiempo fijo lo da la distribución de Poisson.\n\\[\np(x \\mid \\lambda) = \\lambda e^{-\\lambda x} \\tag {0.10}\n\\]\nLa media y la desviación estándar de esta distribución están dadas por \\(\\frac{1}{\\lambda}\\)\n\ndist = pz.Exponential(3)  \nx_rvs = dist.rvs(500)  # muestrear 500 valores de la distribución\nax = dist.plot_pdf(moments=\"md\")\nax.hist(x_rvs, density=True)\nax.set_xlabel('x')\nax.set_ylabel('pdf(x)', rotation=0, labelpad=25);\n\n\n\n\n\n\n\n\n\n\n1.6.5 Distribución de Laplace\nTambién llamada distribución doble exponencial, ya que puede pensarse como una distribución exponencial “más su imagen especular”. Esta distribución surge de medir la diferencia entre dos variables exponenciales (idénticamente distribuidas).\n\\[p(x \\mid \\mu, b) = \\frac{1}{2b} \\exp \\left\\{ - \\frac{|x - \\mu|}{b} \\right\\} \\tag {0.11}\\]\n\ndist = pz.Laplace(0, 0.7)  \nx_rvs = dist.rvs(500)  # muestrear 500 valores de la distribución\nax = dist.plot_pdf(moments=\"md\")\nax.hist(x_rvs, density=True)\nax.set_xlabel('x')\nax.set_ylabel('pdf(x)', rotation=0, labelpad=25);\n\n\n\n\n\n\n\n\n\n\n1.6.6 Distribución Beta\nEs una distribución definida en el intervalo [0, 1]. Se usa para modelar el comportamiento de variables aleatorias limitadas a un intervalo finito. Es útil para modelar proporciones o porcentajes.\n\\[\np(x \\mid \\alpha, \\beta)= \\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}\\, x^{\\alpha-1}(1-x)^{\\beta-1} \\tag {0.12}\n\\]\nEl primer término es simplemente una constante de normalización que asegura que la integral de la pdf de 1. \\(\\Gamma\\) es la función gamma. Cuando \\(\\alpha=1\\) y \\(\\beta=1\\) la distribución beta se reduce a la distribución uniforme.\nSi queremos expresar la distribución beta en función de la media y la dispersión alrededor de la media podemos hacerlo de la siguiente forma.\n\\[\\alpha = \\mu \\kappa\\] \\[\\beta = (1 − \\mu) \\kappa\\]\nSiendo \\(\\mu\\) la media y \\(\\kappa\\) una parámetro llamado concentración a media que \\(\\kappa\\) aumenta la dispersión disminuye. Nótese, además que \\(\\kappa = \\alpha + \\beta\\).\n\ndist = pz.Beta(5, 2)  \nx_rvs = dist.rvs(500)  # muestrear 500 valores de la distribución\nax = dist.plot_pdf(moments=\"md\")\nax.hist(x_rvs, density=True)\nax.set_xlabel('x')\nax.set_ylabel('pdf(x)', rotation=0, labelpad=25);\n\n\n\n\n\n\n\n\n\n\n1.6.7 Distribución Gamma\nExisten varias parametrizaciones para la distribución Gamma. Nosotros usaremos la siguiente:\n\\[\np(x \\mid \\alpha, \\beta) = \\frac{\\beta^{\\alpha}x^{\\alpha-1}e^{-\\beta x}}{\\Gamma(\\alpha)} \\tag {0.14}\n\\]\nLa distribución gamma se reduce a la exponencial cuando \\(\\alpha=1\\).\nOtra parametrización, disponible por ej en paquetes como PyMC y Preliz, es en términos de la media y la desviación estándar.\n\ndist = pz.Gamma(alpha=3, beta=0.5)\nx_rvs = dist.rvs(500)  # muestrear 500 valores de la distribución\nax = dist.plot_pdf(moments=\"md\")\nax.hist(x_rvs, density=True)\nax.set_xlabel('x')\nax.set_ylabel('pdf(x)', rotation=0, labelpad=25);",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#valor-esperado",
    "href": "00_Probabilidad.html#valor-esperado",
    "title": "1  Probabilidad",
    "section": "1.7 Valor esperado",
    "text": "1.7 Valor esperado\nEl valor esperado (también conocido como esperanza o media) es un número que resume el centro de masa de una distribución. Por ejemplo, si \\(X\\) es una variable aleatoria discreta, podemos calcular su valor esperado como:\n\\[\n    \\mathbb{E}[X] = \\sum_{i=1}^n x_i P(X=x_i)\n\\]\nEn estadística usualmente también queremos medir la dispersión de una distribución, por ejemplo, para representar la incertidumbre en torno a una estimación puntual como la media. Podemos hacer esto con la varianza, que también es un valor esperado:\n\\[\n\\mathbb{V}(X) = \\mathbb{E}[(X - \\mathbb{E}[X])^2] = \\mathbb{E}[X^2] - \\mathbb{E}[X]^2\n\\]\nLa varianza aparece naturalmente en muchos cálculos estadísticos. Sin embargo, para reportar los resultados de un análisis suele ser más útil la desviación estándar, que es la raíz cuadrada de la varianza. La principal ventaja es que esta última está en la mismas escala/unidades que la variable aleatoria.\nEl \\(n\\)-ésimo momento de una variable aleatoria \\(X\\) es \\(\\mathbb{E}[X^n]\\), por lo que el valor esperado (media) y la varianza también se conocen como el primer y segundo momento de una distribución.\nUna vez fijados los parámetros de una distribución de probabilidad. Es posible calcularle sus momentos, el primer momento es la media y el segundo la varianza. Es importante notar que estos valores son propiedades de la distribución y no propiedades de una muestra. Por ejemplo la media y varianza de una distribución Beta(4, 6) es \\(0.4\\) y \\(\\approx 0.22\\), respectivamente\n\npz.Beta(4, 6).plot_pdf(moments=\"mv\");\n\n\n\n\n\n\n\n\nExisten otros momentos, el tercer momento se conoce como sesgo y habla de la asimetría de una distribución\n\npz.Beta(4, 4).plot_pdf(moments=\"s\");\npz.Beta(4, 10).plot_pdf(moments=\"s\");\npz.Beta(10, 4).plot_pdf(moments=\"s\");\n\n\n\n\n\n\n\n\nEl cuarto momento, conocido como curtosis, nos habla del comportamiento de las colas o valores extremos. Suele calcularse de forma tal que de 0 para una Normal. Además las discusiones suelen centrarse en torno a distribuciones con curtosis positiva (como la distribución de Laplace o Student T con \\(\\nu &gt; 4\\)) por lo que es común hablar de exceso de curtosis. Mientras más grande la curtosis de una distribución más pesadas sus colas, es decir es más factible observar valores alejados de la media.\n\npz.Normal(0, 1).plot_pdf(moments=\"k\");\npz.StudentT(4.1, 0, 1).plot_pdf(moments=\"k\");\npz.Uniform(-3, 3).plot_pdf(moments=\"k\");",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#distribución-acumulada",
    "href": "00_Probabilidad.html#distribución-acumulada",
    "title": "1  Probabilidad",
    "section": "1.8 Distribución acumulada",
    "text": "1.8 Distribución acumulada\nLa pdf (o la pmf) son formas comunes de representar y trabajar con variables aleatorias, pero no son las únicas formas posibles. Existen otras representaciones equivalentes. Por ejemplo la función de distribución acumulada (cdf en inglés). Al integrar una pdf se obtiene la correspondiente cdf, y al derivar la cdf se obtiene la pdf.\nLa integral de la pdf es llamada función de distribución acumulada (cdf):\n\\[\ncdf(x) = \\int_{-\\infty}^{x} pdf(x) d(x) \\tag {0.17}\n\\]\nEn algunas situaciones se prefiere hablar de la función de supervivencia:\n\\[\nS(x) = 1 - cdf  \\tag {0.18}\n\\]\nA continuación un ejemplo de la pdf y cdf para 4 distribuciones de la familia Gaussiana.\n\n_, ax = plt.subplots(2, 1, figsize=(8, 6), sharex=True)\nx_valores = np.linspace(-4, 4, 500)\nvalores = [(0., 1.), (0., 2.), (2., .5)]\nfor val in valores:\n    pz.Normal(*val).plot_pdf(ax=ax[0])\n    pz.Normal(*val).plot_cdf(ax=ax[1])\n    ax[1].get_legend().remove()\n\n\n\n\n\n\n\n\nLa siguiente figura tomada del libro Think Stats resume las relaciones entre la cdf, pdf y pmf.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#relación-entre-probabilidad-conjunta-condicional-y-marginal",
    "href": "00_Probabilidad.html#relación-entre-probabilidad-conjunta-condicional-y-marginal",
    "title": "1  Probabilidad",
    "section": "1.9 Relación entre probabilidad conjunta, condicional y marginal",
    "text": "1.9 Relación entre probabilidad conjunta, condicional y marginal\nAl definir probabilidad condicional usamos la expresión 0.2. Ahora que ya estamos familiarizados con las distribuciones de probabilidad podemos representar gráficamente los tres términos en la expresión 0.2, tal como se muestra en la siguiente figura.\n\n\nProbabilidad conjunta \\(p(A, B)\\)\nProbabilidad marginal \\(p(A)\\) o \\(p(B)\\)\nProbabilidad condicional \\(p(A \\mid B)\\)\n\nPodemos re-escribir la expresión 0.2 de la siguiente manera:\n\\[\np(A, B) = p(A \\mid B) {p(B)}  \\tag {0.15}\n\\]\nEs decir si tomo una probabilidad condicional y la evalúo para todos los valores de la cantidad condicionante (\\(B\\) en este caso), obtengo la distribución conjunta. Esto se puede ver gráficamente si pensamos que \\(p(A \\mid B)\\) es una rebanada de p(A, B); rebanada que tomamos a la altura de \\(B\\). Si tomamos todas las rebanadas entonces obtendremos \\(p(A, B)\\).\nPara obtener las probabilidades marginales, que se encuentran en los margenes 😉, podemos calcular algo similar:\n\\[\np(A) = \\sum_B p(A, B) = \\sum_B p(A \\mid B) {p(B)} \\tag {0.16}\n\\]\nCambiando la sumatoria por una integral para distribuciones continuas.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#límites",
    "href": "00_Probabilidad.html#límites",
    "title": "1  Probabilidad",
    "section": "1.10 Límites",
    "text": "1.10 Límites\nLos dos teoremas más conocidos y usados en probabilidad son la ley de los grandes números y el teorema del límite central. Ambos nos dicen que le sucede a la media muestral a medida que el tamaño de la muestra aumenta.\n\n1.10.1 La ley de los grandes números\nEl valor promedio calculado para una muestra converge al valor esperado (media) de dicha distribución. Esto no es cierto para algunas distribuciones como la distribución de Cauchy (la cual no tiene media ni varianza finita).\nLa ley de los grandes números se suele malinterpretar y dar lugar a la paradoja del apostador. Un ejemplo de esta paradoja es creer que conviene apostar en la lotería/quiniela a un número atrasado, es decir un número que hace tiempo que no sale. El razonamiento, erróneo, es que como todos los números tienen la misma probabilidad a largo plazo si un número viene atrasado entonces hay alguna especie de fuerza que aumenta la probabilidad de ese número en los próximo sorteos para así re-establecer la equiprobabilidad de los números.\n\ntamaño_muestra = 200\nmuestras = range(1, tamaño_muestra)\ndist = pz.Uniform(0, 1)\nmedia_verdadera = dist.rv_frozen.stats('m')\n\nfor _ in range(3):\n    muestra = dist.rvs(tamaño_muestra)\n    media_estimada = [muestra[:i].mean() for i in muestras]\n    plt.plot(muestras, media_estimada, lw=1.5)\n\nplt.hlines(media_verdadera, 0, tamaño_muestra, linestyle='--', color='k')\nplt.ylabel(\"media\", fontsize=14)\nplt.xlabel(\"# de muestras\", fontsize=14);\n\n\n\n\n\n\n\n\n\n\n1.10.2 El teorema central del límite\nEl teorema central del límite (también llamado teorema del límite central) establece que si tomamos \\(n\\) valores (de forma independiente) de una distribución arbitraria la media \\(\\bar X\\) de esos valores se distribuirá aproximadamente como una Gaussiana a medida que \\({n \\rightarrow \\infty}\\):\n\\[\n\\bar X_n \\dot\\sim \\mathcal{N} \\left(\\mu,  \\frac{\\sigma^2}{n}\\right) \\tag {0.19}\n\\]\nDonde \\(\\mu\\) y \\(\\sigma^2\\) son la media y varianza poblacionales.\nPara que el teorema del límite central se cumpla se deben cumplir los siguientes supuestos:\n\nLas variables se muestrean de forma independiente\nLas variables provienen de la misma distribución\nLa media y la desviación estándar de la distribución tiene que ser finitas\n\nLos criterios 1 y 2 se pueden relajar bastante y aún así obtendremos aproximadamente una Gaussiana, pero del criterio 3 no hay forma de escapar. Para distribuciones como la distribución de Cauchy, que no posen media ni varianza definida este teorema no se aplica. El promedio de \\(N\\) valores provenientes de una distribución Cauchy no siguen una Gaussiana sino una distribución de Cauchy.\nEl teorema del límite central explica la prevalencia de la distribución Gaussiana en la naturaleza. Muchos de los fenómenos que estudiamos se pueden explicar como fluctuaciones alrededor de una media, o ser el resultado de la suma de muchos factores diferentes. Además, las Gaussianas son muy comunes en probabilidad, estadística y machine learning ya que que esta familia de distribuciones son más simples de manipular matemáticamente que muchas otras distribuciones.\nA continuación vemos una simulación que nos muestra el teorema del límite central en acción.\n\niters = 2000\ndist = pz.Exponential(1)\nmedia, var = dist.rv_frozen.stats('mv')\n\n_, ax = plt.subplots(2, 3)\n\nfor i, n in enumerate([1, 5, 100]):\n    sample = np.mean(dist.rvs((n, iters)), axis=0)\n\n    sd = (var/n)**0.5 \n    x = np.linspace(media - 4 * sd, media + 4 * sd, 200)\n    ax[0, i].plot(x, pz.Normal(media, sd).pdf(x))\n    ax[0, i].hist(sample, density=True, bins=20)\n    ax[0, i].set_title('n = {}'.format(n))\n    osm, osr = stats.probplot(sample, dist=pz.Normal(media, sd), fit=False)\n    ax[1, i].plot(osm, osm)\n    ax[1, i].plot(osm, osr, 'o')\nax[1, 0].set_ylabel('observados')\nax[1, 1].set_xlabel('esperados');",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "00_Probabilidad.html#ejercicios",
    "href": "00_Probabilidad.html#ejercicios",
    "title": "1  Probabilidad",
    "section": "1.11 Ejercicios",
    "text": "1.11 Ejercicios\n\nDe las siguientes expresiones cual(es) se corresponde(n) con el enunciado “la probabilidad de lluvia dado que es 25 de Mayo de 1810”?\n\np(lluvia)\np(lluvia | mayo)\np(25 de Mayo de 1810 | lluvia)\np(lluvia | 25 de Mayo de 1810 )\np(lluvia, 25 de Mayo de 1810) / p(25 de Mayo de 1810)\n\nEnuncie con palabras cada una de las expresiones del punto anterior.\nSegún la definición de probabilidad condicional\n\nCual es el valor de \\(P(A \\mid A)\\)?\nCual es la probabilidad de \\(P(A, B)\\)?\nCual es la probabilidad de \\(P(A, B)\\) en el caso especial que \\(A\\) y \\(B\\) sean independientes?\nCuando se cumple que \\(P(A \\mid B) = P(A)\\)?\nEs posible que \\(P(A \\mid B) &gt; P(A)\\), cuando?\nEs posible que \\(P(A \\mid B) &lt; P(A)\\), cuando?\n\n\nLos siguientes ejercicios se deben realizar usando Python (y NumPy, PreliZ, Matplotlib) 1. Ilustrar que la distribución de Poisson se aproxima a una binomial cuando para la binomial \\(n &gt;&gt; p\\).\n\nPara alguna de las distribuciones discretas presentadas en esta notebook verificar que la probabilidad total es 1.\nPara alguna de las distribuciones continuas presentadas en esta notebook verificar que el área bajo la curva es 1.\nObtener la cdf a partir de la pdf (usar el método pdf provisto por PreliZ). La función np.cumsum puede ser de utilidad.\nObtener la pdf a partir de la cdf (usar el método cdf provisto por PreliZ). La función np.diff puede ser de utilidad.\nRepetir la simulación para la ley de los grandes números para al menos 3 distribuciones de probabilidad. Para cada distribución probar más de un conjunto de parámetros.\nRepetir la simulación para el teorema central del límite para al menos 3 distribuciones de probabilidad. Para cada distribución probar más de un conjunto de parámetros.\nMostrar en un gráfico que la media \\(\\bar X\\) converge a \\(\\mu\\) y la varianza converge a \\(\\frac{\\sigma^2}{n}\\) a medida que aumenta el tamaño de la muestra.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Probabilidad</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html",
    "href": "01_Inferencia_Bayesiana.html",
    "title": "2  Inferencia Bayesiana",
    "section": "",
    "text": "2.1 El universo Bayesiano\nLos objetivos de este capítulo son:\nEn este curso aprenderemos sobre una forma de hacer estadística llamada usualmente estadística Bayesiana. El nombre se debe a Thomas Bayes (1702-1761) un ministro presbiteriano, y matemático aficionado, quien derivó por primera vez lo que ahora conocemos como el teorema de Bayes, el cual fue publicado (postumanente) en 1763. Sin embargo una de las primeras personas en realmente desarrollar métodos Bayesianos, fue Pierre-Simon Laplace (1749-1827), por lo que tal vez sería un poco más correcto hablar de Estadística Laplaciana y no Bayesiana.\nExiste otro paradigma estadístico llamado estadística clásica o frecuentista. Si ustedes han tenido un curso de estadística (ya sea en el grado o posgrado) es casi seguro que dicho curso fue sobre métodos frecuentistas (aun cuando esto no haya sido explicitado). Es interesante notar que mientras los orígenes de las estadística Bayesiana se remontan al siglo XVIII. Los métodos “clásicos” (o frecuentistas) fueron desarrollados principalmente durante el siglo XX! De hecho una de las motivaciones para desarrollar métodos frecuentistas fue un sentimiento e ideología anti-bayesiano. A lo largo del curso nos centraremos en los métodos Bayesianos.\nHay dos ideas centrales que hacen que un método sea Bayesiano:\nEn el universo Bayesiano las cantidades conocidas son consideradas fijas y usualmente les llamamos datos. Por el contrario toda cantidad desconocida es considerada como una variable aleatoria y modelada usando una distribución de probabilidad.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#el-universo-bayesiano",
    "href": "01_Inferencia_Bayesiana.html#el-universo-bayesiano",
    "title": "2  Inferencia Bayesiana",
    "section": "",
    "text": "Toda cantidad desconocida es modelada utilizando una distribución de probabilidad de algún tipo.\nEl teorema de Bayes es usado para actualizar dicha distribución a la luz de los datos.\n\n\n\n2.1.1 Teorema de Bayes\nEl teorema de Bayes es una consecuencia directa de la regla del producto, veamos.\n\\[\np(\\theta, Y) = p(\\theta \\mid Y)\\; p(Y) \\\\\np(\\theta, Y) = p(Y \\mid \\theta)\\; p(\\theta)\n\\] Dado que los dos términos a la derecha de la igualdad son iguales entre si podemos escribir que:\n\\[\np(\\theta \\mid Y) \\; p(Y) = p(Y \\mid \\theta)\\; p(\\theta)\n\\]\nReordenando llegamos al Teorema de Bayes!\n\\[\np(\\theta \\mid Y) = \\frac{p(Y \\mid \\theta) p(\\theta)}{p(Y)}\n\\]\nEl cual también suele ser escrito de la siguiente forma:\n\\[\n\\overbrace{p(\\theta \\mid Y)}^{\\text{posterior}} = \\frac{\\overbrace{p(Y \\mid \\theta)}^{\\text{likelihood}} \\overbrace{p(\\theta)}^{\\text{prior}}}{\\underbrace{\\int_{\\Theta} p(Y \\mid \\theta) p(\\theta) \\text{d}\\theta}_{\\text{likelihood marginal}}}\n\\]\nEl a priori es la forma de introducir conocimiento previo sobre los valores que pueden tomar los parámetros. A veces cuando no sabemos demasiado se suelen usar a prioris que asignan igual probabilidad a todos los valores de los parámetros, otras veces se puede elegir a prioris que restrinjan los valores de los parámetros a rangos razonables, algo que se conoce como regularización, por ejemplo solo valores positivos. Muchas veces contamos con información mucho más precisa como medidas experimentales previas o límites impuesto por alguna teoría.\nEl likelihood es la forma de incluir nuestros datos en el análisis. Es una expresión matemática que especifica la plausibilidad de los datos. El likelihood es central tanto en estadística Bayesiana como en estadística no-Bayesiana. A medida que la cantidad de datos aumenta el likelihood tiene cada vez más peso en los resultados, esto explica el porqué a veces los resultados de la estadística Bayesiana y frecuentista coinciden cuando la muestra es grande.\nEl a posteriori es la distribución de probabilidad para los parámetros. Es la consecuencia lógica de haber usado un conjunto de datos, un likelihood y un a priori. Se lo suele pensar como la versión actualizada del a priori. De hecho un a posteriori puede ser un a priori de un análisis a futuro.\nLa likelihood marginal (también llamado evidencia) es el likelihood promediado sobre todas los posibles hipótesis (o conjunto de parámetros) \\(\\theta\\), esto es equivalente a \\(p(Y)\\). En general, la evidencia puede ser vista como una simple constante de normalización que en la mayoría de los problemas prácticos puede (y suele) omitirse. Por lo que el teorema de Bayes suele aparecer escrito como:\n\\[\np(\\theta \\mid Y) \\propto p(Y \\mid \\theta) p(\\theta)\n\\]\nEl rol de todos estos términos irá quedando más claro a medida que avancemos.\n\n\n2.1.2 El a posteriori como único estimador\nEl a posteriori representa todo lo que sabemos de un problema, dado un modelo y un conjunto de datos. Y por lo tanto cualquier cantidad que nos interese sobre el problema puede deducirse a partir de él. Típicamente esto toma la forma de integrales como la siguiente.\n\\[\nJ = \\int \\varphi(\\theta) \\ \\ p(\\theta \\mid Y) d\\theta\n\\]\nPor ejemplo, para calcular la media de \\(\\theta\\) deberíamos reemplazar \\(\\varphi(\\theta)\\), por \\(\\theta\\):\n\\[\n\\bar \\theta = \\int \\theta \\ \\ p(\\theta \\mid Y) d\\theta\n\\]\nEsto no es más que la definición de un promedio pesado, donde cada valor de \\(\\theta\\) es pesado según la probabilidad asignada por el a posteriori.\nEn la práctica, y al usar métodos computacionales como los usados en este curso, estas integrales pueden aproximarse usando sumas.\n\n\n2.1.3 Estadística Bayesiana en tres pasos\nEl teorema de Bayes es el único estimador usado en estadística Bayesiana. Por lo que conceptualmente la estadística Bayesiana resulta muy simple. Según George Box y Andrew Gelman et al. (2013) la estadística Bayesiana se reduce a tres pasos:\n\nCrear un modelo probabilístico. Los modelos probabilísticos son historias que dan cuenta de como se generan los datos observados (o por observar). Los modelos se expresan usando distribuciones de probabilidad.\nCondicionar el modelo a los datos observados a fin de obtener el a posteriori. Usando el teorema de Bayes se actualizan las probabilidades asignadas a priori de acuerdo a los datos observados obteniéndose las probabilidades a posteriori.\nCriticar el ajuste del modelo generado a los datos y evaluar las consecuencias del modelo. Se puede demostrar que dada la información previa y los datos observados no existe otro mecanismo capaz de generar una mejor inferencia que la estadística Bayesiana. Esto parece maravilloso, pero hay un problema, solo es cierto si se asumen que los datos y el modelo son correctos. En la práctica, los datos pueden contener errores y los modelos son a duras penas aproximaciones de fenómenos reales. Por lo tanto es necesario realizar varias evaluaciones, incluyendo si las predicciones generadas por el modelo se ajustan a los datos observados, si las conclusiones obtenidas tienen sentido dado el marco conceptual en el que uno trabaja, la sensibilidad de los resultados a los detalles del modelo (sobre todo a detalles para los cuales no tenemos demasiada información), etc.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#inferencia-bayesiana",
    "href": "01_Inferencia_Bayesiana.html#inferencia-bayesiana",
    "title": "2  Inferencia Bayesiana",
    "section": "2.2 Inferencia Bayesiana",
    "text": "2.2 Inferencia Bayesiana\nEn la práctica la mayoría de los modelos tendrán más de un parámetro, pero al usar software como PyMC modelar 1 o 1000 parámetros es más o menos lo mismo. Sin embargo, esos modelos pueden distraernos de los conceptos esenciales, por lo que considero importante comenzar por el caso más sencillo.\n\n2.2.1 El problema de la moneda\nA juzgar por la cantidad de ejemplos sobre monedas arrojadas al aires en libros de estadística y probabilidad, pareciera que las monedas son uno de los objetos de estudio centrales de estas disciplinas.\nUna de las razones detrás de la ubiquidad de este ejemplo es que las monedas son objetos familiares que facilitan discutir conceptos que de otra forma podrían sonar demasiado abstractos. De todas formas quizá la razón más importante sea que el problema puede ser modelado de forma simple y que muchos problemas reales son conceptualmente similares, de hecho cualquier problema en donde obtengamos resultados binarios (0/1, enfermo/sano, spam/no-spam, etc) puede ser pensado como si estuviéramos hablando de monedas. En definitiva el modelo que veremos a continuación (ejemplificado con monedas) sirve para cualquier situación en la cual los datos observados solo pueden tomar dos valores mutuamente excluyentes. Debido a que estos valores son nominales y son dos, a este modelo se le llama binomial.\nEn el siguiente ejemplo trataremos de determinar el grado en que una moneda está sesgada. En general cuando se habla de sesgo se hace referencia a la desviación de algún valor (por ejemplo, igual proporción de caras y cecas), pero aquí usaremos el termino sesgo de forma más general. Diremos que el sesgo es un valor en el intervalo [0, 1], siendo 0 para una moneda que siempre cae ceca y 1 para una moneda que siempre cae cara y lo representaremos con la variable \\(\\theta\\). A fin de cuantificar \\(\\theta\\) arrojaremos una moneda al aire repetidas veces, por practicidad arrojaremos la moneda de forma computacional (¡pero nada nos impide hacerlo manualmente!). Llevaremos registro del resultado en la variable \\(y\\). Siendo \\(y\\) la cantidad de caras obtenidas en un experimento.\nHabiendo definido nuestro problema debemos expresarlo en términos del teorema de Bayes,\n\\[\np(\\theta \\mid Y) \\propto p(Y \\mid  \\theta) p(\\theta)\n\\]\nDonde, como dijimos \\(\\theta = 1\\) quiere decir 100% cara y \\(\\theta = 0\\) 100% ceca.\nAhora solo restar reemplazar los dos términos a la derecha de la igualdad, el a priori y el likelihood, por distribuciones de probabilidad adecuadas y luego multiplicarlas para obtener el término a la izquierda, el a posteriori. Como es la primera vez que haremos ésto, lo haremos paso a paso y analíticamente. En el próximo capítulo veremos cómo hacerlo computacionalmente.\n\n\n2.2.2 Definiendo el a priori\nEl a priori lo modelaremos usando una distribución beta, que es una distribución muy usada en estadística Bayesiana. La \\(pdf\\) de esta distribución es:\n\\[\np(\\theta)= \\frac{\\Gamma(\\alpha+\\beta)}{\\Gamma(\\alpha)\\Gamma(\\beta)}\\, \\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}\n\\]\nEl primer término es una constante de normalización. Por suerte para nuestro problema nos basta con establecer una proporcionalidad, por lo que podemos simplificar esta expresión y escribir la distribución beta de la siguiente forma.\n\\[\np(\\theta) \\propto  \\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}\n\\]\nHay varias razones para usar una distribución beta para este y otros problemas:\n\nLa distribución beta varía entre 0 y 1, de igual forma que lo hace \\(\\theta\\) en nuestro modelo.\nEsta distribución combinada con la que elegiremos como likelihood (ver más adelante), nos permitirá resolver el problema de forma analítica.\nEs una distribución versátil para expresar distintas situaciones.\n\nRespecto al último punto, veamos un ejemplo. Supongamos que el experimento de la moneda es realizado por tres personas. Una de ellas dice no saber nada de la moneda por lo tanto a priori todos los valores de \\(\\theta\\) son igualmente probables. La segunda persona desconfía de la moneda, ya que sospecha que es una moneda trucada, por lo tanto considera que está sesgada, pero no sabe para cual de las dos opciones. Por último, la tercer persona asegura que lo más probable es que \\(\\theta\\) tome un valor alrededor de 0.5 ya que así lo indican experimentos previos y análisis teóricos sobre tiradas de monedas. Todas estas situaciones pueden ser modeladas por la distribución beta, como se ve a continuación.\n\n_, axes = plt.subplots(1, 3, figsize=(12, 3), sharey=True)\n\nparams = [(1, 1), (0.5, 0.5), (20, 20)]\n\nfor (a, b), ax  in zip(params, axes):\n    y = pz.Beta(a, b).plot_pdf(ax=ax, legend=\"title\")\n\n\n\n\n\n\n\n\n\npz.Beta().plot_interactive(fixed_lim=(None, None, None, 10))\n\n\n\n\n\n\n2.2.3 Definiendo el likelihood\nHabiendo definido el a priori veamos ahora el likelihood. Asumiendo que el resultado obtenido al arrojar una moneda no influye en el resultado de posteriores experimentos (es decir los experimentos son independientes entre sí) es razonable utilizar como likelihood la distribución binomial.\n\\[\np(y \\mid \\theta) = \\frac{N!}{y!(N-y)!} \\theta^y (1 - \\theta)^{N−y}\n\\]\nDonde N es la cantidad total de experimentos (monedas arrojadas al aire) e \\(y\\) es la cantidad de caras obtenidas. A los fines prácticos podríamos simplificar la igualdad anterior y convertirla en una proporcionalidad, eliminando el término \\(\\frac{N!}{y!(N-y)!}\\) ya que ese término no depende de \\(\\theta\\) que es lo que nos interesa averiguar. Por lo que podríamos establecer que:\n\\[\np(y \\mid \\theta) \\propto \\theta^y (1 - \\theta)^{N−y}\n\\]\nLa elección de esta distribución para modelar nuestro problema es razonable ya que \\(\\theta\\) es la chance de obtener una cara al arrojar una moneda y ese hecho ha ocurrido \\(y\\) veces, de la misma forma \\(1-\\theta\\) es la chance de obtener ceca lo cual ha sido observado \\(N-y\\) veces.\n\npz.Binomial(1, 0.5).plot_interactive(pointinterval=False, fixed_lim=(None, None, None, 1))\n\n\n\n\n\n\n2.2.4 Obteniendo el a posteriori\nSe puede demostrar que siempre que usemos como prior una función beta y como likelihood una distribución binomial obtendremos como resultado una distribución a posteriori, la cual será una beta con los siguientes parámetros:\n\\[\np(\\theta \\mid y) \\propto \\operatorname{Beta}(\\alpha_{a priori} + y, \\beta_{a priori} + N - y)\n\\]\nVeamos de donde surge este resultado, según el teorema de Bayes la distribución a posteriori es el producto del likelihood y la distribución a priori.\n\\[\np(\\theta \\mid y) \\propto p(y \\mid \\theta) p(\\theta)\n\\]\nPor lo tanto, en nuestro caso tendremos que:\n\\[\np(\\theta \\mid y) \\propto \\theta^y (1 - \\theta)^{N−y} \\theta^{\\alpha-1}(1-\\theta)^{\\beta-1}\n\\]\nReordenando, obtenemos que el a posteriori es:\n\\[\np(\\theta \\mid y) \\propto \\theta^{\\alpha-1+y}(1-\\theta)^{\\beta-1+N−y}\n\\]\nEsto es una distribución Beta (sin considerar la constante de normalización).\nCuando se cumple que para un cierto likelihood la forma funcional del a priori y la del a posteriori coinciden se dice que el a priori es conjugado con el likelihood. Historicamente los problemas en estadística Bayesiana estuvieron restringidos al uso de a prioris conjugados, ya que estos garantizan la tratabilidad matemática del problema, es decir garantizan que es posible obtener una expresión analítica para nuestro problema. En el próximo capítulo veremos técnicas computacionales modernas que permiten calcular la distribución a posteriori incluso cuando no se usan a prioris conjugados. Estas técnicas computacionales han permitido el resurgimiento de la estadística Bayesiana en las últimas décadas.\n\n\n2.2.5 Notación y visualización de modelos Bayesianos\nPara representar modelos en estadística Bayesiana (y en probabilidad en general) se suele utilizar la siguiente notación\n\\[\n\\begin{align}\n\\theta \\sim & \\operatorname{Beta}(\\alpha, \\beta) \\\\\nY \\sim & \\operatorname{Bin}(n=1, p=\\theta)\n\\end{align}\n\\]\nEl símbolo \\(\\sim\\) indica que la variable a la izquierda se distribuye según la distribución a la derecha. Entonces podríamos decir que \\(\\mathbf{\\theta}\\) es una variable aleatoria con distribución \\(\\operatorname{Beta}\\), y que \\(\\operatorname{Beta}\\) está definida por los parámetros \\(\\alpha\\) y \\(\\beta\\), este es nuestro a priori. En la siguiente linea tenemos el likelihood el cual está definido por una distribución binomial con parámetros \\(n=1\\) y \\(p=\\theta\\).\nGráficamente esto se puede representar usando los diagramas de Kruschke:\n\nEn el primer nivel (de arriba hacia abajo) se observa el a priori, luego el likelihood, y por último los datos. Las flechas indican la vinculación entre las partes del modelo y el signo \\(\\sim\\) la naturaleza estocástica de las variables.\n\n\n2.2.6 Obteniendo los datos\nBien, ahora que sabemos cómo calcular el a posteriori, lo único que resta es conseguir los datos. En este ejemplo los datos son sintéticos, es decir los obtuve computacionalmente mediante un generador de números (pseudo)aleatorios, pero bien podrían haber surgido de un experimento con una moneda real.\n\n\n2.2.7 Calculando el a posteriori\nEn el próximo capítulo veremos cómo usar métodos computacionales para computar un a posteriori sin necesidad de derivarlo analíticamente. Esto es lo que haremos para resolver el resto de los problemas del curso. Pero dado que ya nos tomamos el trabajo de derivar analíticamente la expresión para el a posteriori vamos a usar esa expresión. Si miran el código de la siguiente celda verán que la mayoría de las lineas se encargan de dibujar los resultados y no de calcularlos. El cálculo del a posteriori ocurre en la línea 20. Cada una de estas lineas computa el a posteriori para cada uno de los a prioris que vimos antes. El cálculo es simple, tan solo se computa el valor del a posteriori (usando la función pdf de la distribución beta provista por SciPy) para 2000 puntos igualmente espaciados entre 0 y 1 (linea 9). El loop que empieza en la linea 11 se debe a que exploraremos cómo cambian las distribuciones a posteriori para distinta cantidad de datos (n_intentos). Con un círculo negro de contorno blanco se indica el valor real de \\(\\theta\\), valor que por supuesto es desconocido en una situación real, pero conocido para mí, ya que los datos son sintéticos.\n\nplt.figure(figsize=(12, 9))\n\nn_trials = [0, 1, 2, 3, 4, 8, 16, 32, 50, 150]\ndata = [0, 1, 1, 1, 1, 4, 6, 9, 13, 48]\ntheta_real = 0.35\n\nbeta_params = [(1, 1), (0.5, 0.5), (20, 20)]\ndist = pz.Beta\nx = np.linspace(0, 1, 2000)\n\nfor idx, N in enumerate(n_trials):\n    if idx == 0:\n        plt.subplot(4, 3, 2)\n        plt.xlabel('θ')\n    else:\n        plt.subplot(4, 3, idx+3)\n        plt.xticks([])\n    y = data[idx]\n    for (a_prior, b_prior) in beta_params:\n        posterior = dist(a_prior + y, b_prior + N - y).pdf(x)\n        plt.fill_between(x, 0, posterior, alpha=0.7)\n\n    plt.plot(theta_real, 0, ms=9, marker='o', mec='w', mfc='k')\n    plt.plot(0, 0, label=f'{N:4d} experimentos\\n{y:4d} caras', alpha=0)\n    plt.xlim(0, 1)\n    plt.ylim(0, 12)\n    plt.legend()\n    plt.yticks([])",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#analizando-los-resultados",
    "href": "01_Inferencia_Bayesiana.html#analizando-los-resultados",
    "title": "2  Inferencia Bayesiana",
    "section": "2.3 Analizando los resultados",
    "text": "2.3 Analizando los resultados\nLa primer figura del panel muestra los a priori, nuestra estimación de \\(\\theta\\) dado que no hemos realizado ningún experimento. Las sucesivas nueve figuras muestran las distribuciones a posteriori y se indica la cantidad de experimentos y de caras obtenidas. Además se puede ver un círculo negro de contorno blanco en 0.35, la cual representa el valor verdadero de \\(\\theta\\). Por supuesto que en problemas reales este valor es desconocido.\nEste ejemplo es realmente ilustrativo en varios aspectos.\n\nEl resultado de un análisis Bayesiano NO es un solo valor, si no una distribución (a posteriori) de los valores plausibles de los parámetros (dado los datos y el modelo).\nLa dispersión o ancho de las curvas es una medida de la incertidumbre sobre los valores.\nEl valor más probable viene dado por la moda de la distribución (el pico de la distribución).\nAún cuando \\(\\frac{2}{1} = \\frac{8}{4}\\) son numéricamente iguales tenemos menor incertidumbre en un resultado cuando el número de experimentos es mayor.\nDada una cantidad suficiente de datos los resultados tienden a converger sin importar el a priori usado.\nLa rapidez con la que los resultados convergen varía. En este ejemplo las curvas azul y turquesa parecen converger con tan solo 8 experimentos, pero se necesitan más de 50 experimentos para que las tres curvas se muestren similares. Aún con 150 experimentos se observan ligeras diferencias.\nPartiendo de los a priori uniforme (azul) o sesgado (turquesa) y habiendo realizado un solo experimento y observado una sola cara, lo más razonable es pensar que estamos frente a una moneda con dos caras!\nLa situación cambia drásticamente al ver por primera vez una moneda caer ceca. Ahora lo más probable (dado cualquiera de los tres a prioris) es inferir que \\(\\theta=0.5\\). Los valores de \\(\\theta\\) exactamente 0 o 1 se vuelven imposibles.\nEl a priori naranja es más informativo que los otros dos (la distribución esta más concentrada), por ello se requiere de un número mas grande de experimentos para “moverlo”.\nEl a priori uniforme (azul) es lo que se conoce como no informativo. El resultado de un análisis Bayesiano usando un a priori no-informativos en general coinciden con los resultados de análisis frecuentistas (en este caso el valor esperado de \\(\\theta = \\frac{y}{N}\\)).\n\n\n2.3.1 Influencia y elección del a priori\nDe los ejemplos anteriores debería quedar claro que los a priori influencian los resultados de nuestros cálculos. Esto tiene total sentido si no fuese así no haría falta incluirlos en el análisis y todo sería más simple (aunque nos perderíamos la oportunidad de usar información previa). De los ejemplos anteriores también debería quedar claro que a medida que aumentan los datos (como las tiradas de monedas) los resultados son cada vez menos sensibles al a priori. De hecho, para una cantidad infinita de datos el a priori no tiene ningún efecto. Exactamente cuantos datos son necesarios para que el efecto del a priori sea despreciable varía según el problema y los modelos usados. En el ejemplo de la moneda se puede ver que 50 experimentos bastan para hacer que dos de los resultados sean prácticamente indistinguibles, pero hacen falta más de 150 experimentos para que los 3 resultados se vuelvan practicamente independientes del a priori. Esto es así por que los dos primeros a prioris son relativamente planos, mientras que el tercer a priori concentra casi toda la probabilidad en una región relativamente pequeña. El tercer a priori no solo considera que el valor más probable de \\(\\theta\\) es 0.5, si no que considera que la mayoría de los otros valores son muy poco probables. ¿Cómo cambiarían los resultados si hubiéramos usado como a priori \\(\\operatorname{Beta}(\\alpha=2, \\beta=2)\\)?\nLa elección de los a priori puede poner nervioso a quienes se inician en el análisis Bayesiano (o a los detractores de este paradigma). ¡El temor es que los a prioris censuren a los datos y no les permitan hablar por sí mismos! Eso está muy bien, pero el punto es que los datos no saben hablar, con suerte murmuran. Los datos solo tienen sentido a la luz de los modelos (matemáticos y mentales) usados para interpretarlos, y los a prioris son parte de esos modelos.\nHay quienes prefieren usar a priori no-informativos (también conocidos como a priori planos, vagos, o difusos). Estos a priori aportan la menor cantidad posible de información y por lo tanto tienen el menor impacto posible en el análisis. Si bien es posible usarlos, en general hay razones prácticas para no preferirlos. En este curso usaremos a priori ligeramente informativos siguendo las recomendaciones de Gelman, McElreath, Kruschke, y otros. En muchos problemas sabemos al menos algo de los valores posibles que pueden tomar nuestros parámetros, por ejemplo que solo pueden ser positivos, o que están restringidos a sumar 1 o el rango aproximado, etc. En esos casos podemos usar a prioris que introduzcan esta ligera información. En estos casos podemos pensar que la función del a priori es la de mantener las inferencias dentro de límites razonables. Estos a priori se suelen llamar regularizadores.\nPor supuesto que también es posible usar a prioris informativos (o fuertes). Hacer esto es razonable solo si contamos con información previa confiable. Esto puede ser ventajoso en casos en que los datos contengan poca información sobre el problema. Si la información no viene por el likelihood (datos), entonces puede venir por el a priori. A modo de ejemplo, en bioinformática estructural es común usar toda la información previa posible (de forma Bayesiana y no-Bayesiana) para resolver problemas. Esto es posible por la existencia de bases de datos que almacenan los resultados de cientos o miles experimentos realizados a lo largo de décadas de esfuerzo (¡No usar esta información sería casi absurdo!). En resumen, si contás con información confiable no hay razón para descartarla, menos si el argumento es algo relacionado con pretender ser objetivo (¡No hay objetividad en negar lo que se sabe!).\nHasta ahora hemos visto que es posible clasificar, aunque sea de forma vaga o aproximada, a los a priori en función de la información que contienen. Pero saber esta clasificación no necesariamente hace las cosas más simples a la hora de elegir un a priori. ¿Acaso no sería mejor eliminar los a prioris de nuestro análisis? Eso haría el asunto mucho mas simple. Bueno, el punto es que desde una perspectiva Bayesiana todos los modelos tienen a prioris, aun cuando no sean explícitos. De hecho muchos resultados de la estadística frecuentista pueden considerarse casos especiales de modelos Bayesianos usando a prioris planos. Volviendo a la figura anterior se puede ver que la moda del a posteriori para la curva azul. Coincide con la estimación (puntual) frecuentista para el valor de \\(\\theta\\)\n\\[\n\\hat \\theta = {{y} \\over {N}}\n\\]\nNotar que \\(\\hat \\theta\\) es una estimación puntual (un número) y no una distribución.\nEste ejemplo nos muestra que no es posible hacer análisis estadísticos y sacarse los a prioris de encima. Un posible corolario es que es más flexible y transparente especificar los a prioris de forma explícita que esconderlos bajo la cama. Al hacerlo ganamos mayor control sobre nuestro modelo, mayor transparencia y por el mismo precio la estimación de la incertidumbre con la que se estima cada parámetro.\nPor último, hay que recordar que el modelado estadístico (como otras formas de modelado) es un proceso iterativo e interactivo. Nada nos impide usar más de un a priori (o un likelihood) si así lo quisiéramos. Una parte importante del modelado es la de cuestionar los supuestos y los a prioris son simplemente un tipo de supuestos (como lo son los likelihoods). Si tuvieramos más de un a priori razonable podríamos realizar un análisis de sensibilidad, es decir evaluar como cambian los resultados con los a prioris, podríamos llegar a la conclusión que para un rango amplio de a prioris ¡los resultados no varían! Más adelante veremos varias herramientas para comparar distintos modelos.\nDado que los a prioris tienen un papel central en la estadística Bayesiana, seguiremos discutiéndolos a medida que vayamos viendo problemas concretos. Por lo que si esta discusión no ha aclarado todas tus dudas y seguís algo confundido, mejor mantener la calma y no preocuparse demasiado, este tema ha sido motivo de discusión y confusión durante décadas ¡y la discusión todavía continua!\n\n\n2.3.2 Cuantificando el peso del a priori\nEn general la distribución más familiar para la mayoría de las personas es la distribución Gaussiana, como esta distribución está definida por dos parámetros, la media y la dispersión de ese valor medio, suele resultarnos natural pensar las distribuciones en esos términos. Si queremos expresar la distribución beta en función de la media y la dispersión podemos hacerlo de la siguiente forma:\n\\[\\begin{align}\n\\alpha &= \\mu \\kappa \\\\\n\\beta &= (1 - \\mu) \\kappa\n\\end{align}\\]\ndonde \\(\\mu\\) es la media y \\(\\kappa\\) es un parámetro llamado concentración. Por ejemplo si \\(\\mu=0.5\\) y \\(\\kappa=40\\), tenemos que:\n\\[\\begin{align}\n\\alpha = 0.5 \\times 40 &= 20 \\\\\n\\beta = (1-0.5) \\times 40 &= 20\n\\end{align}\\]\n\\(\\kappa\\) se puede interpretar como la cantidad de experimentos si/no que realizamos dándonos como resultado la media \\(\\mu\\). Es decir el a priori no sesgado (naranja) equivale a haber arrojado una moneda 40 veces y haber obtenido como media 0.5. Es decir que si usamos ese a priori recién al observar 40 experimentos si/no, los datos tendrán el mismo peso relativo que el a priori, por debajo de este número el a priori contribuye más que los datos al resultado final y por encima menos. El a priori azul (uniforme) equivale a haber observado a la moneda caer una vez cara y otra vez ceca (\\(\\kappa = 2\\)). Cuando \\(\\kappa &lt; 2\\), la cosa se pone un poco extraña, por ejemplo el a priori sesgado (turquesa) equivale a haber observado una sola moneda (\\(\\kappa = 1\\)) pero en una especie de (a falta de mejor analogía) ¡superposición cuántica de estados!\n\n\n2.3.3 Resumiendo el a posteriori\nEl resultado de un análisis Bayesiano es siempre una distribución de probabilidad.\nA la hora de comunicar los resultados de un análisis Bayesiano, lo más informativo es reportar la distribución completa, aunque esto no siempre es posible o deseable, por ejemplo el a posteriori de una distribución multidimensional es imposible de dibujar en papel. En general, se suele recurrir a distintas medidas que resumen el a priori, por ejemplo reportando la media de la distribución a posteriori. Algo un poco más informativo es reportar además un intervalo de credibilidad. Existen varios criterios para definir intervalos de credibilidad, el que usaremos en este curso (y que también es ampliamente usado en la literatura) es lo que se conoce como intervalo de más alta densidad y nos referiremos a él por su sigla en ingles, HDI (Highest Posterior Density interval). Un HDI es el intervalo, más corto, que contiene una porción fija de la densidad de probabilidad, generalmente el 95% (aunque otros valores como 90% o 50% son comunes). Cualquier punto dentro de este intervalo tiene mayor densidad que cualquier punto fuera del intervalo. Para una distribución unimodal, el HDI 95 es simplemente el intervalo entre los percentiles 2,5 y 97,5.\nArviZ es un paquete de Python para análisis exploratorio de modelos Bayesianos. ArviZ provee de funciones que facilitan el resumir el a posteriori. Por ejemplo plot_posterior puede ser usado para generar un gráfico con la media y HDI. En el siguiente ejemplo en vez de un a posteriori de un ejemplo real estamos usando datos generados al azar según una distribución beta.\n\nmock_posterior = pz.Beta(5, 11).rvs(size=1000)\naz.plot_posterior(mock_posterior, figsize=(8, 4));\n\n\n\n\n\n\n\n\nAhora que estamos aprendiendo que es un HDI por primera vez y antes de que automaticemos el concepto conviene aclarar un par de puntos.\n\nLa elección automática de 95% (o cualquier otro valor) es totalmente arbitraria. En principio no hay ninguna razón para pensar que describir el a posteriori con un HDI 95 sea mejor que describirlo con un HDI 98 o que no podamos usar valores como 87% o 66%. El valor de 95% es tan solo un accidente histórico. Como un sutil recordatorio de esto ArviZ usa por defecto el intervalo de 94%.\nUn intervalo de credibilidad (que es Bayesiano) no es lo mismo que un intervalo de confianza (que es frecuentista). Un intervalo de confianza es un intervalo que se define según un nivel de confianza, en general del 95%. Un intervalo de confianza se construye de tal forma que si repitiéramos infinitas veces un experimento obtendríamos que la proporción de intervalos que contienen el valor verdadero del parámetro que nos interesa coincide con el nivel de confianza estipulado. Contra-intuitivamente esto no es lo mismo que decir que un intervalo en particular tiene una probabilidad \\(x\\) de contener el parámetro (esto sería la definición de un intervalo de credibilidad, que es Bayesiano). De hecho, un intervalo de confianza en particular contiene o no contiene al valor, la teoría frecuentista no nos deja hablar de probabilidades de los parámetros, ya que estos tienen valores fijos. Si no queda clara la diferencia no te hagas problema, la diferencia entre estos dos conceptos suele ser tan difícil de entender que en la práctica estudiantes y científicos por igual interpretan los intervalos de confianza (frecuentistas) como intervalos de credibilidad (Bayesianos).\n\n\nSi bien desde la perspectiva Bayesiana podemos afirmar que un intervalo de credibilidad nos permite asegurar que la probabilidad de un parámetro está acotado en cierto rango. Siempre hay que tener presente que dicha afirmación es correcta SOLO en sentido teórico. Es decir, solo si todos los supuestos contenidos en el modelo son ciertos. Una inferencia es siempre dependiente de los datos y modelos usados.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#distribución-predictivas",
    "href": "01_Inferencia_Bayesiana.html#distribución-predictivas",
    "title": "2  Inferencia Bayesiana",
    "section": "2.4 Distribución predictivas",
    "text": "2.4 Distribución predictivas\nSi bien el objeto central de la estadística Bayesiana es la distribución a posteriori. Existen otras distribuciones muy importantes. Una de ellas es la distribución predictiva a posteriori, otra es la distribución predictiva a priori.\n\n2.4.1 Distribución predictivas a posteriori\nEsta distribución representa las predicciones \\(\\tilde{y}\\) de un modelo una vez obtenido el a posteriori. Se calcula de la siguiente manera:\n\\[\np(\\tilde{y}  \\mid  y) = \\int p(\\tilde{y} \\mid \\theta) p(\\theta \\mid y) d\\theta\n\\]\nEs decir integramos \\(\\theta\\) de acuerdo a la distribución a posteriori.\nComputacionalmente podemos generar muestras de esta distribución según el siguiente procedimiento:\n\nElegimos un valor de \\(\\theta\\) de acuerdo a la distribución a posteriori \\(p(\\theta \\mid y)\\)\nFijamos \\(\\theta\\) en la distribución que usamos como likelihood \\(p(\\tilde{y} \\mid \\theta)\\) y generamos una muestra aleatoria\nRepetimos desde 1, tantas veces como muestras necesitemos\n\nLos datos generados son predictivos ya que son los datos que se esperaría ver por ejemplo en un futuro experimento, es decir son variables no observadas pero potencialmente observables. Como veremos en el siguiente capítulo un uso muy común para la distribución predictiva a posteriori es compararla con los datos observados y así evaluar si el posterior calculado es razonable.\n\n\n2.4.2 Distribución predictiva a priori\nAsi como es posible generar datos sintéticos desde el a posteriori. Es posible hacerlo desde el prior. En este caso la distribución se llama distribución predictiva a priori. Y representa los datos \\(p(Y^\\ast)\\) que el modelo espera ver antes de haber visto los datos. O más formalmente antes de haber sido condicionado a los datos. Se calcula como:\n\\[\np(Y^\\ast) =  \\int_{\\Theta} p(Y^\\ast \\mid \\theta) \\; p(\\theta) \\; d\\theta\n\\]\nEs importante notar que la definición es muy similar a la distribución predictiva a posteriori, solo que ahora integramos a lo largo del prior en vez del posterior.\nLos datos generados son predictivos ya que son los datos que el modelo esperara ver, es decir son datos no observados pero potencialmente observables. Como veremos en el siguiente capítulo un uso muy común para la distribución predictiva a priori es compararla con nuestro conocimiento previo y así evaluar si el modelo es capaz de generar resultados razonable, incluso antes de haber incorporado los datos.\n\n\n2.4.3 Distribución predictiva a priori y a posterior para el problema de la moneda.\nEn el caso del modelo beta-binomial es posible obtener analíticamente tanto la distribución predictiva a priori como a posteriori y estas son:\n\\[\np(Y^\\ast) \\propto \\operatorname{Beta-binomial}(n=N, \\alpha_{a priori}, \\beta_{a priori})\n\\]\n\\[\np(\\tilde{Y}  \\mid  Y)  \\propto \\operatorname{Beta-binomial}(n=N, \\alpha_{a priori} + y, \\beta_{a priori} + N - y)\n\\]\nOmitiremos la discusión de como se obtienen estas distribuciones\n\n\n2.4.4 Cuarteto Bayesiano\nEl siguiente bloque de código computa las distribuciones a priori, a posteriori, predictiva a priori y predictiva a posteriori. En vez de usar la distribución \\(\\operatorname{Beta-binomial}\\) para las distribuciones predictivas hemos optado por usar una aproximación más computacional y muestrear primero de la distribuciones beta y luego de la binomial. Esperamos que esta decisión contribuya a comprender mejor que representan estas distribuciones.\nEs importante notar que mientras la distribuciones a priori y a posteriori son distribución sobre los parámetros en un modelo, la distribución predictivas a priori y a posteriori son distribuciones sobre los datos (predichos).\n\nfig, axes = plt.subplots(2, 2, figsize=(10, 8), sharex=\"row\", sharey=\"row\")\naxes = np.ravel(axes)\ndist = pz.Beta\na_prior = 1\nb_prior = 1\nN = 12\ny = 3\nx = np.linspace(0, 1, 100)\n\n\nprior = dist(a_prior, b_prior).pdf(x)\naxes[0].fill_between(x, 0, prior)\naxes[0].set_title(\"Prior\")\naxes[0].set_yticks([])\n\n\nposterior = dist(a_prior + y, b_prior + N - y).pdf(x)\naxes[1].fill_between(x, 0, posterior)\naxes[1].set_title(\"Posterior\")\n\n\nprior = dist(a_prior, b_prior).rvs(500)\nprior_predictive = np.hstack([pz.Binomial(n=N, p=p).rvs(N) for p in prior])\naxes[2].hist(prior_predictive, bins=range(0, N+2), rwidth=0.9, align=\"left\", density=True)\naxes[2].set_title(\"Prior predictive\")\n\nposterior = dist(a_prior + y, b_prior + N - y).rvs(500)\nprior_predictive = np.hstack([pz.Binomial(n=N, p=p).rvs(N) for p in posterior])\naxes[3].hist(prior_predictive, bins=range(0, N+2), rwidth=0.9, align=\"left\", density=True)\naxes[3].set_title(\"Posterior predictive\");\n\nfig.suptitle(\"Cuarteto Bayesiano\", fontweight=\"bold\", fontsize=16);",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#resumen",
    "href": "01_Inferencia_Bayesiana.html#resumen",
    "title": "2  Inferencia Bayesiana",
    "section": "2.5 Resumen",
    "text": "2.5 Resumen\nEmpezamos este capítulo con una breve discusión sobre el modelado estadístico y la teoría de la probabilidad y teorema de Bayes que se deriva de ella. Luego utilizamos el problema de la moneda como una excusa para introducir aspectos básicos del modelado Bayesiano y el análisis de datos. Utilizamos este ejemplo clásico para transmitir algunas de las ideas más importantes de las estadística Bayesiana, fundamentalmente el uso de distribuciones de probabilidad para construir modelos y representar la incertidumbre. Tratamos de desmitificar el uso de los a prioris dándoles el mismo estatus epistemológico-metodológico que otros elementos que forman parte del proceso de modelado e inferencia, como el likelihood o incluso meta-preguntas, ¿Por qué me interesa este problema en particular? Concluimos el capítulo con una breve y simple descripción de cómo interpretar y comunicar los resultados de un análisis bayesiano.\nLa siguiente figura, inspirada en una figura de Sumio Watanabe resume el flujo de trabajo Bayesiano tal cual se describió en este capítulo.\n\n\n\n\nSuponemos que existe una distribución verdadera que, en general, es desconocida (ya sea en la práctica o intrínsecamente). De esta distribución se obtiene una muestra finita, ya sea haciendo un experimento, una encuesta, una observación, una simulación, etc.\nA partir de la muestra realizamos una inferencia Bayesiana obteniendo una distribución a posteriori. Esta distribución es el objeto central de la estadística Bayesiana ya que contiene toda la información sobre un problema (de acuerdo al modelo y los datos).\nUna cantidad que podemos derivar del a posteriori es la distribución predictiva a posteriori, es decir predicciones. Una forma de evaluar un modelo es comparar la distribución predictiva a posteriori con la muestra finita que obtuvimos en primer lugar.\n\nLa figura anterior es muy general y omite varios pasos, pero contiene la idea esencial que el modelado es un proceso iterativo. En los siguientes capítulo, veremos como sumar nuevos pasos, como que hacer cuando tenemos más de un modelo y profundizar sobre estos pasos y lo aprendido en este capítulo",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "01_Inferencia_Bayesiana.html#ejercicios",
    "href": "01_Inferencia_Bayesiana.html#ejercicios",
    "title": "2  Inferencia Bayesiana",
    "section": "2.6 Ejercicios",
    "text": "2.6 Ejercicios\n\nEl estadístico Bruno de Finetti declaró que “Las probabilidades no existen”, queriendo indicar que las probabilidades son solo una herramienta para cuantificar la incerteza y que no tienen existencia objetiva en sí mismas. Edwin Jaynes, físico, declaró que la teoría de probabilidad es la lógica de la ciencia. Discutí estos enunciados a la luz de lo expuesto en este y el anterior capítulo.\nUsá pz.Beta().plot_interactive() para explorar distintas combinaciones de parámetros de la distribución beta. Qué es lo que hacen los parámetros \\(\\alpha\\) y \\(\\beta\\)?\nRepetí el punto anterior pero para otra distribución\nPreliZ tiene una función llamada maxent. Explicá que hace y generá un par de ejemplos\nUsá la siguiente función para explorar diversas combinaciones de priors y likelihoods. Enunciá las conclusiones que consideres más relevantes.\n\n\ndef a_posteriori_grilla(grilla=10, a=1, b=1, caras=6, tiradas=9):\n    grid = np.linspace(0, 1, grilla)\n    prior = pz.Beta(a, b).pdf(grid)\n    likelihood = pz.Binomial(n=tiradas, p=grid).pdf(caras)\n    posterior = likelihood * prior\n    posterior /= posterior.sum()\n    _, ax = plt.subplots(1, 3, sharex=True, figsize=(16, 4))\n    ax[0].set_title('caras = {}\\ntiradas = {}'.format(caras, tiradas))\n    for i, (e, e_n) in enumerate(zip([prior, likelihood, posterior], ['a priori', 'likelihood', 'a posteriori'])):\n        ax[i].set_yticks([])\n        ax[i].plot(grid, e, 'o-', label=e_n)\n        ax[i].legend(fontsize=14)\n\n\ninteract(a_posteriori_grilla, grilla=ipyw.IntSlider(min=2, max=100, step=1, value=15), a=ipyw.FloatSlider(min=1, max=7, step=1, value=1), b=ipyw.FloatSlider(\n    min=1, max=7, step=1, value=1), caras=ipyw.IntSlider(min=0, max=20, step=1, value=6), tiradas=ipyw.IntSlider(min=0, max=20, step=1, value=9));",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Inferencia Bayesiana</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html",
    "href": "02_Programación_probabilística.html",
    "title": "3  Programación probabilista",
    "section": "",
    "text": "3.1 Introducción a PyMC\nLos objetivos de este capítulo son:\nLa estadística Bayesiana es conceptualmente muy simple, tenemos lo conocido y lo desconocido. El teorema de Bayes se utiliza para condicionar lo desconocido usando lo conocido, si tenemos suerte este proceso conducirá a una reducción de la incertidumbre sobre lo desconocido. Por lo general nos referimos a lo conocido como datos y los consideramos fijo mientras que lo desconocido toma la forma de parámetros de distribuciones de probabilidad. La simpleza conceptual para formular modelos Bayesianos contrasta con la dificultad matemático/computacional para resolverlos. Por muchos años esto fue un verdadero problema y retrasó la adopción de métodos Bayesianos.\nA fin de poder resolver los modelos Bayesianos se recurre a métodos numéricos que pueden ser considerados como motores universales de inferencia. El hecho que tales motores sean posibles ha motivado el surgimiento de la programación probabilística, este tipo de lenguajes permiten una separación clara entre la creación de los modelos y el proceso de inferencia.\nUn lenguaje de programación probabilístico es, en lineas generales, un lenguaje que le permite al usuario describir, en una pocas lineas de código (las necesarias para describir el modelo), un modelo probabilístico completo. Luego se procede a utilizar este modelo para realizar la inferencia de forma automática. Se espera que la programación probabilística tenga un gran impacto en estadística, machine learning y otras disciplinas al permitir que científicos construyan modelos complejos en menor tiempo y de forma menos propensa a errores.\nUna buena analogía sobre el impacto que un lenguaje de programación puede tener en la ciencia es la introducción del lenguaje de programación Fortran hace más de 6 décadas. Fortran permitió a los científicos, por primera vez, abstraerse de muchos de los detalles computacionales y centrarse en la construcción de métodos numéricos, modelos y simulaciones de una manera más natural. De manera similar, se espera que los lenguajes de programación probabilísticos escondan del usuario detalles sobre cómo las probabilidades son manipuladas y cómo se lleva a cabo la inferencia, dejando que los usuarios se centren en la especificación del modelo y en el análisis e interpretación de los resultados.\nPyMC es un paquete para programación probabilística bajo Python. PyMC es lo suficientemente madura para resolver muchos problemas estadísticos. PyMC permite crear modelos probabilísticos usando una sintaxis intuitiva y fácil de leer que es muy similar a la sintaxis usada para describir modelos probabilísticos.\nLa mayoría de las funciones de PyMC están escritas en Python. Mientras que las partes computacionalmente demandantes están escritas en NumPy y PyTensor. Pytensor es una biblioteca de Python que permite definir, optimizar y evaluar expresiones matemáticas que involucran matrices multidimensionales de manera eficiente. PyTensor es hija de Theano una librería de Python originalmente desarrollada para deep learning (que es a su vez la antecesora de TensorFlow, PyTorch, etc).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#introducción-a-pymc",
    "href": "02_Programación_probabilística.html#introducción-a-pymc",
    "title": "3  Programación probabilista",
    "section": "",
    "text": "3.1.1 El problema de la moneda, ahora usando PyMC y ArviZ\nA continuación revistaremos el problema de la moneda visto en el capítulo anterior, usando esta vez PyMC para definir nuestro modelo y hacer inferencia. Luego usaremos ArviZ para analizar el a posterori.\nA continuación generaremos datos sintéticos, en este caso asumiremos que conocemos el valor the \\(\\theta\\) y lo llamaremos theta_real, y luego intentaremos averiguar este valor como si no lo conociéramos. En un problema real theta_real sería desconocido y realizaríamos un proceso de inferencia precisamente para averiguar su valor.\n\nnp.random.seed(123)\nn_experimentos = 4\ntheta_real = 0.35  # en una situación real este valor es desconocido\ndatos = pz.Binomial(n=1, p=theta_real).rvs(size=n_experimentos)\ndatos\n\narray([1, 0, 0, 0])\n\n\n\n\n3.1.2 Creación del modelo\nAhora que tenemos nuestros datos es necesario especificar el modelo. Para ello usaremos una distribución beta (con parámetros \\(\\alpha=\\beta=1\\)) como a priori y la distribución de Bernoulli como likelihood. Usando la notación usual en estadística tenemos:\n\\[\\begin{align}\n\\theta &\\sim \\operatorname{Beta}(\\alpha=1, \\beta=1)\\\\\nY &\\sim \\operatorname{Bin}(n=1, p=\\theta)\n\\end{align}\\]\n\nCada uno de los elementos del array datos es un experimento de Bernoulli, es decir un experimento donde solo es posible obtener dos valores (0 o 1) si en cambio tuviera el número total de “caras” obtenidas en varios experimentos de Bernoulli podríamos modelar el likelihood como una distribución Binomial.\n\nEsto modelo se traduce casi literalmente a PyMC, veamos:\n\nwith pm.Model() as nuestro_primer_modelo:\n    θ = pm.Beta(\"θ\", alpha=1, beta=1)  # a priori\n    y = pm.Bernoulli(\"y\", p=θ, observed=datos)  # likelihood\n    # y = pm.Binomial('y',n=n_experimentos, p=θ, observed=sum(datos))\n\nEn la primer linea hemos creado un nuevo objeto llamado nuestro_primer_modelo. Este objeto contiene información sobre el modelo y las variables que lo conforman. PyMC usa el bloque with para indicar que todas las lineas que están dentro de él hacen referencia al mismo modelo (que en este caso se llama nuestro_primer_modelo).\nLa segunda linea de código, especifica el a priori, como pueden ver la sintaxis sigue de cerca a la notación matemática, la única diferencia es que el primer argumento es siempre una cadena que especifica el nombre de la variable aleatoria (el nombre es usado internamente por PyMC), este nombre siempre deberá coincidir con el nombre de la variable de Python a la que se le asigna. De no ser así el código correrá igual, pero puede conducir a errores y confusiones al analizar el modelo.\n\nEs importante recalcar que las variables de PyMC, como \\(\\theta\\), no son números sino objetos que representan distribuciones. Es decir objetos a partir de los cuales es posible calcular probabilidades y generar números aleatorios.\n\nEn la tercer linea de código se especifica el likelihood, que como verán es similar a la linea anterior con la diferencia que hemos agregado un argumento llamado observed al cual le asignamos nuestros datos. Esta es la forma de indicarle a PyMC cuales son los datos. Los datos pueden ser números, listas de Python, arrays de NumPy o data_frames de Pandas.\n\n\n3.1.3 Inferencia\nNuestro modelo ya está completamente especificado, lo único que nos resta hacer es obtener el a posteriori. En el capítulo anterior vimos como hacerlo de forma analítica, ahora lo haremos con métodos numéricos.\nEn PyMC la inferencia se realiza escribiendo las siguientes lineas:\n\nwith nuestro_primer_modelo:\n    idata = pm.sample(1000)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [θ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:00&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.\n\n\nPrimero llamamos al objeto que definimos como nuestro modelo (nuestro_primer_modelo), indicando de esta forma que es sobre ese objeto que queremos realizar la inferencia. En la segunda linea le indicamos a PyMC que deseamos 1000 muestras. Esta linea luce inocente, pero internamente PyMC está haciendo muchas cosas por nosotros. Algunas de las cuales son detalladas en el mensaje que se imprime en pantalla.\nVeamos este mensaje:\n\nLa primer linea indica que PyMC ha asignado el método de muestreo NUTS, el cual es un muy buen método para variables continuas.\nLa segunda linea nos da información sobre cómo se inicializaron los valores de NUTS. Un detalle que por ahora no nos preocupa.\nLa tercer linea indica que PyMC correrá cuatro cadenas en paralelo, es decir generará cuatro muestras independientes del a posteriori. Esta cantidad puede ser diferente en sus computadoras ya que es determinada automáticamente en función de los procesadores disponibles (que en mi caso, 4). sample tiene un argumento chains que permite modificar este comportamiento.\nLa cuarta linea indica qué variable ha sido asignada a cual método de muestreo. En este caso la información es redundante, ya que tenemos una sola variable, pero esto no siempre es así. PyMC permite combinar métodos de muestreo, ya sea de forma automática basado en propiedades de las variables a muestrear o especificado por el usuario usando el argumento step.\nLa quinta linea es una barra de progreso con varias métricas sobre la velocidad del muestreo, que en este caso (y para referencia futura) es muy alta. También indica la cantidad de cadenas usadas y la cantidad de divergencias. Tener 0 divergencias es ideal, más adelante discutiremos la razón.\nPor último tenemos un detalle de la cantidad de muestras generadas, aunque pedimos 1000 obtuvimos 8000, la razón es que es son 1000 por cadena (4 cadenas en mi caso), es decir 4000. Todavía nos queda explicar 4000 muestras extras, estas se corresponden a 1000 por cadena y son muestras que PyMC utiliza para auto-tunear el método de muestreo. Estás muestras son luego descartadas automáticamente ya que no son muestras representativas del posterior. La cantidad de pasos que se usan para tunear el algoritmo de muestro se puede cambiar con el argumento tune de la función pm.sample(.).\n\n\n\n3.1.4 Resumiendo el a posteriori\nPor lo general, la primer tarea a realizar luego de haber realizado un muestreo es evaluar como lucen los resultados. La función plot_forestplot de ArviZ es muy útil para esta tarea.\n\naz.plot_forest(idata, combined=True, figsize=(6, 2));\n\n\n\n\n\n\n\n\nEl punto indica la media, la linea gruesa el rango intercuartil y las lineas finas el HDI 94%\n\nEs importante notar que la variable y es una variable observada, es decir conocida. Mientras que en gráfico anterior estamos dibujando solo \\(\\theta\\) que es la única variables desconocida, y por lo tanto muestreada.\n\nSi quisiéramos un resumen numérico de los resultados podemos usar:\n\naz.summary(idata, kind=\"stats\")\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\n\n\n\n\nθ\n0.332\n0.176\n0.035\n0.646\n\n\n\n\n\n\n\nComo resultado obtenemos un DataFrame con los valores de la media, la desviación estándar y el intervalo HDI 94% (hdi_3 hdi_97).\nOtra forma de resumir visualmente el a posteriori es usar la función plot_posterior que viene con ArviZ, ya hemos utilizado esta distribución en el capítulo anterior para un falso a posteriori. Vamos a usarlo ahora con un posterior real. Por defecto, esta función muestra un histograma para variables discretas y KDEs para variables continuas. También obtenemos la media de la distribución (podemos preguntar por la mediana o moda usando el argumento point_estimate) y el 94% HDI como una línea negra en la parte inferior de la gráfica. Se pueden establecer diferentes valores de intervalo para el HDI con el argumento hdi_prob. Este tipo de gráfica fue presentado por John K. Kruschke en su gran libro “Doing Bayesian Data Analysis”.\n\naz.plot_posterior(idata);",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#decisiones-basadas-en-el-posterior",
    "href": "02_Programación_probabilística.html#decisiones-basadas-en-el-posterior",
    "title": "3  Programación probabilista",
    "section": "3.2 Decisiones basadas en el posterior",
    "text": "3.2 Decisiones basadas en el posterior\nA veces describir el a posteriori no es suficiente, y es necesario tomar decisiones basadas en nuestras inferencias. Esto suele implicar reducir una estimación continua a una dicotómica: sí-no, enfermo-sano, contaminado-seguro, etc. Es posible, por ejemplo, que tengamos que decidir si la moneda está o no sesgada. Una moneda sesgada sería una que no caiga cara con probabilidad 0.5. Por lo tanto una forma de evaluar el sesgo es comparar el valor de referencia 0.5 contra el intervalo HPD. En la figura anterior, podemos ver que el HPD va de \\(\\approx 0.02\\) a \\(\\approx 0.71\\) y, por lo tanto, 0.5 está incluido en el HPD. Según el a posterioriri la moneda parece estar sesgada hacia las cecas, pero no podemos descartar por completo el valor de 0.5. Si esta conclusión nos deja sabor a poco entonces tendremos que recopilar más datos para así reducir la varianza del a posteriori o buscar información para definir un a priori más informativo.\n\n3.2.1 ROPE\nEstrictamente la probabilidad de observar el valor exacto de 0.5 es nula, además en la práctica no nos suele interesar tener precisión infinita si no que solemos tener una idea del rango de error que es tolerable o despreciable. Una posibilidad consiste en definir lo que se conoce como región de equivalencia práctica o ROPE (Region Of Practical Equivalence). Podríamos tener buenas razones para considerar que cualquier valor entre 0,45 y 0,55 es prácticamente equivalente a 0.5. No hay reglas generales para definir un ROPE ya que esta es una decisión contexto-dependiente. Para algunos problemas 0.05 podría ser mucho para otros poco, en algunos casos un rango simétrico es útil en otros es una mala idea.\nYa establecido la ROPE podemos usar las siguientes reglas para tomar una decisión:\n\nEl valor de un parámetro es considerado improbable (o rechazado) si la totalidad de la ROPE cae por fuera del HPD 94% del parámetro en cuestión.\nEl valor de un parámetro es aceptado si la ROPE contiene por completo al HPD 94% del parámetro en cuestión.\n\n\nUna ROPE es un intervalo arbitrario que se determina usando conocimiento previo y relevante sobre un tema. Cualquier valor dentro de este inervalo es considera equivalente.\n\nUsando la función plot_posterior de ArviZ, podemos graficar el posterior junto con el HPD y la ROPE.\n\naz.plot_posterior(idata, rope=[0.45, 0.55]);\n\n\n\n\n\n\n\n\nOtra herramienta que nos puede asistir en la toma de decisiones es comparar el a posteriori con un valor de referencia. La función plot_posterior también nos permite hacer esto:\n\naz.plot_posterior(idata, ref_val=0.5);\n\n\n\n\n\n\n\n\nEl valor de referencia está indicado con una linea turquesa, junto con la proporción del posterior por debajo y por arriba del valor de referencia.\nPara una discusión más detallada del uso de la ROPE pueden leer el capítulo 12 del gran libro “Doing Bayesian Data Analysis” de John Kruschke. Este capítulo también discute cómo realizar pruebas de hipótesis de forma Bayesiana y los problemas de realizar este tipo de análisis, ya sea de forma Bayesiana o no-Bayesiana.\n\n\n3.2.2 Funciones de perdida\nUna alternativa más formal al uso de las ROPEs son las Funciones de pérdida. Para poder tomar la mejor decisión posible es necesario tener la mejor descripción posible de un problema y luego una evaluación correcta de los costos y beneficios. Bajo el marco Bayesiano lo primero implica obtener una distribución a posteriori, lo segundo se puede conseguir mediante la aplicación de una función de perdida. Una función de perdida es una forma de medir cuan distinta es una estimación respecto del valor real (o de referencia) de un parámetro. Algunos ejemplos comunes son:\n\nLa perdida cuadrática \\((\\theta - \\hat \\theta)^2\\)\nLa perdida absoluta $|- | $\nLa perdida 0-1 \\(I(\\theta \\ne \\hat{\\theta})\\) siendo \\(I\\) la función indicatriz\n\nLa función de perdida (o su inversa) reciben diversos nombres según el campo de aplicación como funciones de costo, funciones objetivo, funciones de fitness (sic), funciones de utilidad, etc.\nEn la práctica generalmente desconocemos el valor correcto de \\(\\theta\\) y a duras penas tendremos un posterior adecuado, por lo tanto lo que se hace es tratar de encontrar el valor de \\(\\hat \\theta\\) que minimice el valor esperado de la función de perdida. Esto implica promediar la función de perdida sobre todo el posterior, promediamos sobre el posterior porque desconocemos el valor de \\(\\theta\\).\nEn el siguiente ejemplo tenemos dos funciones de pérdida. La función absoluta lossf_a y la cuadrática lossf_b. Evaluamos cada una de las funciones para distintos valores de \\(\\hat \\theta\\) sobre una grilla de 500 puntos y encontramos el mínimo.\n\n_, ax = plt.subplots(1)\ngrid = np.linspace(0, 1, 500)\nθ_pos = az.extract(idata, var_names=\"θ\")\nlossf_a = [np.mean(abs(i - θ_pos)) for i in grid]\nlossf_b = [np.mean((i - θ_pos) ** 2) for i in grid]\n\nfor i, (lossf, c) in enumerate(zip([lossf_a, lossf_b], [\"C0\", \"C1\"])):\n    mini = np.argmin(lossf)\n    ax.plot(grid, lossf, c)\n    ax.plot(\n        grid[mini],\n        lossf[mini],\n        \"o\",\n        color=c,\n        label=f\"función de perdida {['a','b'][i]}\",\n    )\n    pos = (np.max(lossf) - np.min(lossf)) * 0.05\n    ax.annotate(f\"{grid[mini]:.2f}\", (grid[mini], lossf[mini] + pos), color=c)\n    ax.set_yticks([])\n    ax.set_xlabel(r\"$\\hat \\theta$\")\n    ax.legend()\n\n\n\n\n\n\n\n\nLas curvas son similares entre sí e incluso los mínimos son similares, \\(\\hat{\\theta} \\approx 0.31\\) para lossf_a y \\(\\hat{\\theta} \\approx 0.33\\) para lossf_b\nLo que es interesante es que el primer valor se corresponde con la mediana del posterior y el segundo con su media.\n\nnp.median(θ_pos).item(), np.mean(θ_pos).item()\n\n(0.31254373513365896, 0.33241202565639266)\n\n\nSi bien esto no es una prueba formal, espero que haya sido un ejemplo lo suficientemente claro como para ilustrar el mensaje más importante de esta sección:\n\nDiferentes funciones de pérdida se relacionan con diferentes estimaciones puntuales\n\nPor lo tanto, si queremos ser formales al momento de computar una estimación puntual, debemos decidir qué función de costo utilizar. O a la inversa, si elegimos una estimación puntual implícitamente estamos eligiendo una función de pérdida.\nLa ventaja de elegir explícitamente una función de perdida es que podemos ajustarla a las necesidades de un problema particular, en vez de utilizar un criterio predefinido. En muchos casos el costo asociado a una toma de decisión es asimétrico, esto es común en salud pública como sucede con vacunas o con la interrupción voluntaria del embarazo; procedimientos simples, baratos y seguros que previenen una gran cantidad de inconvenientes con un bajo riesgo de complicaciones.\nDado que, en general, el a posteriori toma la forma de muestras finitas almacenadas en una computadora, es posible escribir código que refleje funciones de perdidas sin necesidad de estar acotado por la conveniencia matemática o la simplicidad. El siguiente es un ejemplo bastante pavo de esto.\n\nlossf = []\nfor i in grid:\n    f = np.cos(i) * (1 - i) + np.sin(i) * (i)\n    lossf.append(f)\n\nmini = np.argmin(lossf)\nplt.plot(grid, lossf)\nplt.plot(grid[mini], lossf[mini], \"o\")\npos = (np.max(lossf) - np.min(lossf)) * 0.05\nplt.annotate(f\"{grid[mini]:.2f}\", (grid[mini], lossf[mini] + pos))\nplt.yticks([])\nplt.xlabel(r\"$\\hat \\theta$\");\n\n\n\n\n\n\n\n\nAhora bien, en la práctica no es cierto que todo el mundo elija una estimación puntual porque realmente acuerda, o tiene presente, alguna función de perdida en particular, en general la elección es por conveniencia, o tradición. Se usa la mediana porque es más robusta que la media a valores extremos o se usa la media porque es un concepto familiar y simple de entender, o porque pensamos que tal o cual observable es realmente un promedio de algún fenómeno subyacente (como moléculas golpeándose entre sí o genes interactuando con el ambiente).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#modelos-multiparamétricos",
    "href": "02_Programación_probabilística.html#modelos-multiparamétricos",
    "title": "3  Programación probabilista",
    "section": "3.3 Modelos Multiparamétricos",
    "text": "3.3 Modelos Multiparamétricos\nPrácticamente todos los modelos de interés en estadística, son multiparamétricos, es decir modelos con más de un parámetro.\nSuele suceder que no todos los parámetros requeridos para construir un modelo son de interés, supongamos que quisiéramos estimar el valor medio de una distribución Gaussiana, a menos que sepamos el valor real de la desviación estándar, nuestro modelo deberá contener un parámetro para la media y uno para la desviación estándar. Los parámetros que no son de inmediato interés pero son necesarios para definir un modelo de forma completa se llaman nuisance parameters (o parámetro estorbo).\nEn estadística Bayesiana todos los parámetros tienen el mismo estatus, por lo que la diferencia entre nuisance o no nuisance no es fundamental bajo ningún concepto, sino que depende completamente de nuestras preguntas.\nEn principio podría parecer que incorporar parámetros que no nos interesan es un ejercicio de futilidad. Sin embargo, es todo lo contrario, al incorporar estos parámetros permitimos que la incertidumbre que tenemos sobre ellos se propague de forma adecuada a los resultados.\n\n3.3.1 Inferencias lumínicas\nA finales del siglo XIX Simon Newcomb realizó varios experimentos para determinar la velocidad de la luz. En uno de ellos Newcomb midió el tiempo que le tomaba a la luz recorrer 7442 metros.\nA continuación se muestra sus resultados, 66 mediciones.\n\ndatos = np.array([248.28, 248.26, 248.33, 248.24, 248.34, 247.56, 248.27, 248.16,\n                  248.4, 247.98, 248.29, 248.22, 248.24, 248.21, 248.25, 248.3,\n                  248.23, 248.29, 248.31, 248.19, 248.24, 248.2, 248.36, 248.32,\n                  248.36, 248.28, 248.25, 248.21, 248.28, 248.29, 248.37, 248.25,\n                  248.28, 248.26, 248.3, 248.32, 248.36, 248.26, 248.3, 248.22,\n                  248.36, 248.23, 248.27, 248.27, 248.28, 248.27, 248.31, 248.27,\n                  248.26, 248.33, 248.26, 248.32, 248.32, 248.24, 248.39, 248.28,\n                  248.24, 248.25, 248.32, 248.25, 248.29, 248.27, 248.28, 248.29,\n                  248.16, 248.23])\n\nSi graficamos estas medidas veremos que la distribución parece Gaussiana excepto por dos medidas inusualmente bajas.\n\nax = az.plot_kde(datos, rug=True)\nax.set_yticks([]);\n\n\n\n\n\n\n\n\nPor simplicidad vamos a suponer que los datos siguen una distribución Gaussiana, después de todo es lo que en general se esperaría, en general, al medir una misma cosa varias veces. Una distribución Gaussiana queda definida por dos parámetros, la media y la desviación estándar, como desconocemos estas dos cantidades necesitamos establecer dos a prioris uno para cada parámetro. Un modelo probabilístico razonable sería el siguiente.\n\\[\\begin{align}\n\\mu &\\sim U(l, h) \\\\\n\\sigma &\\sim \\mathcal{HN}(\\sigma_{\\sigma}) \\\\\ny &\\sim \\mathcal{N}(\\mu, \\sigma)\n\\end{align}\\]\nEs decir, \\(\\mu\\) proviene de una distribución uniforme entre los límites \\(l\\) y \\(h\\) y \\(\\sigma\\) proviene de una media-normal (half-normal) con desviación estándar \\(\\sigma_{\\sigma}\\), esta distribución es como una Gaussiana pero restringida al rango \\([0, \\infty]\\). Por último los datos \\(y\\), como dijimos anteriormente, proviene de una distribución normal, especificada por \\(\\mu\\) y \\(\\sigma\\).\nSi desconocemos por completo cuales podrían ser los valores de \\(\\mu\\) y de \\(\\sigma\\), podemos fijar valores para los a prioris que reflejen nuestra ignorancia.\nPara la distribución uniforme una opción podría ser un intervalo con límite inferior de 0 y superior de 1 segundo. El límite inferior de 0 tiene sentido ya que las velocidades no pueden ser negativas, el límite superior de un 1 segundo es un valor elevado en la escala de los datos. Otra posibilidad sería usar los datos como guía por ejemplo \\((l=datos.min() / 100, h=l+datos.min() * 100)\\). De esta forma garantizamos que el a priori contenga el rango de los datos pero que sea mucho más amplio, reflejando que no tenemos demasiado información para fijar un a priori de forma más precisa. Los Bayesianos puristas consideran usar los datos para estimar los a prioris ¡como alta traición! Ojo con las almas de cristal (¡en todo ámbito!).\nBajo ciertas condiciones los a prioris uniformes puede ser problemáticos, tanto desde el punto de vista estadístico como computacional, por lo que se recomienda evitarlos, en general se recomienda evitar a prioris con límites, como la distribución uniforme, a menos que tengamos información confiable sobre esos límites. Por ejemplo sabemos que las probabilidades están restringidas al intervalo [0, 1]. Pero no hay una buena razón para limitar la velocidad de la luz (bueno ¡no la había en los tiempos de Newcomb!).\nEn la siguiente celda podrán ver que he elegido un par de a prioris y hay otros comentados. Comparen cómo corre el modelo con los distintos a prioris, tanto en términos de los resultados como los tiempos y calidad del muestreo.\n\nwith pm.Model() as modelo_g:\n    # los a prioris\n    μ = pm.Uniform(\"μ\", 240, 250)\n    # μ = pm.Normal('μ', 240, 100) # otro a priori alternativo\n    σ = pm.HalfNormal(\"σ\", sigma=1)\n    # σ = pm.HalfNormal('σ', sigma=datos.std() * 100)\n    # el likelihood\n    y = pm.Normal(\"y\", mu=μ, sigma=σ, observed=datos)\n    idata_g = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:01&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 1 seconds.\n\n\nComo se puede ver el plot-posterior tiene ahora dos subpaneles, una por cada parámetro. Cada uno se corresponde a una variable marginal del a posteriori que en este caso es bi-dimensional.\n\naz.plot_posterior(idata_g);\n\n\n\n\n\n\n\n\nLa siguiente figura muestra la distribución a posteriori (que como ya mencionamos en bidimensional), junto con las distribuciones marginales para los parámetros \\(\\mu\\) y \\(\\sigma\\).\n\naz.plot_pair(idata_g, kind=\"kde\", marginals=True);\n\n\n\n\n\n\n\n\nUna vez computado el a posteriori podemos realizar diversos cálculos a partir de él. Uno de esos cálculos consiste en simular datos (\\(\\tilde{y}\\)). Matemáticamente lo que queremos calcular es:\n\\[\\begin{equation}\np(\\tilde{y} \\,|\\, y) = \\int p(\\tilde{y} \\,|\\, \\theta) \\, p(\\theta \\,|\\, y) \\, d\\theta\n\\end{equation}\\]\ndonde:\n\\(y\\) son los datos observados mientras que \\(\\theta\\) corresponde a los parámetros del modelo.\nSiguiendo el ejemplo de la velocidad de la luz, \\(\\theta\\) corresponde a \\(\\mu\\) y a \\(\\sigma\\). Computacionalmente podemos obtener \\(\\tilde{y}\\) de la siguiente forma:\n\nElegimos una muestra al azar de las generadas por PyMC (un valor para \\(\\mu_i\\) y \\(\\sigma_i\\))\nGeneramos un dato sintético usando el mismo likelihood que usamos en el modelo, en este caso \\(\\tilde{y_i}  \\sim N(\\mu_i, \\sigma_i)\\)\nRepetimos 1 y 2 hasta obtener la cantidad requerida de muestras.\n\nEn PyMC este proceso está automatizado en la función sample_ppc.\n\nppc_g = pm.sample_posterior_predictive(idata_g, model=modelo_g)\n\nSampling: [y]\n\n\n\n\n\n\n\n    \n      \n      100.00% [4000/4000 00:00&lt;00:00]\n    \n    \n\n\nLos datos simulados los podemos comparar con los datos observados y de esta forma evaluar el ajuste del modelo. Esto se conoce como prueba predictiva a posteriori, como ya adelantamos algo en el capítulo anterior. En la siguiente gráfica la linea negra corresponde a los datos observados mientras que las lineas azules (semitransparentes) corresponden a datos predichos por el modelo. La linea turquesa (punteada) corresponde a la media de los datos predichos.\n\naz.plot_ppc(ppc_g, num_pp_samples=200);\n\n\n\n\n\n\n\n\nSegún la gráfica anterior ¿Cuán bueno considerás que es nuestro modelo?\n\n\n3.3.2 Modelos robustos\nUn problema con el modelo anterior es que asume una distribución normal pero tenemos dos puntos que caen muy alejados de los valores medios. Esos puntos podrían estar alejados debido a errores experimentales en la toma de esos dos datos o podría haber un error al registrarlos o al transcribirlos. Si algo de esto sucedió podríamos justificar su eliminación de nuestro conjunto de datos (dejando registro de la eliminación y de las razones por las cuales lo hicimos). Otra opción es usar el rango inter-cuartil (u otro método estadístico) para declarar esos dos puntos como datos aberrantes ¡y desterrarlos de nuestros datos! Otra opción es dejarlos pero utilizar un modelo más robusto a valores alejados de la media.\nUno de los inconvenientes al asumir normalidad, es que la media es muy sensible a valores aberrantes. La razón está en la colas de la Gaussiana, aún cuando las colas se extienden de \\(-\\infty\\) a \\(\\infty\\), la probabilidad de encontrar un valor cae rápidamente a medida que nos alejamos de la media, como se puede apreciar en la siguiente tabla que indica el porcentaje de valores que se encuentra a medida que nos alejamos de la media en unidades de desviación estándar (sd).\n\n\n\nsd\n1\n2\n3\n4\n5\n\n\n\n\n%\n68\n95\n99.7\n99.994\n99.99994\n\n\n\nUna alternativa a la distribución Gaussiana es usar una distribución t de Student, lo interesante de esta distribución es que además de estar definida por una media y una escala (análogo de la desviación estándar) está definida por un parámetro \\(\\nu\\), usualmente llamado grados de libertad, o grados de normalidad, ya que \\(\\nu\\) controla cuan pesadas son las colas de la distribución. Cuando \\(\\nu = 1\\) (la distribución se llama de Cauchy o de Lorentz) las colas son muy pesadas, el 95% de los puntos está entre -12,7 y 12,7, en cambio en una Gaussiana (con desviación estándar 1) esto ocurre entre -1,96 y 1,96. En el límite de \\(\\nu\\) tendiendo a infinito estamos en presencia de una Gaussiana. La distribución t es realmente particular, cuando \\(\\nu &lt;= 1\\) la distribución no tiene media definida y la varianza solo está definida para valores de \\(\\nu &gt; 2\\).\nLa siguiente figura muestra una distribución t de Student para distintos valores de \\(\\nu\\).\n\n_, ax = plt.subplots(figsize=(10, 5))\n\nx_values = np.linspace(-10, 10, 500)\nfor df in [1, 2, 5, 20, np.inf]:\n    ax = pz.StudentT(df, 0, 1).plot_pdf(support=(-7, 7))\n\n\nax.legend(loc=\"center left\", bbox_to_anchor=(0.65, 0.5));\n\n\n\n\n\n\n\n\nAhora que conocemos la distribución t de Student, podemos usarla en nuestro modelo:\n\\[\\begin{align}\n\\mu &\\sim U(l, h) \\\\\n\\sigma &\\sim \\mathcal{HN}(\\sigma_h) \\\\\n\\nu &\\sim Expon(\\lambda) \\\\\ny &\\sim StudentT(\\mu, \\sigma, \\nu)\n\\end{align}\\]\nEn algunos modelos puede ser buena idea sumar 1 a la distribución exponencial a fin de asegurarse que \\(\\nu \\ge 1\\) . En principio \\(\\nu\\) puede tomar valores de [0, \\(\\infty]\\), pero en mi experiencia valores de \\(\\nu &lt; 1\\) pueden traer problemas durante el muestreo, ya que pueden aparecer valores demasiado alejados de la media (las colas son extremadamente gordas!). Esto puede ocurrir con modelos con datos marcadamente aberrantes, veremos un ejemplo de esto en el capítulo 4.\nGráficamente:\n\n\nwith pm.Model() as modelo_t:\n    # los a prioris\n    μ = pm.Uniform(\"μ\", 240, 250)\n    σ = pm.HalfNormal(\"σ\", sigma=100)\n    ν = pm.Exponential(\"ν\", 1 / 30)\n    # el likelihood\n    y = pm.StudentT(\"y\", mu=μ, sigma=σ, nu=ν, observed=datos)\n    idata_t = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, σ, ν]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:02&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\nComparemos las estimaciones entre ambos modelos\n\naz.summary(idata_g)\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nμ\n248.262\n0.014\n248.235\n248.286\n0.0\n0.0\n4325.0\n3343.0\n1.0\n\n\nσ\n0.109\n0.010\n0.092\n0.128\n0.0\n0.0\n3632.0\n2723.0\n1.0\n\n\n\n\n\n\n\n\naz.summary(idata_t)\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nμ\n248.274\n0.006\n248.262\n248.286\n0.000\n0.000\n3774.0\n2893.0\n1.0\n\n\nσ\n0.041\n0.007\n0.029\n0.054\n0.000\n0.000\n2315.0\n2464.0\n1.0\n\n\nν\n2.578\n0.885\n1.156\n4.200\n0.018\n0.012\n2514.0\n2517.0\n1.0\n\n\n\n\n\n\n\nEn este caso, vemos que la estimación de \\(\\mu\\) es muy similar entre los dos modelos, aunque la estimación de \\(\\sigma\\), pasó de ser de ~10 a ~4. Esto es consecuencia de que la distribución t asigna menos peso a los valores alejados de la media que la distribución Gaussiana.\nHagamos un prueba predictiva a posteriori para el nuevo modelo.\n\nppc_t = pm.sample_posterior_predictive(idata_t, model=modelo_t)\n\nSampling: [y]\n\n\n\n\n\n\n\n    \n      \n      100.00% [4000/4000 00:00&lt;00:00]\n    \n    \n\n\n\naz.plot_ppc(ppc_t, num_pp_samples=200)\nplt.xlim(247, 250);\n\n\n\n\n\n\n\n\n¿Qué conclusión se puede sacar de comparar esta prueba predictiva a posteriori con la anterior?\n\n\n3.3.3 Accidentes mineros\nEste ejemplo está tomado del tutorial de PyMC.\nEl problema es el siguiente, tenemos un registro del número de accidentes en minas de carbón, ubicadas en el Reino Unido, que ocurrieron entre 1851 y 1962 (Jarrett, 1979). Se sospecha que la aplicación de ciertas regulaciones de seguridad tuvo como efecto una disminución en la cantidad de catástrofes. Por lo tanto nos interesa averiguar el año en que la tasa cambió y nos interesa estimar ambas tasas.\nLos datos son los siguientes, por un lado tenemos la variable accidentes que contiene la cantidad de accidentes por año y por el otro la variable años conteniendo el rango de años para los cuales tenemos datos. Si prestan atención verán que accidentes es un arreglo enmascarado (o masked array). Esto es un tipo especial de arreglo de NumPy donde cada elemento del arreglo contiene asociado un valor True o False el cual indica si el elemento debe o no ser usado durante cualquier tipo de operación. En este caso como faltan datos para dos años lo que se ha hecho es marcar esa falta de datos con un valor centinela de -999, esta es la forma de indicarle a PyMC la presencia de datos faltantes, alternativamente se pueden pasar los datos como un dataframe de Pandas conteniendo el valor especial NAN (que es el valor por defecto en Pandas para lidiar con datos faltantes).\nBien, pero para que molestarse con datos faltantes si en general es más fácil eliminarlos. una de las razones es que esto puede conducir a pérdida de información cuando por cada observación tenemos más de una variable o cantidad de interés. Por ejemplo si tenemos 50 sujetos a los que les hemos medido la presión, la temperatura y el ritmo cardíaco, pero sucede que para 4 de ellos no contamos con el datos de la presión (porque alguien se olvidó de medirlo o registrarlo, o porque el tensiómetro se rompió, o por lo que sea). Podemos eliminar esos cuatro sujetos del análisis y perder por lo tanto información sobre la presión y ritmo cardíaco, o podemos usar todos los datos disponibles y además estimar los valores de temperatura faltantes. En el contexto de la estadística Bayesiana los datos faltantes se tratan como un parámetro desconocido del modelo que puede ser estimado.\n\naccidentes = pd.Series([4, 5, 4, 0, 1, 4, 3, 4, 0, 6, 3, 3, 4, 0, 2, 6,\n                       3, 3, 5, 4, 5, 3, 1, 4, 4, 1, 5, 5, 3, 4, 2, 5,\n                       2, 2, 3, 4, 2, 1, 3, np.nan, 2, 1, 1, 1, 1, 3, 0, 0,\n                       1, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 1,\n                       0, 1, 0, 1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2,\n                       3, 3, 1, np.nan, 2, 1, 1, 1, 1, 2, 4, 2, 0, 0, 1, 4,\n                       0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1])\naños = np.arange(1851, 1962)\n\n\nplt.plot(años, accidentes, \".\")\nplt.ylabel(\"Número de accidentes\")\nplt.xlabel(\"Año\");\n\n\n\n\n\n\n\n\nPara modelar los accidentes usaremos una distribución de Poisson. Como creemos que la cantidad media de accidentes es distinta antes y después de la introducción de regulaciones de seguridad usaremos dos valores de tasas medias de accidentes (\\(t_0\\) y \\(t_1\\)). Además deberemos estimar un punto de corte (\\(pc\\)) que dividirá los años para los cuales se aplica la tasa de accidentes \\(t_0\\) de los cuales se aplica la tasa \\(t_1\\):\n\\[\\begin{equation}\nA_t \\sim Poisson(tasa)\n\\end{equation}\\]\n\\[\\begin{equation}\ntasa = \\begin{cases}\nt_0, \\text{si } t \\ge pc,\\\\\nt_1, \\text{si } t \\lt pc\n\\end{cases}\n\\end{equation}\\]\nLos a prioris que usaremos serán:\n\\[\\begin{align}\nt_0 \\sim Expon(1) \\\\\nt_1 \\sim Expon(1) \\\\\npc \\sim U(A_0, A_1)\n\\end{align}\\]\nDonde la distribución uniforme es discreta y \\(A_0\\) y \\(A_1\\) corresponden al primer y último año considerado en el análisis respectivamente.\nGráficamente el modelo es:\n\nUna peculiaridad de la implementación de este modelo en PyMC es el uso de la función pm.switch (linea 10). Esta es en realidad una función de PyMC y equivale a un if else de Python. Si el primer argumento es True entonces devuelve el segundo argumento caso contrario el tercer argumento. Como resultado tenemos que tasa es un vector de longitud igual a la de años y cuyos elementos corresponden a una repetición \\(t_0\\) seguida de una repetición \\(t_1\\), la cantidad exacta de repeticiones de \\(t_0\\) y \\(t_1\\) está controlada por la condición \\(pc \\ge\\) años. De esta forma, podemos al muestrear \\(pc\\), modificar que años reciben cual tasa para el cálculo del likelihood.\n\nwith pm.Model() as modelo_cat:\n\n    pc = pm.DiscreteUniform(\"pc\", lower=años.min(), upper=años.max())\n\n    # Priors para las tasas antes y después del cambio.\n    t_0 = pm.Exponential(\"t_0\", 1)\n    t_1 = pm.Exponential(\"t_1\", 1)\n\n    # Asignamos las tasas a los años de acuerdo a pc\n    tasa = pm.Deterministic(\"tasa\", pm.math.switch(pc &gt;= años, t_0, t_1))\n\n    acc = pm.Poisson(\"acc\", tasa, observed=accidentes)\n    idata_cat = pm.sample(1000, random_seed=1791, idata_kwargs={\"log_likelihood\": True})\n\n/home/osvaldo/anaconda3/envs/bayes/lib/python3.10/site-packages/pymc/model.py:1384: RuntimeWarning: invalid value encountered in cast\n  data = convert_observed_data(data).astype(rv_var.dtype)\n/home/osvaldo/anaconda3/envs/bayes/lib/python3.10/site-packages/pymc/model.py:1407: ImputationWarning: Data in acc contains missing values and will be automatically imputed from the sampling distribution.\n  warnings.warn(impute_message, ImputationWarning)\nMultiprocess sampling (4 chains in 4 jobs)\nCompoundStep\n&gt;CompoundStep\n&gt;&gt;Metropolis: [pc]\n&gt;&gt;Metropolis: [acc_missing]\n&gt;NUTS: [t_0, t_1]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:02&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.\nThe rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\nThe effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n\n\n\nidata_cat\n\n\n            \n              \n                arviz.InferenceData\n              \n              \n              \n            \n                  \n                  posterior\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:            (chain: 4, draw: 1000, acc_missing_dim_0: 2,\n                        tasa_dim_0: 111, acc_dim_0: 111)\nCoordinates:\n  * chain              (chain) int64 0 1 2 3\n  * draw               (draw) int64 0 1 2 3 4 5 6 ... 994 995 996 997 998 999\n  * acc_missing_dim_0  (acc_missing_dim_0) int64 0 1\n  * tasa_dim_0         (tasa_dim_0) int64 0 1 2 3 4 5 ... 106 107 108 109 110\n  * acc_dim_0          (acc_dim_0) int64 0 1 2 3 4 5 ... 105 106 107 108 109 110\nData variables:\n    pc                 (chain, draw) int64 1889 1886 1886 ... 1889 1892 1892\n    acc_missing        (chain, draw, acc_missing_dim_0) int64 0 0 0 1 ... 1 3 1\n    t_0                (chain, draw) float64 3.273 3.31 2.694 ... 2.881 2.946\n    t_1                (chain, draw) float64 0.8727 0.8444 ... 1.008 0.8809\n    tasa               (chain, draw, tasa_dim_0) float64 3.273 3.273 ... 0.8809\n    acc                (chain, draw, acc_dim_0) int64 4 5 4 0 1 4 ... 0 0 1 0 1\nAttributes:\n    created_at:                 2023-04-20T21:18:39.548868\n    arviz_version:              0.15.1\n    inference_library:          pymc\n    inference_library_version:  5.3.0\n    sampling_time:              2.365055799484253\n    tuning_steps:               1000xarray.DatasetDimensions:chain: 4draw: 1000acc_missing_dim_0: 2tasa_dim_0: 111acc_dim_0: 111Coordinates: (5)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])acc_missing_dim_0(acc_missing_dim_0)int640 1array([0, 1])tasa_dim_0(tasa_dim_0)int640 1 2 3 4 5 ... 106 107 108 109 110array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,\n        14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,\n        28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,\n        42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,\n        56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,\n        70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,\n        84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,\n        98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110])acc_dim_0(acc_dim_0)int640 1 2 3 4 5 ... 106 107 108 109 110array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,\n        14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,\n        28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,\n        42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,\n        56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,\n        70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,\n        84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,\n        98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110])Data variables: (6)pc(chain, draw)int641889 1886 1886 ... 1889 1892 1892array([[1889, 1886, 1886, ..., 1888, 1887, 1888],\n       [1892, 1891, 1891, ..., 1890, 1888, 1890],\n       [1889, 1889, 1889, ..., 1890, 1890, 1890],\n       [1890, 1889, 1889, ..., 1889, 1892, 1892]])acc_missing(chain, draw, acc_missing_dim_0)int640 0 0 1 0 1 0 0 ... 2 0 2 0 2 1 3 1array([[[0, 0],\n        [0, 1],\n        [0, 1],\n        ...,\n        [3, 1],\n        [3, 1],\n        [3, 1]],\n\n       [[6, 1],\n        [6, 1],\n        [6, 3],\n        ...,\n        [2, 1],\n        [2, 1],\n        [2, 1]],\n\n       [[1, 1],\n        [1, 2],\n        [1, 0],\n        ...,\n        [4, 2],\n        [2, 2],\n        [2, 2]],\n\n       [[1, 0],\n        [1, 0],\n        [1, 0],\n        ...,\n        [2, 0],\n        [2, 1],\n        [3, 1]]])t_0(chain, draw)float643.273 3.31 2.694 ... 2.881 2.946array([[3.27300145, 3.31004382, 2.69385652, ..., 3.361489  , 3.40956827,\n        3.40956827],\n       [3.10592073, 3.36085222, 3.00534019, ..., 2.54307457, 2.51920588,\n        3.5372262 ],\n       [2.71227824, 2.71227824, 3.0856883 , ..., 2.86019813, 2.99960294,\n        2.89937231],\n       [2.86208697, 3.20730475, 2.95804455, ..., 3.36485285, 2.88077941,\n        2.94647035]])t_1(chain, draw)float640.8727 0.8444 ... 1.008 0.8809array([[0.87270139, 0.84441641, 1.0630722 , ..., 1.00885421, 1.00662329,\n        1.00662329],\n       [1.05576985, 0.91125974, 0.85414828, ..., 1.04231662, 1.05555764,\n        0.77176679],\n       [0.89805765, 0.89805765, 0.79840082, ..., 0.6720661 , 0.7872776 ,\n        0.72575752],\n       [0.75190232, 1.20079714, 0.77526223, ..., 0.73696447, 1.00761759,\n        0.88086743]])tasa(chain, draw, tasa_dim_0)float643.273 3.273 3.273 ... 0.8809 0.8809array([[[3.27300145, 3.27300145, 3.27300145, ..., 0.87270139,\n         0.87270139, 0.87270139],\n        [3.31004382, 3.31004382, 3.31004382, ..., 0.84441641,\n         0.84441641, 0.84441641],\n        [2.69385652, 2.69385652, 2.69385652, ..., 1.0630722 ,\n         1.0630722 , 1.0630722 ],\n        ...,\n        [3.361489  , 3.361489  , 3.361489  , ..., 1.00885421,\n         1.00885421, 1.00885421],\n        [3.40956827, 3.40956827, 3.40956827, ..., 1.00662329,\n         1.00662329, 1.00662329],\n        [3.40956827, 3.40956827, 3.40956827, ..., 1.00662329,\n         1.00662329, 1.00662329]],\n\n       [[3.10592073, 3.10592073, 3.10592073, ..., 1.05576985,\n         1.05576985, 1.05576985],\n        [3.36085222, 3.36085222, 3.36085222, ..., 0.91125974,\n         0.91125974, 0.91125974],\n        [3.00534019, 3.00534019, 3.00534019, ..., 0.85414828,\n         0.85414828, 0.85414828],\n...\n        [2.86019813, 2.86019813, 2.86019813, ..., 0.6720661 ,\n         0.6720661 , 0.6720661 ],\n        [2.99960294, 2.99960294, 2.99960294, ..., 0.7872776 ,\n         0.7872776 , 0.7872776 ],\n        [2.89937231, 2.89937231, 2.89937231, ..., 0.72575752,\n         0.72575752, 0.72575752]],\n\n       [[2.86208697, 2.86208697, 2.86208697, ..., 0.75190232,\n         0.75190232, 0.75190232],\n        [3.20730475, 3.20730475, 3.20730475, ..., 1.20079714,\n         1.20079714, 1.20079714],\n        [2.95804455, 2.95804455, 2.95804455, ..., 0.77526223,\n         0.77526223, 0.77526223],\n        ...,\n        [3.36485285, 3.36485285, 3.36485285, ..., 0.73696447,\n         0.73696447, 0.73696447],\n        [2.88077941, 2.88077941, 2.88077941, ..., 1.00761759,\n         1.00761759, 1.00761759],\n        [2.94647035, 2.94647035, 2.94647035, ..., 0.88086743,\n         0.88086743, 0.88086743]]])acc(chain, draw, acc_dim_0)int644 5 4 0 1 4 3 4 ... 0 0 1 0 0 1 0 1array([[[4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        ...,\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1]],\n\n       [[4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        ...,\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1]],\n\n       [[4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        ...,\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1]],\n\n       [[4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        ...,\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1],\n        [4, 5, 4, ..., 1, 0, 1]]])Indexes: (5)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))acc_missing_dim_0PandasIndexPandasIndex(Index([0, 1], dtype='int64', name='acc_missing_dim_0'))tasa_dim_0PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       101, 102, 103, 104, 105, 106, 107, 108, 109, 110],\n      dtype='int64', name='tasa_dim_0', length=111))acc_dim_0PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       101, 102, 103, 104, 105, 106, 107, 108, 109, 110],\n      dtype='int64', name='acc_dim_0', length=111))Attributes: (6)created_at :2023-04-20T21:18:39.548868arviz_version :0.15.1inference_library :pymcinference_library_version :5.3.0sampling_time :2.365055799484253tuning_steps :1000\n                      \n                  \n            \n            \n            \n                  \n                  log_likelihood\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:             (chain: 4, draw: 1000, acc_observed_dim_0: 109)\nCoordinates:\n  * chain               (chain) int64 0 1 2 3\n  * draw                (draw) int64 0 1 2 3 4 5 6 ... 994 995 996 997 998 999\n  * acc_observed_dim_0  (acc_observed_dim_0) int64 0 1 2 3 4 ... 105 106 107 108\nData variables:\n    acc_observed        (chain, draw, acc_observed_dim_0) float64 -1.708 ... ...\nAttributes:\n    created_at:                 2023-04-20T21:18:39.746180\n    arviz_version:              0.15.1\n    inference_library:          pymc\n    inference_library_version:  5.3.0xarray.DatasetDimensions:chain: 4draw: 1000acc_observed_dim_0: 109Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])acc_observed_dim_0(acc_observed_dim_0)int640 1 2 3 4 5 ... 104 105 106 107 108array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,\n        14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,\n        28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,\n        42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,\n        56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,\n        70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,\n        84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,\n        98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108])Data variables: (1)acc_observed(chain, draw, acc_observed_dim_0)float64-1.708 -2.132 ... -0.8809 -1.008array([[[-1.70822553, -2.131956  , -1.70822553, ..., -1.00886322,\n         -0.87270139, -1.00886322],\n        [-1.70025194, -2.11272842, -1.70025194, ..., -1.01352594,\n         -0.84441641, -1.01352594],\n        [-1.90801508, -2.52647918, -1.90801508, ..., -1.00190918,\n         -1.0630722 , -1.00190918],\n        ...,\n        [-1.69000671, -2.08706059, -1.69000671, ..., -1.00003897,\n         -1.00885421, -1.00003897],\n        [-1.6812794 , -2.06413163, -1.6812794 , ..., -1.00002184,\n         -1.00662329, -1.00002184],\n        [-1.6812794 , -2.06413163, -1.6812794 , ..., -1.00002184,\n         -1.00662329, -1.00002184]],\n\n       [[-1.75073375, -2.22686146, -1.75073375, ..., -1.00149963,\n         -1.05576985, -1.00149963],\n        [-1.69012774, -2.08737107, -1.69012774, ..., -1.00418705,\n         -0.91125974, -1.00418705],\n        [-1.78183094, -2.29087809, -1.78183094, ..., -1.01179875,\n         -0.85414828, -1.01179875],\n...\n        [-1.83468837, -2.39323538, -1.83468837, ..., -1.06946468,\n         -0.6720661 , -1.06946468],\n        [-1.78373707, -2.29469505, -1.78373707, ..., -1.02645196,\n         -0.7872776 , -1.02645196],\n        [-1.81944907, -2.36439271, -1.81944907, ..., -1.04629684,\n         -0.72575752, -1.04629684]],\n\n       [[-1.83393653, -2.39182337, -1.83393653, ..., -1.03705118,\n         -0.75190232, -1.03705118],\n        [-1.72363481, -2.16764178, -1.72363481, ..., -1.01781152,\n         -1.20079714, -1.01781152],\n        [-1.79798468, -2.32289417, -1.79798468, ..., -1.02981618,\n         -0.77526223, -1.02981618],\n        ...,\n        [-1.68936975, -2.08542343, -1.68936975, ..., -1.04218007,\n         -0.73696447, -1.04218007],\n        [-1.8265897 , -2.37796672, -1.8265897 , ..., -1.00002887,\n         -1.00761759, -1.00002887],\n        [-1.80209233, -2.33092228, -1.80209233, ..., -1.00771557,\n         -0.88086743, -1.00771557]]])Indexes: (3)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))acc_observed_dim_0PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n        99, 100, 101, 102, 103, 104, 105, 106, 107, 108],\n      dtype='int64', name='acc_observed_dim_0', length=109))Attributes: (4)created_at :2023-04-20T21:18:39.746180arviz_version :0.15.1inference_library :pymcinference_library_version :5.3.0\n                      \n                  \n            \n            \n            \n                  \n                  sample_stats\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:                (chain: 4, draw: 1000, scaling_dim_0: 2,\n                            accept_dim_0: 2, accepted_dim_0: 2)\nCoordinates:\n  * chain                  (chain) int64 0 1 2 3\n  * draw                   (draw) int64 0 1 2 3 4 5 ... 994 995 996 997 998 999\n  * scaling_dim_0          (scaling_dim_0) int64 0 1\n  * accept_dim_0           (accept_dim_0) int64 0 1\n  * accepted_dim_0         (accepted_dim_0) int64 0 1\nData variables: (12/20)\n    scaling                (chain, draw, scaling_dim_0) float64 2.358 ... 2.585\n    reached_max_treedepth  (chain, draw) bool False False False ... False False\n    max_energy_error       (chain, draw) float64 0.265 0.09046 ... 0.4624\n    perf_counter_start     (chain, draw) float64 2.601e+04 ... 2.602e+04\n    energy                 (chain, draw) float64 176.4 176.6 ... 178.5 178.2\n    index_in_trajectory    (chain, draw) int64 -3 1 -2 -1 -2 -1 ... 0 2 2 2 2 -3\n    ...                     ...\n    n_steps                (chain, draw) float64 3.0 1.0 3.0 1.0 ... 3.0 3.0 3.0\n    accept                 (chain, draw, accept_dim_0) float64 0.007396 ... 0...\n    accepted               (chain, draw, accepted_dim_0) float64 0.0 0.0 ... 0.5\n    energy_error           (chain, draw) float64 -0.06509 0.09046 ... -0.104\n    largest_eigval         (chain, draw) float64 nan nan nan nan ... nan nan nan\n    step_size              (chain, draw) float64 0.8418 0.8418 ... 1.204 1.204\nAttributes:\n    created_at:                 2023-04-20T21:18:39.558212\n    arviz_version:              0.15.1\n    inference_library:          pymc\n    inference_library_version:  5.3.0\n    sampling_time:              2.365055799484253\n    tuning_steps:               1000xarray.DatasetDimensions:chain: 4draw: 1000scaling_dim_0: 2accept_dim_0: 2accepted_dim_0: 2Coordinates: (5)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])scaling_dim_0(scaling_dim_0)int640 1array([0, 1])accept_dim_0(accept_dim_0)int640 1array([0, 1])accepted_dim_0(accepted_dim_0)int640 1array([0, 1])Data variables: (20)scaling(chain, draw, scaling_dim_0)float642.358 2.438 2.358 ... 2.144 2.585array([[[2.35794769, 2.43845855],\n        [2.35794769, 2.43845855],\n        [2.35794769, 2.43845855],\n        ...,\n        [2.35794769, 2.43845855],\n        [2.35794769, 2.43845855],\n        [2.35794769, 2.43845855]],\n\n       [[1.9487171 , 2.58486855],\n        [1.9487171 , 2.58486855],\n        [1.9487171 , 2.58486855],\n        ...,\n        [1.9487171 , 2.58486855],\n        [1.9487171 , 2.58486855],\n        [1.9487171 , 2.58486855]],\n\n       [[2.9282    , 2.30535855],\n        [2.9282    , 2.30535855],\n        [2.9282    , 2.30535855],\n        ...,\n        [2.9282    , 2.30535855],\n        [2.9282    , 2.30535855],\n        [2.9282    , 2.30535855]],\n\n       [[2.14358881, 2.58486855],\n        [2.14358881, 2.58486855],\n        [2.14358881, 2.58486855],\n        ...,\n        [2.14358881, 2.58486855],\n        [2.14358881, 2.58486855],\n        [2.14358881, 2.58486855]]])reached_max_treedepth(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])max_energy_error(chain, draw)float640.265 0.09046 ... -0.6745 0.4624array([[ 0.26504584,  0.09046142,  0.46798465, ...,  0.22325168,\n        -0.07519011,  1.3507017 ],\n       [-0.11731527,  0.6444133 ,  0.17705949, ..., -0.4767042 ,\n         0.07733244, -0.50792413],\n       [-0.46983184,  1.33427506,  0.41174189, ...,  1.70651699,\n        -0.76661906, -0.39112682],\n       [ 0.32258973,  0.35653055,  1.51618935, ...,  0.38004319,\n        -0.67445668,  0.46237617]])perf_counter_start(chain, draw)float642.601e+04 2.601e+04 ... 2.602e+04array([[26014.91047292, 26014.91148382, 26014.91232575, ...,\n        26015.87911283, 26015.87987525, 26015.88066041],\n       [26015.06253877, 26015.06348128, 26015.06439578, ...,\n        26016.17831508, 26016.17899803, 26016.17949004],\n       [26014.83830859, 26014.83938188, 26014.84018346, ...,\n        26015.825392  , 26015.826208  , 26015.82687544],\n       [26015.02727908, 26015.02858552, 26015.02973348, ...,\n        26016.12544131, 26016.12618101, 26016.12687694]])energy(chain, draw)float64176.4 176.6 178.5 ... 178.5 178.2array([[176.36555001, 176.6459368 , 178.51243729, ..., 179.84406587,\n        178.07559104, 181.37051764],\n       [178.78937655, 178.97206313, 179.92765349, ..., 178.60148204,\n        180.77395892, 179.25473734],\n       [177.06746079, 180.29252714, 177.8214689 , ..., 182.01800491,\n        179.75269857, 179.16297612],\n       [179.09410751, 178.91538598, 180.7228587 , ..., 178.93246036,\n        178.51951985, 178.20431289]])index_in_trajectory(chain, draw)int64-3 1 -2 -1 -2 -1 0 ... 0 2 2 2 2 -3array([[-3,  1, -2, ...,  2, -1,  0],\n       [-3, -2,  2, ..., -3, -1,  3],\n       [ 2,  0, -3, ..., -3,  1, -1],\n       [-3,  3, -3, ...,  2,  2, -3]])smallest_eigval(chain, draw)float64nan nan nan nan ... nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])lp(chain, draw)float64-175.4 -176.6 ... -176.9 -176.6array([[-175.41139297, -176.57599061, -177.89154262, ..., -179.02823666,\n        -177.99848681, -179.18144757],\n       [-178.65935626, -177.29025153, -179.37600142, ..., -178.44921053,\n        -180.18844401, -178.28848647],\n       [-176.46011085, -177.26077905, -175.90058188, ..., -180.86232685,\n        -177.73456282, -179.01067105],\n       [-177.68364881, -178.00208278, -176.31468939, ..., -178.20585816,\n        -176.94953554, -176.61512549]])step_size_bar(chain, draw)float641.007 1.007 1.007 ... 1.172 1.172array([[1.00729023, 1.00729023, 1.00729023, ..., 1.00729023, 1.00729023,\n        1.00729023],\n       [1.08286555, 1.08286555, 1.08286555, ..., 1.08286555, 1.08286555,\n        1.08286555],\n       [1.05223362, 1.05223362, 1.05223362, ..., 1.05223362, 1.05223362,\n        1.05223362],\n       [1.1719586 , 1.1719586 , 1.1719586 , ..., 1.1719586 , 1.1719586 ,\n        1.1719586 ]])diverging(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])process_time_diff(chain, draw)float640.0005549 0.0002336 ... 0.0003363array([[0.00055489, 0.00023365, 0.00047276, ..., 0.00038232, 0.0004018 ,\n        0.00020246],\n       [0.00049923, 0.00044608, 0.00043372, ..., 0.00033792, 0.00017472,\n        0.00037314],\n       [0.00054747, 0.00021153, 0.00051525, ..., 0.00040727, 0.00022437,\n        0.00045394],\n       [0.00067074, 0.00051242, 0.00061125, ..., 0.00037821, 0.00034662,\n        0.00033631]])perf_counter_diff(chain, draw)float640.0005654 0.0002338 ... 0.0003364array([[0.00056544, 0.00023377, 0.00047288, ..., 0.0003825 , 0.00040203,\n        0.00020259],\n       [0.0004992 , 0.00044613, 0.00043394, ..., 0.00033805, 0.00017483,\n        0.00037316],\n       [0.00054733, 0.0002119 , 0.00051491, ..., 0.00040753, 0.00022451,\n        0.00045401],\n       [0.00067041, 0.00051257, 0.00061126, ..., 0.00037832, 0.00034671,\n        0.00033643]])acceptance_rate(chain, draw)float640.9064 0.9135 0.7718 ... 1.0 0.8124array([[0.90639157, 0.91350957, 0.77182768, ..., 0.88353586, 0.98583535,\n        0.25905842],\n       [0.98955886, 0.76850148, 0.91835521, ..., 0.98134166, 0.9255821 ,\n        1.        ],\n       [1.        , 0.26334902, 0.82588129, ..., 0.45805148, 1.        ,\n        0.89739528],\n       [0.83775282, 0.81221993, 0.61178363, ..., 0.83165062, 1.        ,\n        0.81235333]])tree_depth(chain, draw)int642 1 2 1 2 2 2 2 ... 2 2 1 2 2 2 2 2array([[2, 1, 2, ..., 2, 2, 1],\n       [2, 2, 2, ..., 2, 1, 2],\n       [2, 1, 2, ..., 2, 1, 2],\n       [2, 2, 2, ..., 2, 2, 2]])n_steps(chain, draw)float643.0 1.0 3.0 1.0 ... 3.0 3.0 3.0 3.0array([[3., 1., 3., ..., 3., 3., 1.],\n       [3., 3., 3., ..., 3., 1., 3.],\n       [3., 1., 3., ..., 3., 1., 3.],\n       [3., 3., 3., ..., 3., 3., 3.]])accept(chain, draw, accept_dim_0)float640.007396 0.0 ... 0.1929 0.732array([[[7.39612819e-03, 0.00000000e+00],\n        [4.81757005e-01, 4.36350696e-01],\n        [1.00000000e+00, 0.00000000e+00],\n        ...,\n        [3.02994122e-02, 5.00000000e-01],\n        [3.15524455e+00, 3.78320328e-01],\n        [3.06370307e-01, 1.47077949e-01]],\n\n       [[3.74914457e-01, 7.26775219e+00],\n        [2.64087657e+00, 5.42411823e-02],\n        [1.01373740e-01, 8.18567118e-02],\n        ...,\n        [1.09606993e+00, 1.23133365e+00],\n        [2.32672273e-01, 5.45267664e-01],\n        [4.14571869e+00, 5.28322671e-01]],\n\n       [[1.00000000e+00, 5.22871476e-01],\n        [8.72268475e-02, 3.25327855e-01],\n        [4.92180078e-01, 2.47982802e+00],\n        ...,\n        [2.13478920e-01, 2.97234574e-01],\n        [6.59186005e-03, 7.33430580e-01],\n        [7.07448678e-04, 4.06632834e-03]],\n\n       [[2.13928968e-01, 1.49531966e+00],\n        [2.16730557e+00, 5.00000000e-01],\n        [1.00000000e+00, 5.00000000e-01],\n        ...,\n        [1.20579091e+00, 6.69148835e-01],\n        [7.47765382e-01, 3.68482237e-01],\n        [1.92939365e-01, 7.32034299e-01]]])accepted(chain, draw, accepted_dim_0)float640.0 0.0 1.0 0.5 ... 1.0 0.5 0.0 0.5array([[[0. , 0. ],\n        [1. , 0.5],\n        [1. , 0. ],\n        ...,\n        [1. , 0.5],\n        [1. , 0. ],\n        [1. , 0. ]],\n\n       [[1. , 1. ],\n        [1. , 0. ],\n        [0. , 0.5],\n        ...,\n        [1. , 0.5],\n        [1. , 0.5],\n        [1. , 0. ]],\n\n       [[1. , 0.5],\n        [0. , 0.5],\n        [0. , 1. ],\n        ...,\n        [0. , 0.5],\n        [0. , 0.5],\n        [0. , 0. ]],\n\n       [[1. , 0.5],\n        [1. , 0.5],\n        [1. , 0.5],\n        ...,\n        [1. , 0.5],\n        [1. , 0.5],\n        [0. , 0.5]]])energy_error(chain, draw)float64-0.06509 0.09046 ... -0.594 -0.104array([[-6.50865282e-02,  9.04614228e-02,  4.67984653e-01, ...,\n        -6.90994557e-02,  4.34232260e-02,  0.00000000e+00],\n       [ 3.18244988e-02, -6.90837604e-02,  3.89116988e-02, ...,\n         5.76026427e-02,  7.73324387e-02, -1.49912676e-01],\n       [-2.39403787e-01,  0.00000000e+00, -1.80410173e-01, ...,\n         1.15200873e+00, -7.66619061e-01,  3.67900783e-01],\n       [ 1.26164191e-01,  3.56530549e-01, -8.28935220e-05, ...,\n         3.80043189e-01, -5.94038760e-01, -1.04008828e-01]])largest_eigval(chain, draw)float64nan nan nan nan ... nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])step_size(chain, draw)float640.8418 0.8418 ... 1.204 1.204array([[0.84177244, 0.84177244, 0.84177244, ..., 0.84177244, 0.84177244,\n        0.84177244],\n       [1.09823017, 1.09823017, 1.09823017, ..., 1.09823017, 1.09823017,\n        1.09823017],\n       [1.09244341, 1.09244341, 1.09244341, ..., 1.09244341, 1.09244341,\n        1.09244341],\n       [1.2040221 , 1.2040221 , 1.2040221 , ..., 1.2040221 , 1.2040221 ,\n        1.2040221 ]])Indexes: (5)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))scaling_dim_0PandasIndexPandasIndex(Index([0, 1], dtype='int64', name='scaling_dim_0'))accept_dim_0PandasIndexPandasIndex(Index([0, 1], dtype='int64', name='accept_dim_0'))accepted_dim_0PandasIndexPandasIndex(Index([0, 1], dtype='int64', name='accepted_dim_0'))Attributes: (6)created_at :2023-04-20T21:18:39.558212arviz_version :0.15.1inference_library :pymcinference_library_version :5.3.0sampling_time :2.365055799484253tuning_steps :1000\n                      \n                  \n            \n            \n            \n                  \n                  observed_data\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:             (acc_observed_dim_0: 109)\nCoordinates:\n  * acc_observed_dim_0  (acc_observed_dim_0) int64 0 1 2 3 4 ... 105 106 107 108\nData variables:\n    acc_observed        (acc_observed_dim_0) int64 4 5 4 0 1 4 3 ... 1 0 0 1 0 1\nAttributes:\n    created_at:                 2023-04-20T21:18:39.562843\n    arviz_version:              0.15.1\n    inference_library:          pymc\n    inference_library_version:  5.3.0xarray.DatasetDimensions:acc_observed_dim_0: 109Coordinates: (1)acc_observed_dim_0(acc_observed_dim_0)int640 1 2 3 4 5 ... 104 105 106 107 108array([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,\n        14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,\n        28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,\n        42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,\n        56,  57,  58,  59,  60,  61,  62,  63,  64,  65,  66,  67,  68,  69,\n        70,  71,  72,  73,  74,  75,  76,  77,  78,  79,  80,  81,  82,  83,\n        84,  85,  86,  87,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,\n        98,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108])Data variables: (1)acc_observed(acc_observed_dim_0)int644 5 4 0 1 4 3 4 ... 0 0 1 0 0 1 0 1array([4, 5, 4, 0, 1, 4, 3, 4, 0, 6, 3, 3, 4, 0, 2, 6, 3, 3, 5, 4, 5, 3,\n       1, 4, 4, 1, 5, 5, 3, 4, 2, 5, 2, 2, 3, 4, 2, 1, 3, 2, 1, 1, 1, 1,\n       3, 0, 0, 1, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 1, 0, 1, 0,\n       1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 3, 3, 1, 2, 1, 1, 1, 1, 2,\n       4, 2, 0, 0, 1, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1])Indexes: (1)acc_observed_dim_0PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n        99, 100, 101, 102, 103, 104, 105, 106, 107, 108],\n      dtype='int64', name='acc_observed_dim_0', length=109))Attributes: (4)created_at :2023-04-20T21:18:39.562843arviz_version :0.15.1inference_library :pymcinference_library_version :5.3.0\n                      \n                  \n            \n            \n              \n            \n            \n\n\n\nax = az.plot_posterior(idata_cat, var_names=[\"~tasa\", \"~acc\"], figsize=(12, 6));\n\n\n\n\n\n\n\n\n\naz.summary(idata_cat, var_names=[\"~tasa\", \"~acc\"])\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\npc\n1889.971\n2.430\n1885.000\n1894.000\n0.168\n0.119\n224.0\n232.0\n1.01\n\n\nacc_missing[0]\n2.379\n1.879\n0.000\n6.000\n0.097\n0.069\n364.0\n467.0\n1.01\n\n\nacc_missing[1]\n0.931\n0.983\n0.000\n3.000\n0.038\n0.028\n704.0\n827.0\n1.00\n\n\nt_0\n3.080\n0.286\n2.558\n3.625\n0.006\n0.004\n2130.0\n2528.0\n1.00\n\n\nt_1\n0.929\n0.118\n0.712\n1.151\n0.002\n0.002\n3090.0\n2802.0\n1.00\n\n\n\n\n\n\n\n\ntasa_mean = idata_cat.posterior[\"tasa\"].mean((\"chain\", \"draw\"))\ntasa_hdi = az.hdi(idata_cat.posterior[\"tasa\"].values)\npc_hdi = az.hdi(idata_cat.posterior[\"pc\"])[\"pc\"]\n\n_, ax = plt.subplots(figsize=(10, 5), sharey=True)\nax.plot(años, accidentes, \".\")\n\nax.set_ylabel(\"Número de accidentes\")\nax.set_xlabel(\"Año\")\n\nax.vlines(\n    idata_cat.posterior[\"pc\"].mean((\"chain\", \"draw\")),\n    accidentes.min(),\n    accidentes.max(),\n    color=\"C1\",\n    lw=2,\n)\n\n\nax.fill_betweenx(\n    [accidentes.min(), accidentes.max()], pc_hdi[0], pc_hdi[1], alpha=0.3, color=\"C1\"\n)\nax.plot(años, tasa_mean, \"k\", lw=2)\nax.fill_between(años, tasa_hdi[:, 0], tasa_hdi[:, 1], alpha=0.3, color=\"k\")\n\nfaltante0 = (\n    idata_cat.posterior[\"acc_missing\"].sel(acc_missing_dim_0=0).mean((\"chain\", \"draw\"))\n)\nfaltante1 = (\n    idata_cat.posterior[\"acc_missing\"].sel(acc_missing_dim_0=1).mean((\"chain\", \"draw\"))\n)\n\nax.plot(años[np.isnan(accidentes)], [faltante0, faltante1], \"C2s\");",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#pruebas-predictivas-a-posteriori",
    "href": "02_Programación_probabilística.html#pruebas-predictivas-a-posteriori",
    "title": "3  Programación probabilista",
    "section": "3.4 Pruebas predictivas a posteriori",
    "text": "3.4 Pruebas predictivas a posteriori\nLa prueba consiste en comparar los datos observados con los datos predichos a partir del a posteriori.\nLas pruebas predictivas a posteriori son pruebas de auto-consistencia. Este ejercicio nos permite evaluar si el modelo es razonable, la idea general no es determinar si un modelo es correcto o no ya que como dijo George Box “todos los modelos están equivocados, pero algunos son útiles”. El grado de confianza en la verosimilitud de los modelos ciertamente es distinta entre practicantes de distintas disciplinas científicas, en disciplinas como física cuando se estudian sistemas relativamente simples bajo condiciones experimentales extremadamente controladas y haciendo uso de teorías fuertes, es probable que se le asigne un alto grado de confianza a ciertos modelos. Pero esto no suele ser cierto en disciplinas como ciencias sociales o biología (aunque sospecho que la variabilidad encontrada en biología ¡es muy alta!). En el caso de contar con a prioris muy informativos la evaluación de un modelo también puede ser usado para evaluar si los propios datos son razonables, indicando que tal vez sea necesario conseguir nuevos datos o revisar como se obtuvieron los datos o como se procesaron.\nEn definitiva la principal utilidad de las pruebas predictivas a posteriori debería ser el permitirnos dar una segunda mirada, crítica, al modelo y tratar de entender la razón de discrepancias sistemáticas (si las hubiera), estas discrepancias nos pueden llevar a entender mejor los límites del modelo, abandonar el modelo por completo o tal vez mejorarlo.\nSi bien se han desarrollado métodos formales o cuantitativos para realizar pruebas predictivas a posteriori, una aproximación que suele ser más informativa y simple de interpretar es realizar gráficas, como veremos a continuación.\nUsando PyMC podemos calcular la distribución predictiva a posteriori de la siguiente forma\n\nidata_cat.extend(\n    pm.sample_posterior_predictive(idata_cat, model=modelo_cat, random_seed=1791)\n)\n\nSampling: [acc_observed]\n\n\n\n\n\n\n\n    \n      \n      100.00% [4000/4000 00:00&lt;00:00]\n    \n    \n\n\nSi bien es posible construir nuestras propias pruebas predictivas a posteriori, a continuación usaremos dos funciones de ArviZ.\n\n_, ax = plt.subplots(1, 2, figsize=(12, 4))\naz.plot_ppc(idata_cat, ax=ax[0])\nax[0].set_xlabel(\"acc\")\naz.plot_loo_pit(idata_cat, \"acc_observed\", ax=ax[1], use_hdi=True)\nax[1].set_yticks([]);\n\n\n\n\n\n\n\n\n\naz.plot_ppc: Por defecto esta función representa los datos observados, varias muestras de la distribución predictiva a posteriori (predicciones) y la distribución media de estas muestras. Si los datos son discretos se usan histogramas, si los datos son continuos KDEs.\naz.plot_loo_pit: Muestra la diferencia entre datos observados y predichos (linea azul), de tal forma que si no hubiera diferencia obtendríamos una distribución uniforme (linea blanca). En el eje x están los cuantiles de la distribución. Por lo que si hubiera diferencia alrededor de 0.5 esto implica diferencia alrededor de la mediana, si en cambio la diferencia estuviera entre 0 y 0.2 esto implicaría diferencias en la cola izquierda (primer 20% de la masa total de la distribución), etc. Si la curva está por encima de la linea blanca esto quiere decir que hay más observaciones que predicciones en esa región, y si la curva está por debajo lo contrario. El gráfico muestra un banda, que indica las desviaciones esperadas respecto de la distribución uniforme para el tamaño de muestra dado. Cualquier diferencia dentro de esa banda es “esperable”.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#pruebas-predictivas-a-priori",
    "href": "02_Programación_probabilística.html#pruebas-predictivas-a-priori",
    "title": "3  Programación probabilista",
    "section": "3.5 Pruebas predictivas a priori",
    "text": "3.5 Pruebas predictivas a priori\nLas pruebas predictivas a prior son una forma de evaluar el modelo. Una vez definido un modelo Bayesiano se generan muestras a partir del mismo, pero sin condicionar en los datos \\(\\tilde{y}\\), es decir se calcula la distribución posible de datos (sintéticos) sin haber visto los datos reales.\n\\[\np(y^\\ast) =  \\int_{\\Theta} p(y^\\ast \\mid \\theta) \\; p(\\theta) \\; d\\theta\n\\]\nLos datos generados son predictivos ya que son los datos que el modelo esperara ver, es decir son datos no observados pero potencialmente observables. La prueba consiste en comparar los datos observados con el conocimiento previo que tenemos sobre el problema, ojo que NO se trata de comparar con los datos observados!\nLas pruebas predictivas a priori son pruebas de consistencia con nuestro conocimiento previo. Este ejercicio nos permite evaluar si el modelo es razonable, en el sentido de si es capaz de generar datos que concuerdan con lo que sabemos de un problema. Por ejemplo un modelo del tamaño de planetas no es muy razonable si predice planetas de escala nanométrica o incluso de unos pocos kilómetros. Es importante destacar que dado suficiente cantidad y calidad de datos un modelo de este tipo podría dar resultados razonables, una vez condicionado a esos datos. Es decir el posterior podría no incluir, o asignar probabilidades despreciables a nanoplanetas.\nEn definitiva la principal utilidad de las pruebas predictivas a prior es la de permitirnos inspeccionar críticamente un modelo y tratar de entender el comportamiento del modelo las discrepancias con el conocimiento previo nos pueden llevarnos a entender mejor los límites del modelo, abandonar el modelo por completo o tal vez mejorarlo por ejemplo usando priors más angostos u otros likelihoods.\nUsando PyMC podemos calcular la distribución predictiva a priori de la siguiente forma\n\nidata_cat.extend(pm.sample_prior_predictive(model=modelo_cat, random_seed=1791))\n\nSampling: [acc_missing, acc_observed, pc, t_0, t_1]\n\n\n\n_, ax = plt.subplots(2, 2, figsize=(10, 6), sharey=\"row\", sharex=\"col\")\n\nax[0, 0].plot(\n    años[np.isfinite(accidentes)],\n    idata_cat.prior_predictive[\"acc_observed\"].sel(draw=50).squeeze(\"chain\").T,\n    \".\",\n)\na_sample = idata_cat.prior.sel(draw=50)\ncoco = np.full_like(años, a_sample[\"t_1\"].item(), dtype=float)\ncoco[a_sample[\"pc\"] &gt;= años] = a_sample[\"t_0\"].item()\nax[0, 0].step(años, coco)\nax[0, 0].set_ylabel(\"número de accidentes\")\n\naz.plot_dist(\n    idata_cat.prior_predictive[\"acc_observed\"].sel(draw=50), ax=ax[0, 1], rotated=True\n)\n\n\nax[1, 0].plot(\n    años[np.isfinite(accidentes)],\n    idata_cat.prior_predictive[\"acc_observed\"].squeeze(\"chain\").T,\n    \"C0.\",\n    alpha=0.05,\n)\nax[1, 0].set_ylabel(\"número de accidentes\")\nax[1, 0].set_xlabel(\"años\")\n\naz.plot_dist(idata_cat.prior_predictive[\"acc_observed\"], ax=ax[1, 1], rotated=True)\nax[1, 1].set_xlabel(\"probabilidad\");\n\n\n\n\n\n\n\n\nLa primer fila de la figura anterior muestra una muestra de la distribución predictiva a priori. A la izquierda el número de accidentes por año (puntos azules). Y la tasa media en turquesa mostrando un valor de \\(\\approx 0.3\\) antes de 1880 y 1.3 con posterioridad a esa fecha. A la derecha un histograma de la cantidad de accidentes.\nLa segunda fila muestra lo mismo pero agregado para las 500 muestras que le pedimos a PyMC. Se ve una distribución de accidentes uniforme a lo largo de los años, esto es esperable dado que hemos definido el mismo prior para ambas tasas. Además, podemos ver que nuestro modelo favorece valores relativamente bajos de accidentes por año con el 85% de la masa para valores iguales o menores a 3.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#comparando-grupos",
    "href": "02_Programación_probabilística.html#comparando-grupos",
    "title": "3  Programación probabilista",
    "section": "3.6 Comparando grupos",
    "text": "3.6 Comparando grupos\nUna tarea común al analizar datos es comparar grupos. Podríamos estar interesados en analizar los resultados de un ensayo clínico donde se busca medir la efectividad de una droga, o la reducción de la cantidad de accidentes de tránsito al introducir un cambio en las regulaciones de tránsito, o el desempeño de estudiantes bajo diferentes aproximaciones pedagógicas, etc. Este tipo de preguntas se suele resolver en el marco de lo que se conoce como pruebas de hipótesis que busca declarar si una observación es estadísticamente significativa o no. Nosotros tomaremos una ruta alternativa.\nAl comparar grupos debemos decidir que característica(s) vamos a usar. Una característica común es la media de cada grupo. En ese caso podemos calcular la distribución a posteriori de la diferencia entre medias. Para ayudarnos a entender este posterior usaremos 3 herramientas:\n\nUn posteriorplot con un valor de referencia\nUna medida llamada d de Cohen\nLa probabilidad de superioridad\n\nEn el capítulo anterior ya vimos un ejemplo de cómo usar posteriorplot con un valor de referencia, pronto veremos otro ejemplo. Las novedades aquí son el d de Cohen y la probabilidad de superioridad, dos maneras populares de expresar el tamaño del efecto.\n\n3.6.1 d de Cohen\nUna medida muy común, al menos en ciertas disciplinas, para cuantificar el tamaño del efecto es el d de Cohen\n\\[\n\\frac{\\mu_2 - \\mu_1}{\\sqrt{\\frac{\\sigma_2^2 + \\sigma_1^2}{2}}}\n\\]\nDe acuerdo con esta expresión, el tamaño del efecto es la diferencia de las medias con respecto a la desviación estándar combinada de ambos grupos. Ya que es posible obtener una distribución a posteriori de medias y de desviaciones estándar, también es posible calcular una distribución a posteriori de los valores d de Cohen. Por supuesto, si sólo necesitamos o queremos una estimación puntual, podríamos calcular la media de esa distribución a posteriori. En general, al calcular una desviación estándar combinada, se toma en cuenta el tamaño de la muestra de cada grupo explícitamente, pero la ecuación de d de Cohen omite el tamaño de la muestra, la razón es que tomamos estos valores del posterior (por lo que ya estamos considerando la incertidumbre de las desviaciones estándar).\n\nUn d de Cohen es una forma de medir el tamaño del efecto donde la diferencia de las medias se estandariza al considerar las desviaciones estándar de ambos grupos.\n\nCohen introduce la variabilidad de cada grupo al usar sus desviaciones estándar. Esto es realmente importante, una diferencia de 1 cuando la desviación estándar es de 0.1 es muy grande en comparación con la misma diferencia cuando la desviación estándar es 10. Además, un cambio de x unidades de un grupo respecto del otro podría explicarse por cada punto desplazándose exactamente x unidades o la mitad de los puntos sin cambiar mientras la otra mitad cambia 2x unidades, y así con otras combinaciones. Por lo tanto, incluir las variaciones intrínsecas de los grupos es una forma de poner las diferencias en contexto. Re-escalar (estandarizar) las diferencias nos ayuda a dar sentido a la diferencia entre grupos y facilita evaluar si el cambio es importante, incluso cuando no estamos muy familiarizados con la escala utilizada para las mediciones.\nUn d de Cohen se puede interpretar como un Z-score. Un Z-score es la cantidad de desviaciones estándar que un valor difiere del valor medio de lo que se está observando o midiendo, puede ser positivo o negativo dependiendo de si la diferencia es por exceso o por defecto. Por lo tanto, un d de Cohen de -1.2, indica que la media de un grupo está 1.2 desviación estándar por debajo de la media del otro grupo.\nIncluso con las diferencias de medias estandarizadas, puede ser necesario tener que calibrarnos en función del contexto de un problema determinado para poder decir si un valor de d de Cohen es grande, pequeño, mediano, importante, despreciable, etc. Afortunadamente, esta calibración se puede adquirir con la práctica, a modo de ejemplo si estamos acostumbrados a realizar varios análisis para más o menos el mismo tipo de problemas, podemos acostumbrarnos a un d de Cohen de entre 0.8 y 1.2, de modo que si obtenemos un valor de 2 podría ser que estamos frente a algo importante, inusual (¡o un error!). Una alternativa es consultar con expertos en el tema.\nUna muy buena página web para explorar cómo se ven los diferentes valores de Cohen’s es http://rpsychologist.com/d3/cohend. En esa página, también encontrarán otras formas de expresar el tamaño del efecto; algunas de ellos podrían ser más intuitivas, como la probabilidad de superioridad que analizaremos a continuación.\n\n\n3.6.2 Probabilidad de superioridad\nEsta es otra forma de informar el tamaño del efecto y se define como la probabilidad que un dato tomado al azar de un grupo tenga un valor mayor que un punto tomado al azar del otro grupo. Si suponemos que los datos que estamos utilizando se distribuyen de forma Gaussiana, podemos calcular la probabilidad de superioridad a partir de la d de Cohen usando la expresión:\n\\[\\begin{equation} \\label{eq_ps}\nps = \\Phi \\left ( \\frac{\\delta}{\\sqrt{2}} \\right)\n\\end{equation}\\]\nDonde \\(\\Phi\\) es la distribución normal acumulada y \\(\\delta\\) es el d de Cohen. Podemos calcular una estimación puntual de la probabilidad de superioridad (lo que generalmente se informa) o podemos calcular la distribución a posteriori. Si no estamos de acuerdo con la suposición de normalidad, podemos descartar esta fórmula y calcularla directamente a partir del posterior sin necesidad de asumir ninguna distribución. Esta es una de las ventajas de usar métodos de muestreo para estimar el a posteriori, una vez obtenidas las muestras lo que podemos hacer con ellas es muy flexible.\n\n\n3.6.3 El conjunto de datos tips\nPara explorar el tema de esta sección, vamos a usar el conjunto de datos tips (propinas). Estos datos fueron informados por primera vez por Bryant, P. G. and Smith, M (1995) Practical Data Analysis: Case Studies in Business Statistics.\nQueremos estudiar el efecto del día de la semana sobre la cantidad de propinas en un restaurante. Para este ejemplo, los diferentes grupos son los días. Comencemos el análisis cargando el conjunto de datos como un DataFrame de Pandas usando solo una línea de código. Si no está familiarizado con Pandas, el comando tail se usa para mostrar las últimas filas de un DataFrame:\n\ntips = pd.read_csv(\"datos/propinas.csv\")\ntips.tail()\n\n\n\n\n\n\n\n\ntotal_bill\ntip\nsex\nsmoker\nday\ntime\nsize\n\n\n\n\n239\n29.03\n5.92\nMale\nNo\nSat\nDinner\n3\n\n\n240\n27.18\n2.00\nFemale\nYes\nSat\nDinner\n2\n\n\n241\n22.67\n2.00\nMale\nYes\nSat\nDinner\n2\n\n\n242\n17.82\n1.75\nMale\nNo\nSat\nDinner\n2\n\n\n243\n18.78\n3.00\nFemale\nNo\nThur\nDinner\n2\n\n\n\n\n\n\n\nPara este ejemplo solo vamos a usar las columnas day y tip y vamos a usar la función plot_forest de ArviZ. Aún cuando ArviZ está pensado para análisis de modelos Bayesianos algunos de sus funciones pueden ser útiles para analizar datos.\n\naz.plot_forest(\n    tips.pivot(columns=\"day\", values=\"tip\").to_dict(\"list\"),\n    kind=\"ridgeplot\",\n    hdi_prob=1,\n    figsize=(12, 4),\n);\n\n\n\n\n\n\n\n\nA fin de simplificar el análisis vamos a crear 2 variables: * La variable categories contiene los nombres de los días (abreviados y en inglés) * La variable idx codifica los días de la semana como enteros entre 0 y 3.\n\ncategories = np.array([\"Thur\", \"Fri\", \"Sat\", \"Sun\"])\n\ntip = tips[\"tip\"].values\nidx = pd.Categorical(tips[\"day\"], categories=categories).codes\n\nEl modelo para este problema es basicamente igual a model_g, con la diferencia que \\(\\mu\\) y \\(\\sigma\\) ahora serán vectores en vez de escalares. La sintáxis de PyMC es super-útil para estos caso, en vez de usar for loops escribimos el modelo de forma vectorizada, para ello especificamos el argumento shape para los priors \\(\\mu\\) y \\(\\sigma\\) y para el likelihood usamos la variable idx para indexar de forma adecuada \\(\\mu\\) y \\(\\sigma\\) para asegurar que usamos los parámetros correctos para cada grupo. En este ejemplo un \\(\\mu\\) para jueves, otra para viernes, otra para sábado y una cuarta para domingo, y lo mismo para \\(\\sigma\\).\n    with pm.Model() as comparing_groups:\n        μ = pm.Normal('μ', mu=0, sigma=10, shape=4)\n        σ = pm.HalfNormal('σ', sigma=10, shape=4)\n\n        y = pm.Normal('y', mu=μ[idx], sigma=σ[idx], observed=tip)\nPyMC provee una sintaxis alternativa, la cual consisten en especificar coordenadas y dimensiones. La ventaja de esta alternativa es que permite una mejor integración con ArviZ.\nVeamos, en este ejemplo tenemos 4 valores para las medias y 4 para las desviaciones estándar, y por eso usamos shape=4. El InferenceData tendrá 4 indices 0, 1, 2, 3 correspondientes a cada uno de los 4 días. Pero es trabajo del usuario asociar esos indices numéricos con los días.\nAl usar coordenadas y dimensiones nosotros podremos usar los rótulos 'Thur', 'Fri', 'Sat', 'Sun' para referirnos a los parámetros relacionados con cada uno de estos días. ArviZ también podrá hacer uso de estos rótulos. Vamos a especificar dos coordenadas days con las dimensiones 'Thur', 'Fri', 'Sat', 'Sun' y “days_flat” que contendrá los mismo rótulos pero repetidos según el orden y longitud que corresponda con cada observación. Esto último será útil para poder obtener pruebas predictivas a posteriori para cada día.\n\ncoords = {\"days\": categories, \"days_flat\": categories[idx]}\n\nwith pm.Model(coords=coords) as comparing_groups:\n    μ = pm.HalfNormal(\"μ\", sigma=5, dims=\"days\")\n    σ = pm.HalfNormal(\"σ\", sigma=1, dims=\"days\")\n\n    y = pm.Gamma(\"y\", mu=μ[idx], sigma=σ[idx], observed=tip, dims=\"days_flat\")\n\n    idata_cg = pm.sample()\n    idata_cg.extend(pm.sample_posterior_predictive(idata_cg))\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:02&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\nSampling: [y]\n\n\n\n\n\n\n\n    \n      \n      100.00% [4000/4000 00:00&lt;00:00]\n    \n    \n\n\nUna vez obtenido un a posteriori podemos hacer todos los análisis que creamos pertinentes con el. Primero hagamos una prueba predictiva a posteriori. Vemos que en general somos capaces de capturar la forma general de las distribuciones, pero hay detalles que se nos escapan. Esto puede deberse al tamaño relativamente pequeño de la muestra, a que hay otros factores además del día que tienen influencia en las propinas o una combinación de ambas. Por ahora seguiremos con el análisis considerando que el modelo es lo suficientemente bueno\n\n_, axes = plt.subplots(2, 2)\naz.plot_ppc(\n    idata_cg,\n    num_pp_samples=100,\n    coords={\"days_flat\": [categories]},\n    flatten=[],\n    ax=axes,\n);\n\n\n\n\n\n\n\n\nPodemos ver la distribución de cada uno de los parámetros haciendo\n\naz.plot_posterior(idata_cg, var_names=\"μ\", figsize=(12, 3));\n\n\n\n\n\n\n\n\nLa figura anterior es bastante informativa, por ejemplo vemos que los valores medios de las propinas difieren en solo unos pocos centavos y que para los domingos el valor es ligeramente más alto que para el resto de los días analizados.\nPero quizá consideramos que puede ser mejor mostrar los datos de otra forma. Por ejemplo podemos calcular todas las diferencias de medias a posteriori entre si. Además podríamos querer usar alguna medida del tamaño del efecto que sea popular entre nuestra audiencia, como podrían ser la probabilidad de superioridad o d de Cohen.\nCohen’s d\n\\[\n\\frac{\\mu_2 - \\mu_1}{\\sqrt{\\frac{\\sigma_1^2 + \\sigma_2^2}{2}}}\n\\]\n\nSe puede interpretar como un z-score. Cuántas desviaciones estándar una media de un grupo está por encima (o por debajo) de la media del otro grupo\nEjemplo interactivo\n\nProbabilidad de superioridad\n\nLa probabilidad que un dato tomado de un grupo sea mayor que la de un dato tomado del otro grupo.\nSi suponemos que los datos se distribuyen normalmente, entonces:\n\n\\[\n\\text{ps} = \\Phi \\left ( \\frac{\\delta}{\\sqrt{2}} \\right)\n\\]\n\\(\\Phi\\) es la cdf de una distribución normal \\(\\delta\\) es el valor del Cohen’s d.\nCon el siguiente código usamos plot_posterior para graficar todas las diferencias no triviales o redundantes. Es decir evitamos las diferencias de un día con sigo mismo y evitamos calcular ‘Fri - Thur’ si ya hemos calculado ‘Thur- Fri’. Si lo viéramos como una matriz de diferencias solo estaríamos calculando la porción triangular superior.\n\ncg_posterior = az.extract(idata_cg)\n\ndist = pz.Normal(0, 1)\n\ncomparisons = [(categories[i], categories[j]) for i in range(4) for j in range(i+1, 4)]\n\n_, axes = plt.subplots(3, 2, figsize=(13, 9), sharex=True)\n\nfor (i, j), ax in zip(comparisons, axes.ravel()):\n    means_diff = cg_posterior[\"μ\"].sel(days=i) - cg_posterior['μ'].sel(days=j)\n    \n    d_cohen = (means_diff /\n               np.sqrt((cg_posterior[\"σ\"].sel(days=i)**2 + \n                        cg_posterior[\"σ\"].sel(days=j)**2) / 2)\n              ).mean().item()\n    \n    ps = dist.cdf(d_cohen/(2**0.5))\n    az.plot_posterior(means_diff.values, ref_val=0, ax=ax)\n    ax.set_title(f\"{i} - {j}\")\n    ax.plot(0, label=f\"Cohen's d = {d_cohen:.2f}\\nProb sup = {ps:.2f}\", alpha=0)\n    ax.legend(loc=1)\n\n\n\n\n\n\n\n\nUna forma de interpretar estos resultados es comparando el valor de referencia con el intervalo HDI. De acuerdo con la figura anterior, tenemos solo un caso cuando el 94% HDI excluye el valor de referencia de cero, la diferencia en las propinas entre el jueves y el domingo. Para todos los demás ejemplos, no podemos descartar una diferencia de cero (de acuerdo con los criterios de superposición de valores de referencia de HDI). Pero incluso para ese caso, ¿es una diferencia promedio de ≈0.5 dólares lo suficientemente grande? ¿Es suficiente esa diferencia para aceptar trabajar el domingo y perder la oportunidad de pasar tiempo con familiares o amigos? ¿Es suficiente esa diferencia para justificar promediar las propinas durante los cuatro días y dar a cada mozo/a la misma cantidad de dinero de propina? Este tipo de preguntas es crucial para interpretar los datos y/o tomar decisiones, pero las respuestas no las puede ofrecer la estadística de forma automática (ni ningún otro procedimiento). La estadística solo pueden ayudar en la interpretación y/o toma de decisiones.\nNota: Dependiendo del público el gráfico anterior puede que esté demasiado “cargado”, quizá es útil para una discusión dentro del equipo de trabajo, pero para un público en general quizá convenga sacar elementos o repartir la información entre una figura y una tabla o dos figuras.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#resumen",
    "href": "02_Programación_probabilística.html#resumen",
    "title": "3  Programación probabilista",
    "section": "3.7 Resumen",
    "text": "3.7 Resumen\nAunque la estadística Bayesiana es conceptualmente simple, los modelos probabilísticos a menudo conducen a expresiones analíticamente intratables. Durante muchos años, esta fue una gran barrera que obstaculizó la adopción amplia de métodos Bayesianos. Afortunadamente, la matemática, la física y la informática vinieron al rescate en forma de métodos numéricos capaces, al menos en principio, de resolver cualquier inferencia. La posibilidad de automatizar el proceso de inferencia ha llevado al desarrollo de los lenguajes de programación probabilista que permiten una clara separación entre la definición del modelo y la inferencia.\nPyMC es una librería de Python para programación probabilística con una sintaxis simple, intuitiva y fácil de leer que también está muy cerca de la sintaxis estadística utilizada para describir modelos probabilísticos. En este capítulo introducimos PyMC revisando el problema de la moneda que vimos en el capítulo anterior. La diferencia es que no tuvimos que derivar analíticamente la distribución a posteriori. Los modelos en PyMC se definen dentro de un bloque with; para agregar una distribución de probabilidad a un modelo, solo necesitamos escribir una línea de código. Las distribuciones se pueden combinar y se pueden usar como priors (variables no observadas) o likelihoods (variables observadas). En la sintaxis de PyMC la única diferencia entre ambas es que para esta última debemos pasar los datos usando el argumento observed. Si todo va bien las muestras generadas por PyMC serán representativas de la distribución a posteriori y por lo tanto serán una representación de las consecuencias lógicas del modelo y los datos.\nArviZ es una librería que nos ayuda a explorar los modelos definidos por PyMC (u otras librerías como PyStan, TFP, BeanMachine, etc). Una forma de usar el posterior para ayudarnos a tomar decisiones es comparando la ROPE con el intervalo HDI. También mencionamos brevemente la noción de funciones de pérdida, una aproximación formal para cuantificar los costos y beneficios asociados a la toma de decisiones. Aprendimos que las funciones de pérdida y las estimaciones puntuales están íntimamente asociadas.\nHasta este momento todos los ejemplos estuvieron basado en modelos con un solo parámetro. Sin embargo PyMC permite, en principiop, usar un número arbitrario de parámetros, esto lo ejemplificamos con un modelo Gaussiano y luego una generalización de este, el modelo t de Student. La distribución t de Student suele usarse como alternativa a la Gaussiana cuando queremos hacer inferencias robustas a valores aberrantes. Pronto veremos cómo se puede usar estos modelos como para construir regresiones lineales.\nFinalizamos comparando medias entre grupos, una tarea común en análisis de datos. Si bien esto a veces se enmarca en el contexto de las pruebas de hipótesis, tomamos otra ruta y trabajamos este problema como una inferencia del tamaño del efecto.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#para-seguir-leyendo",
    "href": "02_Programación_probabilística.html#para-seguir-leyendo",
    "title": "3  Programación probabilista",
    "section": "3.8 Para seguir leyendo",
    "text": "3.8 Para seguir leyendo\n\nLa documentación de PyMC tiene varios ejemplos de como usar este librería y modelos de distinto tipo.\nProbabilistic Programming and Bayesian Methods for Hackers de Cameron Davidson-Pilon y varios otros contribuidores. Originalmente escrito en PyMC2 ha sido portado a PyMC\nWhile My MCMC Gently Samples. Un blog de Thomas Wiecki, desarrollador de PyMC.\nStatistical Rethinking by Richard McElreath es probablemente el mejor libro introductorio de estadística Bayesiana. El libro usa R/Stan. Pero varias personas hemos contribuido para portar el código a Python/PyMC\nDoing Bayesian Data Analysis de John K. Kruschke es otro libro introductorio bastante accesible. La mayoría de los ejemplos de la primer edición están disponibles en Python/PyMC y de la segunda edición acá.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "02_Programación_probabilística.html#ejercicios",
    "href": "02_Programación_probabilística.html#ejercicios",
    "title": "3  Programación probabilista",
    "section": "3.9 Ejercicios",
    "text": "3.9 Ejercicios\n\nUsando PyMC reproducí los resultados del primer capítulo para el problema de la moneda (use los 3 priors usados en ese capítulo).\nReemplazá la distribución beta por una uniforme en el intervalo [0, 1] ¿Cómo cambia la velocidad del muestreo? ¿Y si se usas un intervalo más ámplio, como [-3, 3]?\nPara el modelo_g. Usá una Gaussiana para la media, centrada en la media empírica. Probá modificar la desviación estándard de ese prior ¿Cuán robusto/sensible son los resultados a la elección del prior?\nLa Gaussiana es una distribución sin límites es decir es válida en el intervalo \\([-\\infty, \\infty]\\), en el ejemplo anterior la usamos para modelar datos que sabemos tienen límites ¿Qué opinas de esta elección?\nUsando los datos de la velocidad de la luz, calculá la media y desviación estándar con y sin los outilers, compará esos valores con los obtenidos con el modelo_g y con el modelo_t.\nModificá el modelo de las propinas para usar una distribución t de Student, probá usando un solo \\(\\nu\\) para los cuatro grupos y también usando un valor de \\(\\nu\\) por grupo.\nCalculá la probabilidad de superioridad a partir de las muestras del posterior (sin usar la formula de probabilidad de superioridad a partir de la d de Cohen). Comparar los resultados con los valores obtenidos a analíticamente.\nAplica al menos uno de los modelos visto en este capítulo a datos propios o de tu interés.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Programación probabilista</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html",
    "href": "03_Modelos_jerárquicos.html",
    "title": "4  Modelado Jerárquico",
    "section": "",
    "text": "4.1 Compartir información\nLos objetivos de este capítulo son:\nEn el ejemplo de las propinas vimos que teníamos 4 grupos, jueves, viernes, sábado y domingo. Decidimos modelar cada grupo por separado. Eso a veces está bien, pero debemos ser conscientes de nuestros supuestos. Al modelar cada grupo de forma independiente, asumimos que los grupos no están relacionados. En otras palabras, asumimos que conocer la propina de un día no nos da ninguna información sobre la propina de los demás días. Esa podría ser una suposición demasiado fuerte. Como alternativa podríamos haber modelado los 4 días como un solo grupo, en este caso asumimos que no hay diferencias entre día, o al menos que esas diferencias no nos interesan.\n¿Es posible construir un modelo que contemple que los grupos son diferentes y al mismo tiempo comparten información? No solo es posible, además ese es el tema principal de este capítulo.\nLos modelos jerárquicos también se conocen como modelos multinivel, modelos de efectos mixtos, modelos de efectos aleatorios o modelos anidados. Son particularmente útiles cuando se trata de datos que se pueden describir como agrupados o con diferentes niveles, como datos anidados dentro de regiones geográficas, por ej ciudades que pertenecen a una provincia y provincias que pertenecen a un país, o con una estructura jerárquica, por ej, estudiantes dentro de escuelas, o pacientes dentro de los hospitales o también mediciones repetidas de los mismos individuos.\nLos modelos jerárquicos son una forma natural de compartir información entre grupos y se construyen asignado distribuciones a priori a las distribuciones a priori. Este nivel superior de distribuciones a priori se suelen denominar hiper-priors. Tener hiper-priors permite que los grupos de un modelo compartan información, al mismo tiempo que permite diferencias entre grupos. En otras palabras, podemos pensar en los parámetros de las distribuciones a priori, de cada grupo, como pertenecientes a una población común de parámetros (determinada por el hiper-prior). La siguiente figura muestra un diagrama con las diferencias entre un modelo agrupado (un solo grupo), un modelo no agrupado (todos los grupos separados) y un modelo jerárquico, también conocido como modelo parcialmente agrupado.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#compartir-información",
    "href": "03_Modelos_jerárquicos.html#compartir-información",
    "title": "4  Modelado Jerárquico",
    "section": "",
    "text": "Diagrama que muestra las diferencias entre un modelo agrupado, un modelo no agrupado y un modelo jerárquico.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#desplazamientos-jerárquicos",
    "href": "03_Modelos_jerárquicos.html#desplazamientos-jerárquicos",
    "title": "4  Modelado Jerárquico",
    "section": "4.2 Desplazamientos jerárquicos",
    "text": "4.2 Desplazamientos jerárquicos\nLas proteínas son moléculas formadas por 20 unidades, llamadas amino ácidos, cada amino ácido puede aparecer en una proteína 0 o más veces. Así como una melodía está definida por una sucesión de notas musicales, una proteína está definida por una sucesión de amino ácidos. Algunas variaciones de notas pueden dar como resultados pequeñas variaciones sobre la misma melodía, otras variaciones pueden resultar en melodías completamente distintas, algo similar sucede con las proteínas. Una forma de estudiar proteínas es usando resonancia magnética nuclear (la misma técnica usada para imágenes médicas). Esta técnica permite medir diversos observables, uno de ellos se llama desplazamiento químico y para simplificar diremos que podemos medir tantos desplazamientos químicos como amino ácidos tenga una proteína. Los aminoácidos son una familia de compuestos químicos por lo que tendría sentido tratarlos a todos de igual forma, pero al mismo tiempo tienen diferentes propiedades químicas, las cuales de hecho son relevantes para comprender como funcionan las proteínas! Por lo que también tiene sentido tratarlos por separado. Como ya vimos una alternativa es construir un modelo jerárquico y hacer algo a mitad de camino.\nEl siguiente conjunto de datos contiene valores de desplazamientos químicos para un conjunto de proteínas. Si inspeccionan el DataFrame cs_data verán que tiene 4 columnas:\n\nLa primera es un código que identifica a la proteína (si tienen curiosidad pueden ingresar el identificador en esta base de datos https://www.rcsb.org).\nLa segunda columna tiene el nombre del amino ácido (pueden corroborar que hay tan solo 20 nombres únicos).\nLa tercera contiene valores teóricos de desplazamientos químicos (calculados usando métodos cuánticos).\nLa cuarta tiene valores experimentales.\n\nLa motivación de este ejemplo es comparar las diferencias entre valores teóricos y experimentales, entre otras razones para evaluar la capacidad de los métodos teóricos para reproducir valores experimentales.\n\ncs_data = pd.read_csv('datos/chemical_shifts_theo_exp.csv')\ndiff = cs_data.theo - cs_data.exp\ncat_encode = pd.Categorical(cs_data['aa'])\nidx = cat_encode.codes\ncoords = {\"aa\": cat_encode.categories}\n\nPara resaltar la diferencia entre un modelo jerárquico y uno no-jerárquico vamos a construir ambos. Primero el no-jerárquico.\n\nwith pm.Model(coords=coords) as cs_nh:         \n    μ = pm.Normal('μ', mu=0, sigma=10, dims=\"aa\") \n    σ = pm.HalfNormal('σ', sigma=10, dims=\"aa\") \n \n    y = pm.Normal('y', mu=μ[idx], sigma=σ[idx], observed=diff) \n     \n    idata_cs_nh = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:04&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 4 seconds.\n\n\nY ahora el jerárquico.\nEste modelo tiene un hyper-prior para la media de \\(\\mu\\) y otro para la desviación estándar de \\(\\mu\\). Para \\(\\sigma\\) no usamos un hyper-prior, es decir asumimos valores independientes. Esta es una decisión que tomé para simplificar el modelo, en principio no habría problema con usar un hyper-prior también para \\(\\sigma\\) o incluso estimar un solo valor, compartido, de \\(\\sigma\\).\n\nwith pm.Model(coords=coords) as cs_h:\n    # hyper_priors\n    μ_mu = pm.Normal('μ_mu', mu=0, sigma=10)\n    μ_sd = pm.HalfNormal('μ_sd', 10)\n\n    # priors\n    μ = pm.Normal('μ', mu=μ_mu, sigma=μ_sd, dims=\"aa\") \n    σ = pm.HalfNormal('σ', sigma=10, dims=\"aa\") \n\n    y = pm.Normal('y', mu=μ[idx], sigma=σ[idx], observed=diff) \n\n    idata_cs_h = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ_mu, μ_sd, μ, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:04&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 4 seconds.\n\n\nLa siguiente figura muestra una representación gráfica de los modelos cs_nh (no-jerárquico) y cs_h (jerárquico). Se puede ver como el modelo jerárquico tiene un nivel más.\n\n\n\nVamos a comparar los resultados usando un plot_forest. ArviZ permite pasar más de un modelo. Esto es útil cuando queremos comparar los valores de parámetros equivalentes entre modelos como en el presente ejemplo. Noten que estamos pasando varios argumentos para obtener el gráfico, como por ejemplo combined=True que combina los resultados de todas las cadenas. Los invito a explorar el significado del resto de los parámetros.\n\naxes = az.plot_forest([idata_cs_nh, idata_cs_h], model_names=['no_jerárquico', 'jerárquico'],\n                      var_names='μ', combined=True, r_hat=False, ess=False, figsize=(10, 7),\n                      colors='cycle')\ny_lims = axes[0].get_ylim()\naxes[0].vlines(idata_cs_h.posterior['μ_mu'].mean(), *y_lims, color=\"k\", ls=\":\");\n\n\n\n\n\n\n\n\nBien, tenemos un gráfico para 40 valores medios estimados, uno por aminoácido (20) y esto duplicado ya que tenemos dos modelos. También tenemos los intervalos de credibilidad del 94% y el rango intercuartil (el intervalo que contiene el 50% central de la distribución). La línea vertical es la media parcialmente agrupada, es decir la media según el modelo jerárquico. El valor es cercano a cero, esto es parte de lo que esperaríamos ver si los valores teóricos son buenos reproduciendo los valores experimentales.\nLa parte más relevante de este gráfico es que las estimaciones del modelo jerárquico son atraídas hacia la media parcialmente agrupada o, de forma equivalente, se contraen con respecto a las estimaciones no agrupadas. Este efecto es más notorio para los grupos más alejados de la media (como 13), además la incertidumbre es igual o menor que la del modelo no jerárquico. Decimos que las estimaciones están parcialmente agrupadas porque tenemos una estimación para cada grupo, pero las estimaciones para cada grupos se restringen mutuamente mediante el hiper prior. Por lo tanto, se obtiene una situación intermedia entre tener un solo grupo, todos los aminoácidos juntos, y tener 20 grupos separados, uno por aminoácido.\nParafraseando el Zen de Python, podemos decir: hierarchical models are one honking great idea - let’s do more of those!.\nEn los próximos capítulos, seguiremos construyendo modelos jerárquicos y aprendiendo cómo usarlos para construir mejores modelos. También discutiremos cómo se relacionan los modelos jerárquicos con uno de los problemas más comunes en estadística, ciencia de datos y Machine learning el problema del overfitting/underfitting.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#renacuajos-multinivel",
    "href": "03_Modelos_jerárquicos.html#renacuajos-multinivel",
    "title": "4  Modelado Jerárquico",
    "section": "4.3 Renacuajos multinivel",
    "text": "4.3 Renacuajos multinivel\nEste ejemplo está tomado de statistical rethinking\n\nTenemos 48 tanques llenos de renacuajos\nQueremos modelar la probabilidad de supervivencia de los renacuajos\nLas condiciones como la temperatura, el pH, la luz, etc. varían ligeramente entre los tanques (pero no los estamos teniendo en cuenta explícitamente)\nPodemos pensar en cada tanque como un grupo\n\n\nd = pd.read_csv('datos/reedfrogs.csv', sep=\",\")\nd.head()\n\n\n\n\n\n\n\n\ndensity\npred\nsize\nsurv\npropsurv\n\n\n\n\n0\n10\nno\nbig\n9\n0.9\n\n\n1\n10\nno\nbig\n10\n1.0\n\n\n2\n10\nno\nbig\n7\n0.7\n\n\n3\n10\nno\nbig\n10\n1.0\n\n\n4\n10\nno\nsmall\n9\n0.9\n\n\n\n\n\n\n\n\nwith pm.Model() as modelo_renacuajos:\n    # Hiperpriors\n    μ = pm.Normal('μ', 0., 1.)\n    σ = pm.HalfNormal('σ', 10.)\n    # Prior\n    α_tanque = pm.Normal('α_tanque', μ, σ, shape=d.shape[0])\n    p = pm.Deterministic('p', pm.math.sigmoid(α_tanque))  # transformación logística\n    #likelihood\n    surv = pm.Binomial('surv', n=d.density, p=p, observed=d.surv)\n    \n    idata_renacuajos = pm.sample(2000, tune=2000)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, σ, α_tanque]\n\n\n\n\n\n\n\n    \n      \n      100.00% [16000/16000 00:05&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 2_000 tune and 2_000 draw iterations (8_000 + 8_000 draws total) took 5 seconds.\n\n\n\npm.model_to_graphviz(modelo_renacuajos)\n\n\n\n\n\n\n\n\nEn la siguiente figura se muestran las proporciones empíricas de sobrevivientes en cada tanque de renacuajos (puntos azules) y las proporciones estimadas por el modelo (puntos turquesa). La línea discontinua indica la proporción promedio de sobrevivientes teniendo en cuenta todos los tanques. Las lineas verticales dividen los tanques de acuerdo a las diferentes densidades iniciales de renacuajos: tanques pequeños (10), tanques medianos (25) y tanques grandes (35). En cada tanque, la media a posteriori del modelo multinivel está más cerca de la línea punteada que la proporción empírica. Esto refleja la información compartida entre tanques y el efecto de contracción.\n\n_, ax = plt.subplots(1, 1, figsize=(12, 5))\n\npost_r = az.extract(idata_renacuajos)\n\nax.scatter(np.arange(0, 48), d.propsurv, color='C0')\nax.scatter(np.arange(0, 48), post_r['p'].mean(\"sample\"), color='C1')\nax.hlines(logistic(post_r['μ'].median(\"sample\")), -1, 49, linestyles='--')\n\nidx = d.density[d.density.diff() &gt; 0].index\nax.vlines(idx + 0.5, -.05, 1.05, lw=.5)\nfor i, t in zip(np.linspace(0, 48, 7)[1::2], ('pequeño', 'mediano', 'largo')):\n    ax.text(i, 0, t, horizontalalignment='center')\nax.set_xlabel('tanques')\nax.set_ylabel('proporción de survivencia')\nax.set_xlim(-1, 48)\nax.set_xticks([])\nax.set_ylim(-.05, 1.05)\nax.grid(False)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#tuberías-jerárquicas",
    "href": "03_Modelos_jerárquicos.html#tuberías-jerárquicas",
    "title": "4  Modelado Jerárquico",
    "section": "4.4 Tuberías jerárquicas",
    "text": "4.4 Tuberías jerárquicas\nSupongamos que queremos analizar la calidad del agua en una ciudad, entonces tomamos muestras dividiendo la ciudad en barrios. Podemos pensar que tenemos dos opciones para analizar estos datos:\n\nEstudiar cada barrio como una entidad separada\nReunir todos los datos y estimar la calidad del agua de la ciudad como un solo gran grupo\n\nProbablemente a este altura ya hayas notado el patrón. Podemos justificar la primera opción diciendo que obtenemos una visión más detallada del problema, que de otro modo podría volverse invisible o menos evidente si promediamos los datos. La segunda opción se puede justificar diciendo que si agrupamos los datos, obtenemos un tamaño de muestra más grande y por lo tanto una estimación más precisa. Pero ya sabemos que tenemos una tercera opción, ¡podemos hacer un modelo jerárquico!\nPara este ejemplo, vamos a utilizar datos sintéticos. Usar datos sintéticos es una excelente manera de entender las cosas. Si no entiendes algo, simúlalo! Hay muchos usos para los datos sintéticos. Aquí vamos a imaginar que hemos recolectado muestras de agua de tres regiones diferentes de la misma ciudad y hemos medido el contenido de plomo del agua; las muestras con concentraciones de plomo por encima de las recomendaciones de la Organización Mundial de la Salud (OMS) se marcan con cero y las muestras con valores por debajo de las recomendaciones se marcan con uno. Este es un escenario muy simple, en un ejemplo más realista, tendríamos una medición continua de la concentración de plomo y probablemente muchos más grupos. Sin embargo, este escenario es lo suficientemente bueno para explorar los detalles de los modelos jerárquicos. Podemos generar los datos sintéticos con el siguiente código:\n\nN = [30, 30, 30]\nG = [18, 18, 18]\n\ngroup_idx = np.repeat(np.arange(len(N)), N)\n\ndata = []\nfor i in range(0, len(N)):\n    data.extend(np.repeat([1, 0], [G[i], N[i]-G[i]]))\n\nEstamos simulando un experimento en el que hemos medido tres grupos, cada uno formado por un determinado número de muestras; almacenamos el número total de muestras por grupo en el arreglo N. Usando la lista G_samples, mantenemos un registro del número de muestras de buena calidad por grupo. El resto del código está ahí solo para generar una lista de datos, llena de ceros y unos.\nEl modelo para este problema es similar al que usamos para el problema de la moneda.\n\\[\\begin{align}\n\\theta &\\sim \\operatorname{Beta}(\\alpha, \\beta) \\\\\ny &\\sim \\operatorname{Bin}(n=1, p=\\theta)\n\\end{align}\\]\nexcepto por dos características importantes:\n\nHemos definido dos hyper-prior que influirán en la beta previa.\nEn lugar de poner hiperpriors en los parámetros \\(\\alpha\\) y \\(\\beta\\), estamos definiendo la distribución beta en términos de \\(\\mu\\), la media, y \\(\\nu\\), la concentración (o precisión) de la distribución beta. La precisión es análoga a la inversa de la desviación estándar; cuanto mayor sea el valor de \\(\\nu\\), más concentrada será la distribución beta. En notación estadística, nuestro modelo es:\n\n\\[\\begin{aligned}\n\\mu &\\sim \\text{Beta}(\\alpha_{\\mu}, \\beta_{\\mu}) \\\\\n\\nu &\\sim \\mathcal{HN}(\\sigma_{\\nu}) \\\\\n\\theta_i &\\sim \\text{Beta}(\\mu, \\nu) \\\\\ny_i &\\sim \\text{Bin}(n=1, p=\\theta_i)\n\\end{aligned}\\]\nObserven que estamos usando el subíndice \\(i\\) para indicar que el modelo tiene grupos con diferentes valores para algunos de los parámetros. Es decir, no todos los parámetros se comparten entre los grupos. Observen también que para este modelo estamos parametrizando la distribución a priori, Beta, en términos de \\(\\mu\\) y \\(\\nu\\) en lugar de \\(\\alpha\\) y \\(\\beta\\). Esta es una práctica común en estadística Bayesiana, ya que muchas veces \\(\\mu\\) y \\(\\nu\\) son parámetros más intuitivos que \\(\\alpha\\) y \\(\\beta\\).\n\nwith pm.Model() as modelo_j:\n    # hypyerpriors\n    μ = pm.Beta('μ', 1, 1)\n    ν = pm.HalfNormal('ν', 10)\n    # prior\n    θ = pm.Beta('θ', mu=μ, nu=ν, shape=len(N))\n    # likelihood\n    y = pm.Binomial('y',n=1, p=θ[group_idx], observed=data)\n\n    idata_j = pm.sample()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, ν, θ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:02&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\n\naz.plot_posterior(idata_j, figsize=(12, 5));\n\n\n\n\n\n\n\n\n\naz.summary(idata_j, kind=\"stats\")\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\n\n\n\n\nμ\n0.583\n0.096\n0.406\n0.763\n\n\nν\n12.366\n6.036\n1.922\n22.952\n\n\nθ[0]\n0.595\n0.079\n0.446\n0.741\n\n\nθ[1]\n0.597\n0.079\n0.447\n0.740\n\n\nθ[2]\n0.597\n0.080\n0.448\n0.743\n\n\n\n\n\n\n\n\n4.4.1 Contracción\nPara mostrarle una de las principales consecuencias de los modelos jerárquicos, necesitaré de su ayuda, así que únanse a mí en un breve experimento. Necesitaré que impriman y guarden el resumen calculado con az.summary(idata_h). Luego, quiero que vuelvan a ejecutar el modelo dos veces más después de realizar pequeños cambios en los datos sintéticos. Recuerden guardar el resumen después de cada ejecución. En total, tendremos tres corridas:\n\nUna ejecución configurando todos los elementos de G a 18\nUna ejecución configurando todos los elementos de G a 3\nUna última ejecución configurando un elemento en 18 y los otros dos en 3\n\nAntes de continuar, tómense un momento para pensar en el resultado de este experimento. Concéntrese en el valor medio estimado de \\(\\theta\\) en cada experimento. Con base en las dos primeras ejecuciones del modelo, ¿Podrías predecir el resultado para el tercer caso?\n\n  \nSi ponemos el resultado en una tabla, obtenemos algo más o menos así; recuerden que pueden ocurrir pequeñas variaciones debido a la naturaleza estocástica del proceso de muestreo:\n\n\n\nG\nMedia\n\n\n\n\n18, 18, 18\n0,6, 0,6, 0,6\n\n\n3, 3, 3\n0,11, 0,11, 0,11\n\n\n18, 3, 3\n0,55, 0,13, 0,13\n\n\n\nEn la primera fila, podemos ver que con 18 muestras con buena calidad sobre un total de 30, obtenemos un valor medio para \\(\\theta\\) de 0,6. Tenemos 3 valores por que \\(\\theta\\) es un vector de tres elementos, uno por grupo. Luego, en la segunda fila, tenemos solo 3 muestras de buena calidad sobre un total de 30 y la media de \\(\\theta\\) es 0,11. Estos resultados no deberían sorprendernos, nuestras estimaciones son prácticamente iguales a las medias empíricas. Lo interesante viene en la tercera fila. En lugar de obtener una mezcla de las estimaciones medias de \\(\\theta\\) de las otras dos filas, como 0,6, 0,11 y 0,11, obtenemos valores diferentes, a saber, 0,55, 0,13 y 0,13.\n¿A que se debe esto? ¿Cometimos un error en alguna parte? Nada de eso. Lo que estamos viendo es que las estimaciones se contrajeron hacia la media común. Esto está muy bien, de hecho ya lo hemos visto en los ejemplos anteriores. Este efecto es una consecuencia directa de nuestro modelo; mediante el uso de hiper priors, estamos estimando los parámetros de la distribución Beta a partir de los datos. Cada grupo está informando al resto, y cada grupo está siendo informado por la estimación de los demás.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#jerarquías-futboleras",
    "href": "03_Modelos_jerárquicos.html#jerarquías-futboleras",
    "title": "4  Modelado Jerárquico",
    "section": "4.5 Jerarquías futboleras",
    "text": "4.5 Jerarquías futboleras\nVarias estructuras de datos se prestan a descripciones jerárquicas que pueden abarcar múltiples niveles. Por ejemplo, jugadores profesionales de fútbol. Como en muchos otros deportes, los jugadores tienen diferentes posiciones dentro de la cancha. Es posible que nos interese estimar algunas métricas de habilidad para cada jugador, para las posiciones y para el grupo general de jugadores de fútbol profesional. Este tipo de estructura jerárquica también se puede encontrar en muchos otros dominios, como:\n\nInvestigación médica: Supongamos que estamos interesados en estimar la eficacia de diferentes fármacos para el tratamiento de una determinada enfermedad. Podemos categorizar a los pacientes según su información demográfica, la gravedad de la enfermedad y otros factores relevantes y construir un modelo jerárquico para estimar la probabilidad de curación o el éxito del tratamiento para cada subgrupo. Luego podemos usar los parámetros de la distribución de subgrupos para estimar la probabilidad general de curación o éxito del tratamiento para toda la población de pacientes.\nCiencias ambientales: Supongamos que estamos interesados en estimar el impacto de un determinado contaminante en un ecosistema particular. Podemos categorizar diferentes hábitats dentro del ecosistema (p. ej., ríos, lagos, bosques, humedales) y construir un modelo jerárquico para estimar la distribución de los niveles de contaminantes dentro de cada hábitat. Luego podemos usar los parámetros de la distribución del hábitat para estimar la distribución general de los niveles de contaminantes dentro del ecosistema.\nInvestigación de mercado: supongamos que estamos interesados en comprender el comportamiento de compra de los consumidores de un producto en particular en diferentes regiones. Podemos categorizar a los consumidores según su información demográfica (por ejemplo, edad, sexo, ingresos, educación) y construir un modelo jerárquico para estimar la distribución del comportamiento de compra para cada subgrupo. Luego podemos usar los parámetros de la distribución del subgrupo para estimar la distribución del comportamiento de compra para el grupo general de consumidores.\n\nVolviendo a nuestros jugadores de fútbol, hemos recopilado datos de la Premier League, Ligue 1, Bundesliga, Serie A y La Liga, en el transcurso de cuatro años (2017 a 2020). Supongamos que estamos interesados en la métrica de goles por tiro. Esto es lo que los estadísticos suelen llamar tasa de éxito, y podemos estimarlo con un modelo Binomial donde el parámetro \\(n\\) es el número de tiros y las observaciones \\(y\\) es el número de goles. Esto nos deja con un valor desconocido para \\(p\\), en ejemplos anteriores hemos estado llamando a este parámetro \\(\\theta\\) y hemos usado una distribución Beta para modelarlo. Haremos lo mismo ahora, pero jerárquicamente. \\(\\theta\\) representa la “tasa de éxito” de cada jugador y, por lo tanto, es un vector de tamaño n_jugadores. Usamos una distribución Beta para modelar \\(\\theta\\). Los hiperparámetros de la distribución Beta serán los vectores \\(\\mu_p\\) y \\(\\nu_p\\), que son vectores de tamaño 4, que representan las cuatro posiciones en nuestro conjunto de datos (defensor DF, centrocampista MF, delantero FW y arquero GK). Tendremos que indexar correctamente los vectores \\(\\mu_p\\) y \\(\\nu_p\\) para que coincidan con el número total de jugadores. Finalmente, tendremos dos parámetros globales, \\(\\mu\\) y \\(\\nu\\), que representan a los futbolistas profesionales.\nEl modelo PyMC se define en el siguiente bloque de código. El pm.Beta('mu', 1.7, 5.8) fue elegido con la ayuda de PreliZ como prior con el 90% de la masa entre 0 y 0.5. Este es un ejemplo de un prior poco informativo, ya que no hay duda de que una tasa de éxito de 0,5 es un valor alto. Las estadísticas deportivas están bien estudiadas y hay mucha información previa que podría usarse para definir priors más fuertes. Para este ejemplo, nos conformaremos con este prior. Una justificación similar se puede hacer para el prior pm.Gamma('nu', mu=125, sigma=50), que definimos como la distribución Gamma de máxima entropía con el 90% de la masa entre 50 y 200.\n\nfutbol = pd.read_csv(\"datos/futbol.csv\", dtype={'posición':'category'})\npos_idx = futbol.posición.cat.codes.values\npos_codes = futbol.posición.cat.categories\nn_pos = pos_codes.size\nn_jugadores = futbol.index.size\n\n\ncoords = {\"pos\": pos_codes}\nwith pm.Model(coords=coords) as modelo_futbol:\n    # Hiper-parámetros\n    μ = pm.Beta('μ', 1.7, 5.8) \n    ν = pm.Gamma('ν', mu=125, sigma=50)\n\n    \n    # Parámetros por posición\n    μ_p = pm.Beta('μ_p',\n                       mu=μ,\n                       nu=ν,\n                       dims = \"pos\")\n    \n    ν_p = pm.Gamma('ν_p', mu=125, sigma=50, dims=\"pos\")\n \n    # Parámetros por jugador\n    θ = pm.Beta('θ', \n                    mu=μ_p[pos_idx],\n                    nu=ν_p[pos_idx])\n    \n    _ = pm.Binomial('gs', n=futbol.tiros.values, p=θ, observed=futbol.goles.values)\n\n    idata_futbol = pm.sample(4000, target_accept=0.98)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [μ, ν, μ_p, ν_p, θ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [20000/20000 04:39&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 4_000 draw iterations (4_000 + 16_000 draws total) took 280 seconds.\nThe rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\nThe effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\n\n\n\npm.model_to_graphviz(modelo_futbol)\n\n\n\n\n\n\n\n\nEn el panel superior de la siguiente figura tenemos la distribución a posteriori del parámetro global \\(\\mu\\). La distribución a posteriori es cercana a 0.1. Lo que significa que, en general, para un jugador de fútbol profesional, la probabilidad de hacer un gol es en promedio del 10%. Este es un valor razonable, ya que hacer goles no es una tarea fácil y no estamos discriminando posiciones, es decir, estamos considerando jugadores cuyo papel principal no es el de hacer goles. En el panel central, tenemos el valor estimado de \\(mu_p\\) para la posición de defensa, como es de esperar, es más alto que el parámetro global \\(\\mu\\). En el panel inferior, tenemos el valor estimado de \\(\\theta\\) para Lionel Messi, con un valor de 0.17, que es más alto que el parámetro global \\(\\mu\\) y el valor de la posición delantera \\(\\mu_p\\). Esto también es de esperarse, ya que Lionel Messi es el mejor jugador de fútbol del mundo, y su rol principal es hacer goles.\n\n_, ax = plt.subplots(3, 1, figsize=(12, 7), sharex=True)\naz.plot_posterior(idata_futbol, var_names='μ', ax=ax[0])\nax[0].set_title(r\"Global mean\")\naz.plot_posterior(idata_futbol.posterior.sel(pos=\"FW\"), var_names='μ_p', ax=ax[1])\nax[1].set_title(r\"Forward position mean\")\naz.plot_posterior(idata_futbol.posterior.sel(θ_dim_0=1457), var_names='θ', ax=ax[2])\nax[2].set_title(r\"Messi mean\");\n\n\n\n\n\n\n\n\nLa siguiente figura muestra un forest plot para la distribución a posteriori del parámetro \\(\\mu_p\\). La distribución a posteriori para delanteros se centra en torno a 0.13, como ya vimos, y es la más alta de las cuatro. Esto tiene sentido ya que el papel de los jugadores en una posición delantera es hacer goles y asistencias. El valor más bajo de \\(\\mu_p\\) es para la posición de arquero. Esto esperable, ya que la función principal es evitar que el equipo contrario haga goles. El aspecto interesante es que la incertidumbre es muy alta, esto se debe a que tenemos muy pocos arqueros haciendo goles en nuestro conjunto de datos, 3 para ser precisos. Las distribuciones a posteriori para las posiciones de defensa y mediocampo están en el medio, siendo ligeramente más altas para los mediocampistas. Podemos explicar esto porque el papel principal de un mediocampista es defender y atacar, y por lo tanto la probabilidad de marcar un gol es mayor que la de un defensor pero menor que la de un delantero.\n\naz.plot_forest(idata_futbol, var_names=['μ_p'], combined=True, figsize=(12, 3));",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#resumen",
    "href": "03_Modelos_jerárquicos.html#resumen",
    "title": "4  Modelado Jerárquico",
    "section": "4.6 Resumen",
    "text": "4.6 Resumen\nEn este capítulo hemos descrito uno de los conceptos más importantes de este curso: los modelos jerárquicos. Podemos construir modelos jerárquicos cada vez que podamos identificar subgrupos en nuestros datos. En tales casos, en lugar de tratar los subgrupos como entidades separadas o ignorar los subgrupos y tratarlos como un solo gran-grupo, podemos construir un modelo para agrupar-parcialmente la información entre los grupos.\nEl principal efecto de este agrupamiento-parcial es que las estimaciones de cada subgrupo estarán sesgadas por las estimaciones del resto de los subgrupos. Este efecto se conoce como contracción y, en general, es un truco muy útil que ayuda a mejorar las inferencias haciéndolas más conservadoras (ya que cada subgrupo informa a los demás acercando el resto de las estimaciones hacia él) y más informativas, obtenemos estimaciones a nivel de subgrupo y el nivel del grupo.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "03_Modelos_jerárquicos.html#ejercicios",
    "href": "03_Modelos_jerárquicos.html#ejercicios",
    "title": "4  Modelado Jerárquico",
    "section": "4.7 Ejercicios",
    "text": "4.7 Ejercicios\n\nRepetí el ejercicio que hicimos con el model_j, pero sin la estructura jerárquica. Compará los resultados con los obtenidos de forma jerárquica.\nCreá una versión jerárquica para el ejemplo de las propinas agrupando parcialmente los días de la semana.\nAplicá al menos uno de los modelos visto en este capítulo a datos propios o de tu interés.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Modelado Jerárquico</span>"
    ]
  },
  {
    "objectID": "04_Diagnóstico_MCMC.html",
    "href": "04_Diagnóstico_MCMC.html",
    "title": "5  Diagnóstico del muestreo",
    "section": "",
    "text": "5.1 Revisitando el teorema de Bayes\nLos objetivos de este capítulo son:\nEl teorema de Bayes, tiene una formulación que a primera vista parece muy inocente. Tan solo cuatro términos relacionados por una multiplicación y una división.\n\\[\n\\underbrace{p(\\boldsymbol{\\theta} \\mid \\boldsymbol{Y})}_{\\text{posterior}} = \\frac{\\overbrace{p(\\boldsymbol{Y} \\mid \\boldsymbol{\\theta})}^{\\text{likelihood}}\\; \\overbrace{p(\\boldsymbol{\\theta})}^{\\text{prior}}}{\\underbrace{{p(\\boldsymbol{Y})}}_{\\text{marginal likelihood}}}\n\\]\nPareciera que no sirve de mucho y que es fácil de calcular. Sin embargo, ambas apreciaciones son incorrectas. El resto de los capítulos se centran en mostrar contra ejemplos a la primera aseveración, así que veamos por que a veces su cálculo puede ser difícil y se requieren métodos numéricos.\nLa razón está en el cálculo del likelihood marginal. El cual toma la forma de una integral.\n\\[\n{p(\\boldsymbol{Y}) = \\int_{\\boldsymbol{\\Theta}} p(\\boldsymbol{Y} \\mid \\boldsymbol{\\theta})p(\\boldsymbol{\\theta}) d\\boldsymbol{\\theta}}\n\\]\nEsta integral suele ser difícil de resolver. Veamos, esta expresión nos dice que debemos evaluar el likelihood para cada uno de los posibles valores del prior \\(\\theta\\). En la práctica esa tarea no siempre es sencilla o barata de realizar. Si \\(\\theta\\) representa un solo parámetro desconocido (como en el modelo beta-binomial) entonces solo hay que resolver una integral, pero si \\(\\theta\\) representa dos parámetros (como en el modelo Gaussiano) entonces la integral será doble. En definitiva la integral tendrá tantas dimensiones como parámetros el modelo. En general las integrales en grandes dimensiones no son simples de resolver.\nAlgo que puede ser poco intuitivo es que esto se contrapone con el cálculo de la distribución a posteriori. Para obtener una buena aproximación a la distribución a posteriori bastaría con concentrarse en las regiones donde tanto la contribución del prior como del likelihood son relativamente grandes (área gris en la siguiente figura), en general esto es lo que hacen la mayoría de los métodos numéricos. En cambio esta misma aproximación puede conducir a errores en el cálculo del likelihood marginal\nPara algunos problemas es posible calcular la distribución a posteriori de forma analítica. Esto ya lo vimos para el modelo beta-binomial donde la posterior es:\n\\[\np(\\theta \\mid y) \\propto \\operatorname{Beta}(\\alpha_{a priori} + y, \\beta_{a priori} + N - y)\n\\]\nPara esos casos suele ser posible también calcular el marginal likelihood de forma analítica.\nPero en general no tenemos expresiones analíticas y entonces debemos confiar en métodos numéricos.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Diagnóstico del muestreo</span>"
    ]
  },
  {
    "objectID": "04_Diagnóstico_MCMC.html#calculando-la-distribución-a-posteriori",
    "href": "04_Diagnóstico_MCMC.html#calculando-la-distribución-a-posteriori",
    "title": "5  Diagnóstico del muestreo",
    "section": "5.2 Calculando la distribución a posteriori",
    "text": "5.2 Calculando la distribución a posteriori\nHay muchas formas de calcular la distribución a posteriori\n\n Conjugación \n Método de Laplace \n Aproximación de Laplace Anidada Integrada (INLA) \n Inferencia Variacional (VI) \nMarkov Chain Monte Carlo (MCMC)\n Sequential Monte Carlo \n…\n\nPor ahora solo hablaremos de los métodos MCMC ya que, por el momento, son los métodos más generales. Pero para entender de forma más simple que es lo que hacen estos métodos conviene empezar desde otro método, conocido como método de la grilla.\n\n5.2.1 Método de la grilla\nEl método de grilla es un enfoque simple de fuerza bruta. La idea central es que incluso si no somos capaces de calcular todo la distribución a posteriori, en general si somos capaces de evaluar el a priori y el likelihood punto-a-punto.\nPara un modelo con un solo parámetro el método de la grilla se puede resumir de la siguiente forma:\n\nEncuentre un intervalo razonable para el parámetro (el prior debe dar algunas pistas).\nDefina una grilla de puntos (generalmente equidistantes) en ese intervalo.\nPara cada punto de la grilla, evalúe el prior y el likelihood en ese punto y multiplique\n\nLa siguiente figura ilustra este método\n\n\n\nEl siguiente bloque de código (que ya usamos antes) implementa un método de la grilla interactivo\n\ndef a_posteriori_grilla(grilla=10, a=1, b=1, caras=6, tiradas=9):\n    grid = np.linspace(0, 1, grilla)\n    prior = pz.Beta(a, b).rv_frozen.pdf(grid)\n    likelihood = pz.Binomial(n=tiradas, p=grid).rv_frozen.pmf(caras)\n    posterior = likelihood * prior\n    posterior /= posterior.sum()\n    _, ax = plt.subplots(1, 3, sharex=True, figsize=(12, 3))\n    ax[0].set_title('caras = {}\\ntiradas = {}'.format(caras, tiradas))\n    for i, (e, e_n) in enumerate(zip([prior, likelihood, posterior], ['a priori', 'likelihood', 'a posteriori'])):\n        ax[i].set_yticks([])\n        ax[i].plot(grid, e, 'o-', label=e_n)\n        ax[i].legend()\n\n\ninteract(a_posteriori_grilla, grilla=ipyw.IntSlider(min=2, max=100, step=1, value=15), a=ipyw.FloatSlider(min=1, max=7, step=1, value=1), b=ipyw.FloatSlider(\n    min=1, max=7, step=1, value=1), caras=ipyw.IntSlider(min=0, max=20, step=1, value=6), tiradas=ipyw.IntSlider(min=0, max=20, step=1, value=9));\n\n\n\n\n\n\n\n\n\n\n\nUtilizando la función a_posteriori_grilla podemos comprobar que para obtener una mejor aproximación se puede aumentar el número de puntos de la cuadrícula. Esta estrategia puede ser útil en unas pocas dimensiones (parámetros). Pero no escala. En la siguiente figura vemos que si necesitamos 4 puntos en 1D, para mantener ese mismo grado de precisión necesitaremos 16 puntos en 2D y 64 en 3D. La velocidad con la que crecen la cantidad de evaluaciones necesarias crece demasiado rápido, una grilla de 100 en 10 dimensiones requeriría de 1e+20 puntos!\n\n\n\nComo si eso no fuera poco, la cosa es más complicada. En espacios de alta dimensión se dan una serie de fenómemos conocidos como concentración de la medida o en versión marketinera la maldición de la dimensionalidad 👻. Por ejemplo:\n\nEn una hiper-esfera casi todo el volumen está en la superficie. Es decir, si uno pelara una hiper-naranja se quedaría con hambre!\nEn un hiper-cubo la masa se concentra en las esquinas\nEn una Gaussiana hiper-dimensional casi toda la masa está lejos de la moda\n\nLa idea de estimar la distribución a posteriori evaluando, punto a punto, likelihood y prior es muy buena, pero la idea de construir una grilla predefinida solo funciona en muy bajas dimensiones.\nPero no todo está perdido, que tal si mantenemos la idea de la evaluación puntual, pero nos concentramos en las regiones que importan?\n\n\n5.2.2 Markov Chain Monte Carlo (MCMC)\nEsta es una familia muy extensa de métodos utilizados para resolver muchos problemas, entre los que se encuentra el cálculo de la distribución a posteriori. Conceptualmente se puede pensar a estos métodos como generalizaciones del método de la grilla, ya que también se basan en la posibilidad de realizar evaluaciones punto a punto del prior y likelihood. La diferencia crucial es que en vez de utilizar una grilla predefinida el método realiza evaluaciones que progresivamente se concentran en regiones de alta probabilidad. No solo eso si no que eventualmente el método devolverá muestras de forma proporcional a la probabilidad a posteriori. Es decir si una región es 3 veces más probable que otra obtendremos 3 veces más muestras de esa región que de la otra.\nA muy grandes rasgos, y dado un punto inicial arbitrario, los métodos MCMC, constan de dos pasos.\n\nGenerar un nuevo punto a partir de perturbar uno preexistente.\nAceptar o rechazar ese nuevo punto de forma probabilista y comparando la probabilidad del punto preexistente y del nuevo punto.\n\nEsta es esencialmente la receta, la forma exacta en que hacemos cada uno de estos pasos define los distintos métodos dentro de la familia MCMC. Veamos uno de los más sencillos de entender y de implementar.\n\n\n5.2.3 Metropolis-Hastings\nMetropolis-Hastings no es un algoritmo muy moderno o particularmente eficiente, pero Metropolis-Hastings es simple de entender y también proporciona una base para comprender métodos más sofisticados y poderosos.\nEl algoritmo Metropolis-Hasting se define de la siguiente manera:\n\nInicialice el valor del parámetro \\(\\boldsymbol{X}\\) en \\(x_i\\)\nUtilice una distribución de propuesta \\(q(x_{i + 1} \\mid x_i)\\) para generar un nuevo valor \\(x_{i + 1}\\)\nCalcule la probabilidad de aceptar el nuevo valor como:\n\n\\[\np_a (x_{i + 1} \\mid x_i) = \\min \\left(1, \\frac{p(x_{i + 1}) \\; q(x_i \\mid x_{i + 1})} {p(x_i) \\; q (x_{i + 1} \\mid x_i)} \\right)\n\\]\n\nSi \\(p_a &gt; R\\) donde \\(R \\sim \\mathcal{U}(0, 1)\\), guarde el nuevo valor; de lo contrario, guarde el anterior.\nIterar de 2 a 4 hasta que se haya generado una muestra suficientemente grande\n\nEl algoritmo Metropolis es muy general y se puede usar en aplicaciones no Bayesianas, pero para la presente discusión, \\(p(x_i)\\) es la densidad del posterior evaluada en el valor del parámetro \\(x_i\\). Una forma de simplificar un poco el método es notar que si \\(q\\) es una distribución simétrica, los términos \\(q(x_i \\mid x_{i + 1})\\) y \\(q(x_{i + 1} \\mid x_i)\\) se cancelarán (conceptualmente significa que es igualmente probable que vayamos de \\(x_{i+1}\\) a \\(x_i\\) o de \\(x_{i}\\) a \\(x_{i+1}\\)), dejando solo un cociente entre el posterior evaluado en dos puntos. Este algoritmo siempre aceptará moverse de una región de baja probabilidad a una más alta y aceptará probabilísticamente moverse de una región de alta a una baja probabilidad.\n¡Otra observación importante es que el algoritmo Metropolis-Hastings no es un método de optimización! No nos importa encontrar el valor del parámetro con la máxima probabilidad, queremos explorar la distribución \\(p\\). Es decir aún si el método encuentra un máximo aún puede moverse a regiones de probabilidades más bajas.\nPara hacer las cosas más concretas, intentemos resolver el modelo Beta-Binomial.\n\\[\\begin{aligned}\n    \\theta \\sim &\\; \\text{Beta}(\\alpha, \\beta) \\\\\n    Y \\sim &\\; \\text{Bin}(n=1, p=\\theta)\n\\end{aligned}\\]\nEste modelo tiene una solución analítica. Pero supongamos que no sabemos cómo calcular el posterior y, por lo tanto, implementaremos el algoritmo Metropolis-Hastings usando Python.\n\ndef post(θ, Y, α=1, β=1):\n    if 0 &lt;= θ &lt;= 1:\n        prior = stats.beta(α, β).pdf(θ)\n        like  = stats.bernoulli(θ).pmf(Y).prod()\n        prob = like * prior\n    else:\n        prob = -np.inf\n    return prob\n\nTambién necesitamos datos, por lo que generaremos algunos datos falsos aleatorios para este propósito.\n\nY = stats.bernoulli(0.7).rvs(20)\n\nY finalmente ejecutamos nuestra implementación del algoritmo Metropolis-Hastings:\n\nn_iters = 1000\ncan_sd = 0.05\nα = β =  1\nθ = 0.5 \ntrace = {\"θ\":np.zeros(n_iters)}\np2 = post(θ, Y, α, β)\n\nfor iter in range(n_iters):\n    θ_can = stats.norm(θ, can_sd).rvs(1)\n    p1 = post(θ_can, Y, α, β)  \n    pa = p1 / p2\n\n    if pa &gt; stats.uniform(0, 1).rvs(1):\n        θ = θ_can\n        p2 = p1\n\n    trace[\"θ\"][iter] = θ\n\nEn la línea 9 del bloque de código anterior generamos una propuesta muestreando una distribución Normal con desviación estándar can_sd. En la línea 10 evaluamos el posterior en el nuevo valor generado θ_can y en la línea 11 calculamos la probabilidad de aceptación. En la línea 17 guardamos un valor de θ en el array trace. Dependiendo del resultado de la comparación en la línea 13, el valor guardado será nuevo o repetiremos el anterior.\nEl primer panel de la siguiente figura muestra cada valor muestreado en cada paso, y el panel de la derecha el histograma de esos valores. El resultado parece razonable. Nada mal para unas pocas lineas de código!\n\n_, axes = plt.subplots(1,2, sharey=True)\naxes[0].plot(trace['θ'])\naxes[0].set_ylabel('θ', rotation=0, labelpad=15)\naxes[1].hist(trace['θ'], orientation=\"horizontal\", density=True)\naxes[1].set_xticks([]);\n\n\n\n\n\n\n\n\nAcá pueden ver una versión interactiva de un Metropolis-Hastings\n\n\n5.2.4 MH adaptativo\nEn teoría, y si tomaramos infinitas muestras, cualquier distribución de propuesta sería útil. Sin embargo, en la práctica la eficiencia cambia drásticamente de acuerdoa la distribución de propuesta que utilicemos. Es por ello que para obtener un MH realmente eficiente es necesario ajustar hiperparámetros como la distribución de propuesta para cada problema. Esto se puede hacer dedicando una cierta cantidad de pasos (tuning), estos pasos luego se descartan\n\nAún el RWMH adaptativo puede tener problemas para ciertas problemas\n\nParámetros muy correlacionados\nAlta dimensión (muchos parámetros)\nGeometrías complejas\n\n\nExisten otras formas de generar aún mejores propuestas\n\n\n5.2.5 Montecarlo Hamiltoniano (HMC)\nEn vez de proponer nuevos puntos al azar podemos usar una analogía física. Simulamos una particula sin fricción que se mueve por la distribución a posteriori. Esto se puede hacer si conocemos el Hamiltoniano del sistema. En términos simples, un hamiltoniano es una descripción de la energía total de un sistema físico.\n\\[\n\\underbrace{H(\\overbrace{\\mathbf{q}}^{\\text{posición}}, \\overbrace{\\mathbf{p}}^{\\text{momemtum}})}_{\\text{Hamiltoniano}}  = \\underbrace{K(\\mathbf{p}, \\mathbf{q})}_{\\text{Energía cinética}} + \\underbrace{V(\\mathbf{q})}_{\\text{Energía potencial}}\n\\]\nLa posición \\(q\\) se corresponde con los valores que puedan tomar los parámetros del modelo probabilista y la energía potencial es la probabilidad a posteriori de esos valores. El momentum, en cambio, lo sacamos de la galera. Es simplemente una variable auxiliar que nos permite calcular el hamiltoniano y “mover” el sistema.\nEntonces, a grandes rasgos un HMC tiene dos pasos que se repiten hasta obtener la cantidad de muestras necesarias:\n\nGenerar un nuevo punto a partir del hamiltoniano\nAceptar o rechazar ese nuevo punto de forma probabilista y comparando la probabilidad del punto preexistente y del nuevo punto.\n\nPor qué es buena idea usar el hamiltoniano? En un MH la propuesta es aleatoria, es como querer encontrar algo en una habitación desconocida a oscuras, hay que ir a tientas. Mientras que con el Hamiltoniano es como tener una linterna, ahora podemos ver que hay en la habitación, al menos localmente a donde apuntemos con la linterna. Veamos, una explicación un poco más matemática. Resolver el hamiltoniano implica calcular derivadas, las derivadas nos dan información sobre la curvatura de una función, por ejemplo el cálculo de la primer derivada en un punto nos dice hacia donde (de)crece una función. Si siquieramos la derivada buscando, hacia donde crece la función, eventualmente llegariamos a un máximo (asumiendo que este existe). Esto se llama maximizar una función. Al agregar el momemtum podemos hacer algo más interesante, podemos simular un trayectoria que explore la distribución a posteriori. Esto es importante en estadística Bayesiana, ya que no solo queremos el máximo, si no una descripción de toda la distribución a posteriori.\n\n\n\nUn HMC tiene varios hipeparámetros, por ejemplo para simular una trayectoria tenemos que hacerlo de a pasos discretos, mientras más pequeños los pasos más fidedigna la simulación, pero también más costosa. Otro hiperparámetro es la longitud de cada simulación si esta es muy corta demoraremos mucho tiempo en explorar la distribución a posteriori, pero si está es muy larga corremos el riesgo de volver al mismo lugar.\nEn la siguiente figura se muestran tres ejemplos. A la izquierda el paso es muy corto, por lo que la exploración no es eficiente, en el centro el paso es correcto pero la simulación demasiado larga, tanto que volvemos al punto de partida, a la derecha tanto el paso como el tiempo de simulación son adecuamos y la propuesta genera un punto alejado en el espacio de los parámetros, pero con alta probabilidad de aceptación. De hecho en este ejemplo la probabilidad de aceptación es 1, ya que la pdf es la misma para el punto de partida que para el punto final.\n\n\n\nEste es otro ejemplo, en cada caso se muestra una densidad de probabilidad que va de más probable (amarillo) a menos probable (violeta), las flechas naranjas indican la trayectoria calculada de a pasos. En en el primero caso vemos una trayectoria elíptica tan larga que vuelve al punto de partida. En el segundo ejemplo vemos que el paso no es adecuado, esto produce una simulación inestable que se manifiesta en divergencias de la trayectoria correcta. En este último caso, y como en el ejemplo anterior, vemos que tanto el paso como el tiempo de simulación son adecuamos y la propuesta genera un punto alejado en el espacio de los parámetros, pero con alta probabilidad de aceptación (1 en este caso).\n\n\n\nCuando los hiper-parámetros de un HMC son adecuados, el muestreo es muy eficiente, mucho más eficiente que un MH. Los valores de los hiper-parámetros dependen esencialmente de la geometría de la distribución a posteriori, por lo que no existe un solo conjunto de hiper-parámetros mejor que los demás. Es por ello que en la práctica estos se calculan de forma adaptativa corriendo una cantidad de pasos de HMC los cuales se utilizan para ajustar eso hiper-parámetros automáticamente y luego se descartan. NUTS (No U-Turn sampler), el sampler por defecto en PyMC es un HMC dinámico y adaptativo. El nombre proviene de una rutina del método que evita que las trayectorias den vueltas en U.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Diagnóstico del muestreo</span>"
    ]
  },
  {
    "objectID": "04_Diagnóstico_MCMC.html#diagnósticos-generales",
    "href": "04_Diagnóstico_MCMC.html#diagnósticos-generales",
    "title": "5  Diagnóstico del muestreo",
    "section": "5.3 Diagnósticos generales",
    "text": "5.3 Diagnósticos generales\nAsintóticamente los MCMC ofrencen la respuesta correcta, el problema es que asintóticamente estamos todos muertos! En la práctica se hace necesario contar con métodos de diagnóstico que permitan evaluar si el muestreo es correcto para muestras finitas. Si nos ponemos en pesimistas este es un problema sin solución, ya que es imposible demostrar que una muestra es correcta, solo podemos probar que NO lo es. Entonces lo que buscamos es poder recolectar evidencia a favor de la ausencia de problemas. Esto nos va a conducir a establecer algunos valores umbrales, es decir si el diagnositico \\(D\\) da un valor superior a \\(m\\), tenemos un problema con nuestra muestra. Esto también es problemático, ya que establecer umbrales estrictos es en general arbitrario, salvo para casos triviales. Supongamos que yo me invento un diagnóstico para la calvice. El método es simple, hay que contar pelos. Es claro que 0 pelos corresponde a un pelado y 150.000 no, ya que esto se estima como la cantidad de pelos promedio en una cabeza promedio (sea lo que eso sea). Pero que pasa si alguien tiene 122 o 4126 pelos? A continuación veremos algunos valores umbrales, es importante entonces tomarlos con pinzas.\n\n5.3.1 En la teoría confiamos\nLa teoría describe cierto comportamiento de los MCMC, muchos diagnósticos están basados en evaluar si los resultados teóricos se verifican empíricamente. Por ejemplo, la teoría de MCMC dice que:\n\nEl valor inicial es irrelevante, siempre debemos llegar al mismo resultado\nLas muestras no son realmente independientes, pero el valor de un punto solo depende del punto anterior, no hay correlaciones de largo alcance.\nSi miramos la muestra como una secuencia no deberíamos ser capaces de encontrar patrón alguno\n\nPor ej, para una muestra lo suficientemente larga, la primera porción debe ser indistinguible de la última (y la mismo cualquier otra combinación de regiones).\n\nPara un mismo problema cada muestra generada va a ser diferente de las otras, pero a los fines prácticos las muestras deberían ser indistinguibles unas de otros\n\n\n\n5.3.2 Trace plots\nEste es un gráfico muy común. Para cada parámetro graficamos su valor (eje-y) en cada iteración (eje-x). Lo esperable es no ver ningún patrón, solo ruido como en primer panel de la siguiente figura (marco turquesa).\n\n\n\nEn cambio los otros tres paneles (marco magenta) muestran problemas. De izquierda a derecha y arriba a abajo:\n\nEl segundo panel muestra que el muestreo es “pegajoso”, le toma muchos pasos a la cadena moverse de valores altos a valores bajos, es difícil predecir que sucedería si seguimos corriendo, la cadena se movería hacia arriba nuevamente, se estabilizaría en valos bajos, continuaría bajando aún más?\nEl tercer panel muestra una cadena menos “pegajosa”, pero también daría la impresión que aún no ha terminado de estabilizarse\nEl último panel, en cambio, muestra que hay una región donde el sampler se mueve bien, pero cada tanto “salta” a estados donde se queda atascado. Quizá esto se deba a una distribución a posteriori multimodal o dificultades en el sampler para explorar regiones con distinta curvatura.\n\nComo ya vimos por defecto PyMC corre más de una cadena, por lo que un traceplot ideal debería verse como esto:\n\n\n\nArviZ permite graficar trace-plots usando la función az.plot_trace(). Por defecto obtenemos el trace a la derecha y un KDE (para variables continuas) y un histograma (para discretas) a la izquierda\n\n\n\n\n\n5.3.3 Rank plots\nLos trace plots son muy comunes, pero existe una alternativa más moderna llamada rank plots. La idea básica es la siguiente. Para un parámetro tomamos todas las cadenas y ordenamos los valores de menor a mayor y les asignamos un rango es decir al valor más bajo le ponemos 0, al que sigue 1 y así hasta llegar a un número que será igual a la cantidad de muestras totales (cantidad de cadenas multiplicado por la cantidad de muestras por cadena). Luego reagrupamos los rankings según las cadenas que les dieron origen y para cada cadena hacemos un histograma. Si las cadenas fuesen indistinguibles esperariamos que los histogramas sean uniformes. Ya que no hay razón para que una cadena tenga más rankings bajos (o medios o altos) que el resto.\nLa siguiente figura muestra 4 ejemplos, donde solo uno (marco cyan) no muestra problemas\n\n\n\nEn ArviZ los rank plots se pueden obtener con la función az.plot_rank o pasando un argumento a plot_trace az.plot_trace(⋅, kind=\"rank_bars\")\n\n\n5.3.4 \\(\\hat R\\) (R sombrero)\nLos gráficos suelen ser útiles para descrubir patrones, pero aveces queremos números, por ejemplo al evaluar rápidamente mucho parámetros. \\(\\hat R\\) es la respuesta a la pregunta. Lograron las cadenas mezclarse adecuadamente? Pero también me gusta pensarlo como el jurado en un concurso de trace (o rank) plots. La versión implementada en ArviZ hace varias cosas debajo del capot, pero la idea central es que compara la varianza entre cadenas con la varianza dentro de cada cadena.\n\n\n\nIdealmente \\(\\hat R = 1\\), en la práctica \\(\\hat R \\lessapprox 1.01\\) son considerados seguros y en la primer fase de modelado valores más altos como \\(\\hat R \\approx 1.1\\) pueden estár bien.\nUsando ArviZ podemos obtener \\(\\hat R\\) usando az.rhat(⋅), az.summary(⋅) y az.plot_forest(⋅, r_hat=True)\n\n\n5.3.5 Gráfico de autocorrelación\nIdealmente, una muestra debe ser independiente e idénticamente distribuida (iid). Por definición, las muestras MCMC están correlacionadas. En la práctica, queremos muestras con baja autocorrelación. En ArviZ obtenemos este gráfico con la función az.plot_autocorr()\n\ncadenas_defectuosas = {\"cadenas_defectuosas\": np.linspace(0, 1, 1000).reshape(2, -1)}\naz.plot_autocorr(cadenas_defectuosas);\n\n\n\n\n\n\n\n\n\ncadenas_adecuadas = {\"cadena_adecuadas\": pz.Uniform(0, 1).rvs(size=(2, 500))}\naz.plot_autocorr(cadenas_adecuadas);\n\n\n\n\n\n\n\n\n\n\n5.3.6 Tamaño de muestra efectivo (ESS)\nComo las muestras de un MCMC están correlacionadas la cantidad de información “útil” es menor que una muestra del mismo tamaño pero iid.\n \n\n\n\nPodemos estimar el tamaño de muestra efectivo (ESS), es decir, el tamaño de una muestra con la cantidad equivalente de información pero sin autocorrelación. Esto es útil para determinar si la muestra que tenemos es lo suficientemente grande. Se recomienta que el ESS sea superior a 100 por cadena. Es decir para para 4 cadenas queremos un mínimo de 400.\nCon ArviZ podemos obtenerlo az.ess(⋅), az.summary(⋅) y az.plot_forest(⋅, ess=True)\n\npd.concat((az.ess(cadenas_defectuosas).to_pandas(),\n           az.ess(cadenas_adecuadas).to_pandas()))\n\ncadenas_defectuosas      2.282878\ncadena_adecuadas       910.058723\ndtype: float64\n\n\nVemos que az.summary(⋅) devuelve dos valores de ESS, ess_bulk y ess_tail. Esto se debe a que, distintas regiones del espacio de los parámetros pueden tener distinto valor de ESS, ya que no todas las regiones son muestreadas con la misma eficiencia. Intuitivamente uno puede pensar que al muestrear una distribución como una Gaussiana es más fácil obtener mejor calidad de muestra alrededor de la media que de las colas, simplemente por que tenemos más muestras de esa región.\n\npd.concat([az.summary(cadenas_adecuadas, kind=\"diagnostics\"),\n           az.summary(cadenas_defectuosas, kind=\"diagnostics\")])\n\n\n\n\n\n\n\n\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\ncadena_adecuadas\n0.010\n0.007\n910.0\n988.0\n1.00\n\n\ncadenas_defectuosas\n0.198\n0.165\n2.0\n11.0\n3.05\n\n\n\n\n\n\n\nSi las muestras de MCMC las vamos a usar para calcular valores centrales como medias o medianas entonces tenemos que asegurarnos que el ess_bulk sea lo suficientemente algo, en cambio, si queremos calcular intervalos como un HDI 95% hay que asegurarse que ess_tail sea adecuado.\nArviZ ofrece varias funciones vinculadas al ESS. Por ejemplo si queremos evaluar el desempeño del sampler para varias regiones al mismo tiempo podemos usar az.plot_ess.\n\n_, axes = plt.subplots(1, 2, figsize=(10,4), sharey=True)\naz.plot_ess(cadenas_adecuadas, ax=axes[0])\naz.plot_ess(cadenas_defectuosas, ax=axes[1]);\n\n\n\n\n\n\n\n\nUna forma simple de aumentar el ESS es aumentar la cantidad de muestras, pero podría darse el caso que el ESS crezca muy lento con el número de muestras, por lo que aún si aumentaramos 10 veces la cantidad de muestras estaríamos por debajo de lo requerido. Una forma de estimar “cuanto nos falta” es usar az.plot_ess(⋅, kind=\"evolution\"). Este gráfico nos muestra como fue cambiando el ESS con cada muestra, lo que nos permite hacer proyecciones. En el siguiente ejemplo vemos que para cadenas_adecuadas el ESS crece lineamente con el número de muestras mientras que para cadenas_defectuosas no crece para nada. Este último caso no hay esperanzas de mejorar el ESS simplemente aumentando la cantidad de muestras.\n\n_, axes = plt.subplots(1, 2, figsize=(10,4), sharey=True)\naz.plot_ess(cadenas_adecuadas, kind=\"evolution\", ax=axes[0])\naz.plot_ess(cadenas_defectuosas,  kind=\"evolution\", ax=axes[1]);\n\n\n\n\n\n\n\n\n\n\n5.3.7 Error estándard del Monte Carlo (MCSE)\nUna ventaja del ESS es que no tiene escala, da igual si un parámetro varía entre 0.1 y 0.2 y otro entre -2000 y 5000, un ESS de 400 tiene el mismo significado en ambos casos. En modelos con muchos parámetros rápidamente podemos indentificar cuales parámetros son más problemáticos. Sin embargo, a la hora de reportar resultados no es muy informativo saber si el ESS fue de 1372 o 1501. En cambio nos gustaría saber el orden del error que estamos cometiendo al aproximar la distribución a posterori. Esa información la da el error estándard del Monte Carlo (MCSE). Al igual que el ESS, el MCSE tiene en cuenta la autocorrelación de las muestras. Este error debe estar por debajo de la precisión deseada en nuestros resultados. Es decir si para un parámetro el MCSE es 0.1, no tiene sentido reportar que la media de ese parámetro es 3.15. Ya que tranquilamente el valor correcto podría estar entre 3.4 y 2.8.\nUna de las cantidades devueltas por az.summary(⋅) es mc_error.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Diagnóstico del muestreo</span>"
    ]
  },
  {
    "objectID": "04_Diagnóstico_MCMC.html#diagnóstico-de-algoritmos-basados-en-gradiente",
    "href": "04_Diagnóstico_MCMC.html#diagnóstico-de-algoritmos-basados-en-gradiente",
    "title": "5  Diagnóstico del muestreo",
    "section": "5.4 Diagnóstico de algoritmos basados en gradiente",
    "text": "5.4 Diagnóstico de algoritmos basados en gradiente\nDebido a su funcionamiento interno, algoritmos como NUTS ofrecen algunas pruebas específicas que no están disponibles para otros métodos. Generalmente estas pruebas son muy sensibles\nPara ejemplificar esto vamos a cargar dos InferenceData de modelos pre-calculados. Los detalles de como se generaron estos idatas no son relevantes por el momento. Solo diremos que son dos modelos que son matemáticamente equivalente pero parametrizados de formas distintas. En este caso la parametrización afecta la eficiencia del sampler. El modelo centrado es muestreado de forma más eficiente que el modelo no centrado.\n\nidata_cm = az.load_arviz_data(\"centered_eight\")\nidata_ncm = az.load_arviz_data(\"non_centered_eight\")\n\n\n5.4.1 Energía de transición vs energía marginal\nPodemos pensar en un Monte Carlo Hamiltoniano como un proceso de dos pasos\n* Un muestreo determinista (siguiendo el hamiltoniano)\n* Una caminata aleatorio en el espacio del momentum\nSi la distribución de la energía de transición es similar a la distribución de la energía marginal, entonces NUTS es capaz de generar muestras de la distribución marginal de la energía que sean casi independientes entre transiciones. Esto lo podemos evaluar visualmente o numéricamente, calculando el Bayesian Fraction of Missing Information (BFMI), como se muestra en la siguiente figura.\n\n_, axes = plt.subplots(1, 2, sharey=True, sharex=True, figsize=(12, 4), constrained_layout=True)\n\nfor ax, idata, nombre in zip(axes.ravel(), (idata_cm, idata_ncm), (\"centrado\", \"no centrado\")):\n    az.plot_energy(idata, ax=ax)\n    ax.set_title(nombre)\n\n\n\n\n\n\n\n\n\n\n5.4.2 Divergencias\nUna ventaja de NUTS es que falla con el estilo. Esto sucede por ejemplo al intentar pasar de regiones de baja curvatura a regiones de alta curvatura. En estos casos las trayectorias numéricas pueden divergir. En esencia esto sucede por que en esos casos no existe un único conjunto de hiper-parámetros que permita el muestreo eficiente de ambas regiones. Por lo que una de la regiones es muestreada adecuandamente y cuando el sampler se mueve hacia la otra región falla. Las trayectorias numéricas divergentes son identificadores extremadamente sensibles de vecindarios patológicos.\nEl siguiente ejemplo muestra dos cosas el modelo no centrado muestra varias divergencias (círculos turquesas) agrupados en una región. En el modelo centrado, que no tiene divergencias, se puede ver que alrededor de esa misma región hay muestras para valores más pequeños de tau. Es decir el modelo no centrado falla en muestrear una región, pero al menos avisa que está teniendo problemas en muestrear esa región!\n\n_, axes = plt.subplots(1, 2, sharey=True, sharex=True, figsize=(10, 5), constrained_layout=True)\n\n\nfor ax, idata, nombre in zip(axes.ravel(), (idata_cm, idata_ncm), (\"centrado\", \"no_centrado\")):\n    az.plot_pair(idata, var_names=['theta', 'tau'], coords={'school':\"Choate\"}, kind='scatter',\n                 divergences=True, divergences_kwargs={'color':'C1'},\n                 ax=ax)\n    ax.set_title(nombre)\n\n\n\n\n\n\n\n\n\naz.plot_parallel(idata_cm, figsize=(12, 4));",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Diagnóstico del muestreo</span>"
    ]
  },
  {
    "objectID": "04_Diagnóstico_MCMC.html#qué-hacer-cuando-los-diagnósticos-no-dan-bien",
    "href": "04_Diagnóstico_MCMC.html#qué-hacer-cuando-los-diagnósticos-no-dan-bien",
    "title": "5  Diagnóstico del muestreo",
    "section": "5.5 Qué hacer cuando los diagnósticos no dan bien?",
    "text": "5.5 Qué hacer cuando los diagnósticos no dan bien?\n\n\n Más muestras o más pasos de tuning. Esto solo suele ser útil cuando los problemas son menores\n Burn-in. Software moderno como PyMC utiliza una cantidad de muestras para ajustar los hiper-parámetros de los métodos de muestreo. Por defecto esas muestras son eliminadas, por lo que en general no es necesario hacer Burn-in manualmente. \n Cambiar el método de muestreo! \nReparametrizar el modelo\n Mejorar las distribuciones a priori \n\nEl teorema popular de la estadística computacional: Cuando tienes problemas computacionales, a menudo hay un problema con tu modelo. La recomendación NO es cambiar la distribución a priori para mejorar la calidad del muestreo. La recomendación es que si el muestreo es malo, quizá el modelo también lo sea. En ese caso, podemos pensar en mejorar el modelo, una forma de mejorarlo es usar conocimiento previo para mejorar las distribuciones a priori.\n\nAlgunos modelos pueden expresarse en más de una forma, todas matemáticamente equivalentes. En esos casos, algunas parametrizaciones pueden ser más eficientes que otras. Por ejemplo, como veremos más adelante con modelos lineales jerárquicos.\nEn el caso de las divergencias, estas suelen eliminarse aumentando la tasa de aceptación (pm.sample(..., target_accept=x) x&gt;0.8)\nLeer los mensajes de advertencia y sugerencias de PyMC! ;-)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Diagnóstico del muestreo</span>"
    ]
  },
  {
    "objectID": "04_Diagnóstico_MCMC.html#ejercicios",
    "href": "04_Diagnóstico_MCMC.html#ejercicios",
    "title": "5  Diagnóstico del muestreo",
    "section": "5.6 Ejercicios",
    "text": "5.6 Ejercicios\n\nExplicá en tus propias palabras que es el ESS, el \\(\\hat R\\) y el MCSE. ¿Qué información nos dan?\n¿Qué significa que el \\(\\hat R\\) sea 1.01? ¿Qué significa que sea 1.5? ¿Qué significa que sea 1.9?\n¿Qué significa que el ESS sea 100? ¿Qué significa que sea 1000? ¿Qué significa que sea 10000?\nElegí al menos un modelo de los capítulos anteriores, genera un traceplot, un rank plot. Calcula el ESS, el \\(R \\hat\\) y el \\(MCSE\\). Ofrece una breve interpretación de los resultados de los diagósticos.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Diagnóstico del muestreo</span>"
    ]
  },
  {
    "objectID": "04_Diagnóstico_MCMC.html#para-seguir-leyendo",
    "href": "04_Diagnóstico_MCMC.html#para-seguir-leyendo",
    "title": "5  Diagnóstico del muestreo",
    "section": "5.7 Para seguir leyendo",
    "text": "5.7 Para seguir leyendo\nExploratory Analysis of Bayesian Models Trabajo en Progreso!\nA Conceptual Introduction to Hamiltonian Monte Carlo\nRank-normalization, folding, and localization\nComputing Bayes: Bayesian Computation from 1763 to the 21st Century.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Diagnóstico del muestreo</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html",
    "href": "05_Regresión_lineal.html",
    "title": "6  Regresión lineal",
    "section": "",
    "text": "6.1 La idea central en regresión lineal\nLa música, ya sea la Suite para violonchelo N° 1 de Bach, el pibe cantina de damas gratis o Libertango de Piazzolla, se construye con patrones recurrentes. Las mismas escalas, progressiones de acordes, riffs, etc. aparecen una y otra vez dando lugar a un maravilloso paisaje sonoro capaz de provocar y modular toda la gama de emociones humanas. De manera similar, el universo estadístico está compuesto de patrones recurrentes, pequeños motivos que aparecen una y otra vez. En este capítulo, vamos a ver uno de los más populares y útiles de ellos, el modelo lineal. Este es un modelo muy útil en sí mismo y también el componente básico de muchos otros modelos. Es probable que algunos de los siguientes términos te resulten familiares: regresión lineal simple, regresión múltiple, regresión logística, ANOVA, ANCOVA. Todos estos métodos son variaciones del mismo motivo subyacente, el modelo de regresión lineal. En este capítulo, cubriremos los siguientes temas:\nSupongamos que tenemos una variable \\(X\\), y a partir de esta queremos predecir o modelar una variable \\(Y\\). Además, estás variables se encuentran apareadas \\(\\{(x_1,y_1), (x_2,y_2), \\dots (x_n,y_n)\\}\\). En el caso más simple \\(X\\) e \\(Y\\) son variables aleatorias continuas y unidimensionales, usando un lenguaje de programación, como Python, las representaríamos usando arrays de dimensión 1 y de tipo flotante.\nLas variable \\(Y\\) suele recibir distintos nombres como variable dependiente, predicha o respuesta, mientras que \\(X\\) recibe nombres como variable independiente, predictora o de entrada. En Machine learning es común hablar de features en vez de variables y es común pensar que una regresión lineal es un ejemplo de aprendizaje supervisado.\nAlgunas situaciones típicas en las que se pueden utilizar modelos de regresión lineal:\nEn un capítulo previo vimos el modelo normal, que (omitiendo las distribuciones a priori) definimos como:\n\\[\nY \\sim \\mathcal{N}(\\mu, \\sigma)\n\\]\nLa idea central de la regresión lineal es extender este modelo, agregando una variable predictora \\(X\\) a la estimación de la media \\(\\mu\\):\n\\[\n\\begin{aligned}\n\\mu = \\alpha + \\beta X \\\\\nY &\\sim \\mathcal{N}(\\mu, \\sigma)\n\\end{aligned}\n\\]\nEste modelo dice que existe una relación lineal entre la variable \\(X\\) y la variable \\(Y\\). Pero esa relación no es determinista, debido al término de ruido \\(\\sigma\\). Además, el modelo dice que la media de \\(Y\\) es una función lineal de \\(X\\), con intercepto \\(\\alpha\\) y pendiente \\(\\beta\\). El intercepto nos dice el valor de \\(Y\\) cuando \\(X=0\\), la pendiente nos dice el cambio en \\(Y\\) por unidad de cambio en \\(X\\). Debido a que no conocemos los valores de \\(\\alpha\\), \\(\\beta\\) o \\(\\sigma\\), debmos determinar una distribución a priori para estos parámetros.\nUna suposición típica cuando se establecen priors para modelos lineales es suponer que son independientes. Esta suposición simplifica enormemente la elección de priors, ya que en vez de definir una dristribución conjunta para los 3 parámetros, podemos definir 3 distribuciones por separado. Al menos en principio, \\(\\alpha\\) y \\(\\beta\\) pueden tomar cualquier valor en los reales, por lo que es común usar a prioris normales para ellos. En cambio \\(\\sigma\\) debe ser un número positivo, por lo que es común usar distribuciónes como seminormal, exponencial, gamma-inversa, etc.\nLos valores que puede tomar el intercepto pueden variar mucho de un problema a otro. Por ejemplo, yo solía trabajar con problemas donde era esperable que \\(\\alpha\\) estuviera alrededor de cero y con una desviación estándar muy por debajo de 1. Pero esta experiencia (casi anecdótica) es dificil de trasladar a cualquier otro problema. Con respecto a la pendiente (\\(\\beta\\)), puede ser más fácil tener una noción informada. Usualmente tenemos una idea del signo de la pendiente, por ejemplo esperamos que el peso de un animal aumente, en promedio, con la variable largo (o altura). Para \\(\\sigma\\), podemos establecerlo en un valor grande en la escala de la variable \\(Y\\), por ejemplo, 2 veces el valor de su desviación estándar. Debemos tener cuidado al usar los datos observados para estimar a prioris, por lo general, está bien si los datos se usan para evitar el uso de a prioris muy restrictivos. Si no tenemos demasiado conocimiento del parámetro, tiene sentido asegurarse que la distribución a priori sea realmente vaga. En cambio, si queremos definir distribuciones a priori más informativas, entonces no deberíamos obtener esa información de los datos observados, sino que deberíamos obtenerla de nuestro conocimiento del dominio.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#bicicletas-lineales",
    "href": "05_Regresión_lineal.html#bicicletas-lineales",
    "title": "6  Regresión lineal",
    "section": "6.2 Bicicletas lineales",
    "text": "6.2 Bicicletas lineales\nAhora que tenemos una idea general de cómo luce un modelo lineal Bayesiano, tratemos de cimentar esta idea con un ejemplo.\nVamos a empezar muy sencillo, tenemos un registro de temperaturas y del número de bicicletas alquiladas en una ciudad. Queremos modelar la relación entre la temperatura y el número de bicicletas alquiladas. Usaremos bike-sharing dataset del repositorio UCI Machine Learning Repository. El conjunto de datos original contiene 17379 registros, cada registro tiene 17 variables, pero para este ejemplo usaremos tan solo 348 registros y dos variables temperatura y alquiladas. La variable ‘temperatura’ es la temperatura en Celsius y ‘alquiladas’ es el número de bicicletas alquiladas.\nCarguemos los datos y grafiquémoslos\n\nbicis = pd.read_csv(\"datos/bicis.csv\")\n\nbicis.plot(x=\"temperatura\", y=\"alquiladas\", kind=\"scatter\");\n\n\n\n\n\n\n\n\nConstruyamos un modelo lineal bayesiano para estos datos. La temperatura será nuestra variable independiente (nuestra “X”) y el número de bicicletas alquiladas será nuestra variable dependiente (nuestra “Y”). Vamos a utilizar el siguiente modelo:\n\nwith pm.Model() as modelo_bl:\n    α = pm.Normal('α', mu=0, sigma=100)\n    β = pm.Normal('β', mu=0, sigma=10)\n    σ = pm.HalfCauchy('σ', 10)\n    μ = pm.Deterministic('μ', α + β * bicis.temperatura)\n    _ = pm.Normal('y_pred', mu=μ, sigma=σ, observed=bicis.alquiladas)\n\npm.model_to_graphviz(modelo_bl)\n\n\n\n\n\n\n\n\nAntes de calcular la distribución a posteriori tomemos un momento para leer el código línea por línea y asegurarnos de entender lo que está pasando. Comparemos el código con la representación visual del modelo.\nComo ya dijimos, este modelo es similar a un modelo normal, la diferenciea principal es que la media se modela como una función lineal de la temperatura. El intercepto es \\(\\alpha\\) y la pendiente es \\(\\beta\\). El término de ruido es \\(\\sigma\\) y la media es \\(\\mu\\).\nAlgo importante a notar es que la variable \\(\\mu\\) es una variable determinista (pm.Deterministic). Le llamamos así ya que una vez conocidos los valores de \\(\\alpha\\) y \\(\\beta\\), el valor de \\(\\mu\\) queda determinado. En vez que μ = pm.Deterministic('μ', α + β * bikes.temperatura) podríamos haber escrito μ = α + β * bicicletas.temperatura o incluso _ = pm.Normal('y_pred', mu=α + β * bicicletas.temperatura, sigma=ϵ, observado=bicicletas.alquiladas) y el modelo sería el mismo. La única razón de usar pm.Deterministic, es que de esta forma le pedimos a PyMC que guarde los valores de \\(\\mu\\) en el InferenceData.\n\nwith modelo_bl:\n    idata_bl = pm.sample(random_seed=123)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α, β, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:03&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\nVeamos un trace plot de idata_bl combinando todas las cadenas en una sola curva\n\naz.plot_trace(idata_bl, combined=True);  \n\n\n\n\n\n\n\n\nAlgo que suele resultar confuso o inesperado para muchos estudiantes es la gráfica para \\(\\mu\\), por qué hay tantas curvas? Porque a cada observaciones le corresponde una curva, para cáda valor de \\(X\\), hacemos\n\\[\n\\mu_i = \\alpha + \\beta + x_i\n\\]\nEs decir un valor de \\(\\mu\\) por cada valor de \\(X\\), además como \\(\\alpha\\) y \\(\\beta\\) son distribuciones. Entonces cada \\(\\mu_i\\) es también una distribución.\nPodemos comprobar que hay 348 distribuciones para \\(\\mu\\) inspeccionado el InfereceData, por ejemplo:\n\ncadenas, muestras, mus = idata_bl.posterior[\"μ\"].shape\nf\"{cadenas=}, {muestras=}, {mus=}\"\n\n'cadenas=4, muestras=1000, mus=348'\n\n\n\n6.2.1 Interpretando la media a posteriori\nHabiendo aclarado este punto vamos a focalizarnos en intepretar los parámetros del modelo, pero omitiendo μ. Hagamos un gráfico de las distribuciones a posteriori marginales para \\(\\alpha\\), \\(\\beta\\) y \\(\\sigma\\),\n\naz.plot_posterior(idata_bl, var_names=['~μ'], figsize=(10, 3));\n\n\n\n\n\n\n\n\nSi solo leemos las medias de cada distribución podemos decir que \\(\\mu = 69 + 7,9 X\\). Con esta información podemos decir que el valor esperado de bicicletas alquiladas cuando la temperatura es 0 es de 69 y por cada grado de temperatura el número de bicicletas alquiladas aumenta en 7,9. Así que para una temperatura de 28 grados esperamos alquilar \\(69 + 7.9 * 28 \\approx 278\\) bicicletas. Este es nuestro valor esperado, pero la distribución a posteriori también nos informa sobre la incertidumbre en torno a esta estimación. Por ejemplo, el HDI 94% para \\(\\beta\\) es (6,1, 9,7), por lo que por cada grado de temperatura el número de bicicletas alquiladas podría aumentar de 6 a unas 10.\nIncluso si omitimos la incertidumbre a posteriori, y solo prestaramos atención a las medias, tenemos incertidumbre sobre el número de bicicletas alquiladas debido al valor de \\(\\sigma\\) de 170. Entonces, si decimos que para una temperatura de 28 grados, esperamos alquilar 278 bicicletas, no debería sorprendernos que el número real resulte estar entre \\(\\approx 100\\) y \\(\\approx 500\\) bicicletas.\nAhora vamos a crear algunas gráficas que nos ayudarán a visualizar la incertidumbre combinada de estos parámetros. En una primer lectura recomiendo saltearse el código y focalizarse en las figuras y su interpretación.\nLa siguiente figura tiene dos paneles. Ambos muestran del número medio de bicicletas alquiladas en función de la temperatura. La diferencia está en como se representa la incertidumbre. Para el panel izquierdo, tomamos 50 muestras de la distribución a posteriori de \\(\\mu\\) y las dibujamos como líneas individuales. Para el panel derecho tomamos todas las muestras a posteriori de \\(\\mu\\) y las usamos para calcular el HDI 94%.\n\nposterior = az.extract(idata_bl, num_samples=50)\nx_plot = xr.DataArray(np.linspace(bicis.temperatura.min(), bicis.temperatura.max(), 50), dims=\"plot_id\")\nlinea_media = posterior['α'].mean() + posterior['β'].mean() * x_plot\nlineas = posterior['α'] + posterior['β'] * x_plot\nhdi_lines = az.hdi(idata_bl.posterior['μ'])\n\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 4), sharey=True)\naxes[0].plot(bicis.temperatura, bicis.alquiladas,  '.', color=\"0.75\",  zorder=-3)\nlines_ = axes[0].plot(x_plot, lineas.T, c='C1', alpha=0.5, label='lineas')\nplt.setp(lines_[1:], label=\"_\")\naxes[0].plot(x_plot, linea_media, c='C0', label='linea media')\naxes[0].set_xlabel('temperatura')\naxes[0].set_ylabel('bicis alquiladas')\naxes[0].legend()\n\naxes[1].plot(bicis.temperatura, bicis.alquiladas, '.', color=\"0.75\",  zorder=-3)\nidx = np.argsort(bicis.temperatura.values)\naxes[1].fill_between(bicis.temperatura[idx], hdi_lines[\"μ\"][:,0][idx], hdi_lines[\"μ\"][:,1][idx],\n                     color=\"C1\", label='HDI', alpha=0.5)\naxes[1].plot(x_plot, linea_media, c='C0', label='linea media')\naxes[1].set_xlabel('temperatura')\naxes[1].legend();\n\n\n\n\n\n\n\n\nAmbos paneles transmiten esencialmente la misma información, si volvemos a correr el código para generar el gráfico, las lineas serán diferentes, porque las 50 muestras serán distintas cada vez (salvo que fijemos una semilla). Sin embargo, el área sombreada será la misma, porque estamos utilizando todas las muestras ya calculadas. Si reajustamos el modelo (sin fijar una semillar), no solo obtendremos líneas diferentes, sino que el área sombreada también podría cambiar, pero la diferencia debería ser muy pequeña, caso contrario es probable que necesitemos más muestras (incrementar la candidad de draws en pm.sample(.))\nOK, pero ¿Por qué mostramos dos gráficos ligeramente diferentes si transmiten la misma información? Bueno, por un lado para resaltar que hay diferentes formas de representar la incertidumbre. ¿Cuál es mejor? Como de costumbre, eso depende del contexto, el área sombreada es una buena opción, es muy común y es simple de calcular e interpretar. Pero pueden darse situaciones donde nos interese mostrar muestras individuales de la distribución a posteriori, por ejemplo, la mayoría de las líneas podrían abarcar una determinada región, pero algunas podrían tener una pendiente muy alta. Un área sombreada podría opacar esta información. Al mostrar muestras individuales, puede ser una buena idea animarlas si las está mostrando en una presentación o en un video (ver Hypothetical Outcome Plots para obtener más información al respecto).\nOtra razón para mostrar estas figuras es que vean diferentes formas de extraer información de la distribución a posteriori. Si prestamos atención al código veremos que en la primera línea usamos az.extract toma la dimensión chain y draw y las apila en una sola dimensión sample, que puede ser útil para el procesamiento posterior. Además, usamos el argumento num_samples para solicitar una submuestra de la distribución a posteriori. Por defecto az.extract opera sobre el grupo posterior de un InferenceData. Si deseamos extraer información de otro grupo, podemos usar el argumento group. En la segunda línea, definimos un DataArray llamado x_plot, con valores igualmente espaciados empezando por la temperatura mínima observada y terminado en la máxima observada. La razón para crear un DataArray es poder usar las capacidades de alineación automática de Xarray (esto lo hacemos en las próximas dos líneas). Si usaramos un arreglo NumPy necesitariamos agregar dimensiones adicionales, lo que puede resultar confuso, la mejor manera de entender completamente lo que quiero decir es definir x_plot = np.linspace(bikes.temperature.min(), bikes.temperature.max()) e intentar rehacer el gráfico. En la tercer y cuarta línea de código, calculamos la media del posterior de \\(\\mu\\) para cada valor de x_plot las líneas individuales, respectivamente. Podríamos haber usado posterior['μ'], pero en su lugar reescribimos explícitamente el modelo lineal, lo hacemos para ser explícitos y con la esperanza de que te ayude a obtener más intuición sobre los modelos lineales.\n\n\n6.2.2 Interpretando las predicciones a posteriori\n¿Qué pasa si no solo estamos interesados en el valor esperado (promedio), sino que queremos pensar en términos de predicciones, es decir, en términos de bicicletas alquiladas? Bueno, para eso podemos usar la distribución predictiva a posteriori. Después de ejecutar la siguiente línea de código idata_lb contendrá un nuevo grupo posterior_predictive con una variable y_pred que representa la distribución predictiva a posteriori para el número de bicicletas alquiladas.\n\npm.sample_posterior_predictive(idata_bl, model=modelo_bl, extend_inferencedata=True, random_seed=123)\n\nSampling: [y_pred]\n\n\n\n\n\n\n\n    \n      \n      7.35% [294/4000 00:00&lt;00:00]\n    \n    \n\n\n\n            \n              \n                arviz.InferenceData\n              \n              \n              \n            \n                  \n                  posterior\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (chain: 4, draw: 1000, μ_dim_0: 348)\nCoordinates:\n  * chain    (chain) int64 0 1 2 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 992 993 994 995 996 997 998 999\n  * μ_dim_0  (μ_dim_0) int64 0 1 2 3 4 5 6 7 ... 340 341 342 343 344 345 346 347\nData variables:\n    α        (chain, draw) float64 73.42 59.66 105.3 101.8 ... 66.61 54.51 91.06\n    β        (chain, draw) float64 7.644 8.523 7.453 6.508 ... 7.588 9.33 6.69\n    σ        (chain, draw) float64 158.8 164.1 177.3 177.7 ... 179.7 171.3 169.5\n    μ        (chain, draw, μ_dim_0) float64 98.49 69.77 91.31 ... 113.0 144.5\nAttributes:\n    created_at:                 2023-06-14T19:47:12.763025\n    arviz_version:              0.15.1\n    inference_library:          pymc\n    inference_library_version:  5.3.1\n    sampling_time:              3.1656246185302734\n    tuning_steps:               1000xarray.DatasetDimensions:chain: 4draw: 1000μ_dim_0: 348Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])μ_dim_0(μ_dim_0)int640 1 2 3 4 5 ... 343 344 345 346 347array([  0,   1,   2, ..., 345, 346, 347])Data variables: (4)α(chain, draw)float6473.42 59.66 105.3 ... 54.51 91.06array([[ 73.42493495,  59.66146328, 105.30661831, ...,  86.34407703,\n         52.13609249,  46.6912159 ],\n       [ 51.07711738,  60.0991086 ,  57.05908282, ...,  64.36408103,\n         62.11259321,  79.29587821],\n       [ 89.62434939,  38.06868629,  43.45446492, ...,  53.22270313,\n         52.63631534,  49.41615315],\n       [ 85.43886153,  74.92029525,  93.92565962, ...,  66.60543029,\n         54.50932903,  91.05801517]])β(chain, draw)float647.644 8.523 7.453 ... 9.33 6.69array([[ 7.64371429,  8.52294793,  7.45278168, ...,  6.64794795,\n         8.66049442,  8.89524135],\n       [ 9.13508929,  9.17475969,  7.85022692, ...,  8.74030562,\n         7.66118314,  7.9627473 ],\n       [ 6.69511288,  9.32164185,  8.7747248 , ...,  9.27577966,\n        10.19153659,  9.70369026],\n       [ 7.48102715,  7.13436707,  6.48973363, ...,  7.58828659,\n         9.33015254,  6.69023439]])σ(chain, draw)float64158.8 164.1 177.3 ... 171.3 169.5array([[158.82715774, 164.07548464, 177.32797301, ..., 162.66349201,\n        171.82795902, 162.15154898],\n       [164.28367687, 163.81114793, 174.88247442, ..., 172.19881704,\n        173.36118572, 169.56808389],\n       [166.38825808, 172.10488338, 162.33551845, ..., 182.2517708 ,\n        184.45444216, 184.70103686],\n       [167.23414142, 166.51661423, 171.89238525, ..., 179.74754127,\n        171.30089775, 169.47478241]])μ(chain, draw, μ_dim_0)float6498.49 69.77 91.31 ... 113.0 144.5array([[[ 98.48836712,  69.7690919 ,  91.3087509 , ..., 105.68065948,\n          98.48461903, 134.4299879 ],\n        [ 87.60786724,  55.58509951,  79.6024012 , ...,  95.62746752,\n          87.60368801, 127.68374538],\n        [129.74399011, 101.74209469, 122.74371378, ..., 136.75662594,\n         129.74033564, 164.78782387],\n        ...,\n        [108.14243135,  83.16449007, 101.89812223, ..., 114.39776526,\n         108.13917153, 139.40184464],\n        [ 80.53350587,  47.99394286,  72.39884466, ...,  88.68252944,\n          80.5292592 , 121.25614339],\n        [ 75.85835504,  42.43679128,  67.50319985, ...,  84.22826186,\n          75.85399325, 117.68479952]],\n\n       [[ 81.03070826,  46.70797806,  72.45026782, ...,  89.6262981 ,\n          81.02622887, 123.98494522],\n        [ 90.18277713,  55.71099567,  81.56507493, ...,  98.81569452,\n          90.17827829, 133.32354887],\n        [ 82.79966159,  53.30446871,  75.42607143, ...,  90.18627036,\n          82.79581223, 119.7123284 ],\n...\n        [ 83.63761211,  48.78627428,  74.92502349, ...,  92.36558344,\n          83.63306373, 127.25339135],\n        [ 86.0539545 ,  47.76189738,  76.48121033, ...,  95.64360005,\n          86.04895708, 133.9757278 ],\n        [ 81.23416378,  44.7750628 ,  72.11964572, ...,  90.3647742 ,\n          81.22940558, 126.8620277 ]],\n\n       [[109.96884911,  81.86082865, 102.94204227, ..., 117.0080623 ,\n         109.96518079, 145.14549633],\n        [ 98.31359835,  71.50806328,  91.61240367, ..., 105.02662448,\n          98.31010001, 131.86021013],\n        [115.20523554,  90.82174356, 109.10953455, ..., 121.31169894,\n         115.2020533 , 145.72070696],\n        ...,\n        [ 91.48711725,  62.97609726,  84.35956337, ...,  98.62725535,\n          91.48339633, 127.16811062],\n        [ 85.10252448,  50.04689466,  76.33886431, ...,  93.88165754,\n          85.09794944, 128.97397123],\n        [112.99502503,  87.85820341, 106.71099694, ..., 119.29014803,\n         112.99174447, 144.453274  ]]])Indexes: (3)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))μ_dim_0PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       338, 339, 340, 341, 342, 343, 344, 345, 346, 347],\n      dtype='int64', name='μ_dim_0', length=348))Attributes: (6)created_at :2023-06-14T19:47:12.763025arviz_version :0.15.1inference_library :pymcinference_library_version :5.3.1sampling_time :3.1656246185302734tuning_steps :1000\n                      \n                  \n            \n            \n            \n                  \n                  posterior_predictive\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:       (chain: 4, draw: 1000, y_pred_dim_2: 348)\nCoordinates:\n  * chain         (chain) int64 0 1 2 3\n  * draw          (draw) int64 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999\n  * y_pred_dim_2  (y_pred_dim_2) int64 0 1 2 3 4 5 6 ... 342 343 344 345 346 347\nData variables:\n    y_pred        (chain, draw, y_pred_dim_2) float64 6.174 62.22 ... 156.2\nAttributes:\n    created_at:                 2023-06-14T19:47:24.995345\n    arviz_version:              0.15.1\n    inference_library:          pymc\n    inference_library_version:  5.3.1xarray.DatasetDimensions:chain: 4draw: 1000y_pred_dim_2: 348Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])y_pred_dim_2(y_pred_dim_2)int640 1 2 3 4 5 ... 343 344 345 346 347array([  0,   1,   2, ..., 345, 346, 347])Data variables: (1)y_pred(chain, draw, y_pred_dim_2)float646.174 62.22 73.61 ... 193.0 156.2array([[[ 6.17429192e+00,  6.22249250e+01,  7.36071372e+01, ...,\n          3.66116209e+02,  3.21016884e+02, -1.55095665e+01],\n        [ 1.57985181e+02,  1.18344250e+02,  3.57522893e+02, ...,\n          1.55553781e+02, -1.98740334e+01,  1.03411892e+02],\n        [ 1.16618879e+02, -2.87161476e+02,  3.29840411e+02, ...,\n         -2.36543190e+02, -8.36251491e+01,  1.34242950e+02],\n        ...,\n        [ 2.00591625e+02, -1.71329029e+02,  2.36808023e+02, ...,\n          2.15565513e+02,  3.48362992e+02,  3.28741934e+02],\n        [-1.52911744e+02,  6.19037587e+01,  1.21205762e+02, ...,\n         -2.60563711e+02, -9.64138839e+01,  2.67628322e+02],\n        [ 1.07211963e+01, -5.09611875e+01,  7.06390120e+01, ...,\n          2.56060957e+02, -9.33413781e+01, -1.60039621e+02]],\n\n       [[ 2.69620570e+01,  9.82230442e+01,  2.91179564e+02, ...,\n         -4.47706729e+01,  3.19796072e+02,  6.81870722e+01],\n        [-1.44902240e+02, -6.26351731e+00,  1.40180035e+02, ...,\n          9.49711833e+01,  2.49392219e+02,  4.66466817e+01],\n        [ 2.43567605e+02,  1.49061140e+02,  2.20036929e+01, ...,\n          1.38445537e+02, -2.59101858e+02,  9.72412084e+01],\n...\n        [-1.41683236e+02,  8.52987334e+01, -1.14967307e+02, ...,\n          3.43634762e+02,  1.99393450e+02,  3.35325405e+02],\n        [ 3.62409432e+02,  1.90336927e+02,  2.99038249e+02, ...,\n         -9.27488017e+01, -2.71075279e+01,  5.61122509e+01],\n        [-3.18469351e+01,  2.81360695e+01, -1.81039148e+02, ...,\n          2.96879231e+02,  2.17329779e+02,  3.19208699e+02]],\n\n       [[ 2.29923571e+02, -1.79313136e+00,  6.29007694e+01, ...,\n          5.56380457e+01, -1.41896443e+02,  1.72866939e+02],\n        [ 2.41295969e+02,  1.78910388e+01, -4.95076962e+01, ...,\n          2.10784800e+02,  4.10754508e+01, -2.49498879e+02],\n        [ 1.50508044e+01,  7.44277610e+01,  3.00592699e+02, ...,\n          1.66167430e+02, -1.43379849e+01, -7.14110213e+01],\n        ...,\n        [ 1.63996374e+02, -2.79235955e+01,  1.11918791e+02, ...,\n          1.34986203e+02,  6.40185848e+01,  4.52309060e+01],\n        [ 3.28772684e+02, -1.02767332e+01,  6.27130964e+01, ...,\n          1.24291374e+02, -4.86968456e+01,  1.26289542e+02],\n        [ 8.45411950e+01,  8.72467596e+00, -1.88172642e+02, ...,\n          4.28097235e+02,  1.93045122e+02,  1.56209180e+02]]])Indexes: (3)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))y_pred_dim_2PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       338, 339, 340, 341, 342, 343, 344, 345, 346, 347],\n      dtype='int64', name='y_pred_dim_2', length=348))Attributes: (4)created_at :2023-06-14T19:47:24.995345arviz_version :0.15.1inference_library :pymcinference_library_version :5.3.1\n                      \n                  \n            \n            \n            \n                  \n                  sample_stats\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:                (chain: 4, draw: 1000)\nCoordinates:\n  * chain                  (chain) int64 0 1 2 3\n  * draw                   (draw) int64 0 1 2 3 4 5 ... 994 995 996 997 998 999\nData variables: (12/17)\n    smallest_eigval        (chain, draw) float64 nan nan nan nan ... nan nan nan\n    energy                 (chain, draw) float64 2.292e+03 ... 2.293e+03\n    index_in_trajectory    (chain, draw) int64 -2 2 5 -1 -2 4 ... -3 3 4 -2 -4 5\n    process_time_diff      (chain, draw) float64 0.000445 ... 0.0005429\n    perf_counter_start     (chain, draw) float64 2.499e+04 ... 2.499e+04\n    max_energy_error       (chain, draw) float64 0.08135 -0.06315 ... 0.3578\n    ...                     ...\n    n_steps                (chain, draw) float64 3.0 7.0 7.0 3.0 ... 7.0 7.0 7.0\n    acceptance_rate        (chain, draw) float64 0.9538 0.9985 ... 0.7794 0.8962\n    perf_counter_diff      (chain, draw) float64 0.0004448 ... 0.0005429\n    largest_eigval         (chain, draw) float64 nan nan nan nan ... nan nan nan\n    energy_error           (chain, draw) float64 0.06236 -0.06208 ... -0.2526\n    reached_max_treedepth  (chain, draw) bool False False False ... False False\nAttributes:\n    created_at:                 2023-06-14T19:47:12.772411\n    arviz_version:              0.15.1\n    inference_library:          pymc\n    inference_library_version:  5.3.1\n    sampling_time:              3.1656246185302734\n    tuning_steps:               1000xarray.DatasetDimensions:chain: 4draw: 1000Coordinates: (2)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])Data variables: (17)smallest_eigval(chain, draw)float64nan nan nan nan ... nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])energy(chain, draw)float642.292e+03 2.293e+03 ... 2.293e+03array([[2292.38465229, 2292.87857743, 2296.83507411, ..., 2293.18134085,\n        2293.46476754, 2293.45301363],\n       [2292.72643713, 2293.24223652, 2293.91795788, ..., 2292.89153382,\n        2293.16993969, 2292.45660984],\n       [2293.53792431, 2293.841904  , 2294.87522651, ..., 2296.67502416,\n        2298.25521888, 2297.20715421],\n       [2292.92607978, 2292.00036353, 2295.95017591, ..., 2294.56324392,\n        2295.15392614, 2293.31094089]])index_in_trajectory(chain, draw)int64-2 2 5 -1 -2 4 ... -3 3 4 -2 -4 5array([[-2,  2,  5, ..., -4, -3,  4],\n       [-2, -1, -6, ...,  3,  2, -2],\n       [ 4,  6, -4, ...,  2,  1, -1],\n       [-3, -1,  1, ..., -2, -4,  5]])process_time_diff(chain, draw)float640.000445 0.0006886 ... 0.0005429array([[0.00044496, 0.00068857, 0.00067229, ..., 0.00063633, 0.00063186,\n        0.00128031],\n       [0.00046821, 0.00063233, 0.00103732, ..., 0.00058068, 0.00112002,\n        0.00058488],\n       [0.00069321, 0.00066953, 0.00071448, ..., 0.0003417 , 0.00033897,\n        0.00076204],\n       [0.00084621, 0.00036101, 0.00070714, ..., 0.00057203, 0.00054977,\n        0.00054292]])perf_counter_start(chain, draw)float642.499e+04 2.499e+04 ... 2.499e+04array([[24985.47780454, 24985.47853234, 24985.47930832, ...,\n        24986.44330516, 24986.44403722, 24986.44474768],\n       [24985.29355114, 24985.29430276, 24985.29504159, ...,\n        24986.26302622, 24986.26405341, 24986.26530755],\n       [24985.41262598, 24985.41341522, 24985.41417183, ...,\n        24986.23957287, 24986.2399961 , 24986.24041476],\n       [24985.53120626, 24985.53216995, 24985.53261914, ...,\n        24986.58293694, 24986.58357949, 24986.58419572]])max_energy_error(chain, draw)float640.08135 -0.06315 ... 0.7102 0.3578array([[ 0.08135002, -0.06314573,  2.65701788, ..., -0.08585883,\n        -0.09571448,  0.52633044],\n       [ 0.16019574,  0.5271793 , -0.58674622, ...,  0.25821806,\n         0.68699359, -0.0957667 ],\n       [ 0.19397877,  1.42807737,  0.27717663, ...,  1.21665203,\n         1.15620248, -1.56591606],\n       [ 0.22721783,  0.07821551, -0.17150318, ..., -0.20146886,\n         0.71023613,  0.35783961]])step_size_bar(chain, draw)float640.5271 0.5271 ... 0.5269 0.5269array([[0.52706571, 0.52706571, 0.52706571, ..., 0.52706571, 0.52706571,\n        0.52706571],\n       [0.61751936, 0.61751936, 0.61751936, ..., 0.61751936, 0.61751936,\n        0.61751936],\n       [0.52500971, 0.52500971, 0.52500971, ..., 0.52500971, 0.52500971,\n        0.52500971],\n       [0.52687759, 0.52687759, 0.52687759, ..., 0.52687759, 0.52687759,\n        0.52687759]])lp(chain, draw)float64-2.292e+03 ... -2.292e+03array([[-2292.31218358, -2291.46251508, -2296.66232091, ...,\n        -2292.38811041, -2291.61891404, -2292.47256581],\n       [-2292.05909703, -2292.82904493, -2292.48827727, ...,\n        -2291.86093814, -2292.03634414, -2291.71536542],\n       [-2291.87548445, -2292.72076885, -2293.00496567, ...,\n        -2294.00524692, -2297.70072343, -2295.47763832],\n       [-2291.68012935, -2291.64101552, -2292.21666314, ...,\n        -2292.77661558, -2292.40257033, -2291.84911534]])step_size(chain, draw)float640.4355 0.4355 ... 0.5838 0.5838array([[0.43553391, 0.43553391, 0.43553391, ..., 0.43553391, 0.43553391,\n        0.43553391],\n       [0.43077189, 0.43077189, 0.43077189, ..., 0.43077189, 0.43077189,\n        0.43077189],\n       [0.42874467, 0.42874467, 0.42874467, ..., 0.42874467, 0.42874467,\n        0.42874467],\n       [0.58379123, 0.58379123, 0.58379123, ..., 0.58379123, 0.58379123,\n        0.58379123]])diverging(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])tree_depth(chain, draw)int642 3 3 2 2 3 2 2 ... 2 3 3 3 3 3 3 3array([[2, 3, 3, ..., 3, 3, 4],\n       [2, 2, 3, ..., 2, 3, 2],\n       [3, 3, 3, ..., 2, 2, 3],\n       [3, 2, 3, ..., 3, 3, 3]])n_steps(chain, draw)float643.0 7.0 7.0 3.0 ... 7.0 7.0 7.0 7.0array([[ 3.,  7.,  7., ...,  7.,  7., 15.],\n       [ 3.,  3.,  7., ...,  3.,  7.,  3.],\n       [ 7.,  7.,  7., ...,  3.,  3.,  7.],\n       [ 7.,  3.,  7., ...,  7.,  7.,  7.]])acceptance_rate(chain, draw)float640.9538 0.9985 ... 0.7794 0.8962array([[0.95380647, 0.99852501, 0.40836033, ..., 0.9863736 , 0.99085177,\n        0.79584152],\n       [0.92006504, 0.71966705, 1.        , ..., 0.86995056, 0.70726883,\n        0.95957316],\n       [0.92146427, 0.52071409, 0.88501896, ..., 0.5674322 , 0.56543205,\n        0.98237713],\n       [0.91279773, 0.95056309, 0.95711029, ..., 0.96283568, 0.7793867 ,\n        0.89617318]])perf_counter_diff(chain, draw)float640.0004448 0.0006885 ... 0.0005429array([[0.00044481, 0.00068853, 0.00067224, ..., 0.00063626, 0.00063183,\n        0.0012801 ],\n       [0.00046195, 0.00063219, 0.00103695, ..., 0.00058062, 0.00111995,\n        0.00058472],\n       [0.00069318, 0.00066944, 0.00071417, ..., 0.00034179, 0.00033905,\n        0.00076165],\n       [0.00085962, 0.0003611 , 0.0007068 , ..., 0.00057186, 0.00054972,\n        0.00054291]])largest_eigval(chain, draw)float64nan nan nan nan ... nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])energy_error(chain, draw)float640.06236 -0.06208 ... -0.2526array([[ 0.0623559 , -0.06208129,  2.13462506, ...,  0.04302744,\n        -0.079441  ,  0.04188887],\n       [ 0.00240051,  0.52532953, -0.06526068, ...,  0.16843362,\n         0.13962037, -0.0957667 ],\n       [-0.10119859,  0.21952694,  0.27717663, ..., -0.29848284,\n         1.15620248, -0.93007826],\n       [ 0.12564641, -0.00828786, -0.12476424, ...,  0.01490099,\n        -0.02458915, -0.25263189]])reached_max_treedepth(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])Indexes: (2)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))Attributes: (6)created_at :2023-06-14T19:47:12.772411arviz_version :0.15.1inference_library :pymcinference_library_version :5.3.1sampling_time :3.1656246185302734tuning_steps :1000\n                      \n                  \n            \n            \n            \n                  \n                  observed_data\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:       (y_pred_dim_0: 348)\nCoordinates:\n  * y_pred_dim_0  (y_pred_dim_0) int64 0 1 2 3 4 5 6 ... 342 343 344 345 346 347\nData variables:\n    y_pred        (y_pred_dim_0) float64 16.0 3.0 115.0 ... 13.0 271.0 102.0\nAttributes:\n    created_at:                 2023-06-14T19:47:12.775956\n    arviz_version:              0.15.1\n    inference_library:          pymc\n    inference_library_version:  5.3.1xarray.DatasetDimensions:y_pred_dim_0: 348Coordinates: (1)y_pred_dim_0(y_pred_dim_0)int640 1 2 3 4 5 ... 343 344 345 346 347array([  0,   1,   2, ..., 345, 346, 347])Data variables: (1)y_pred(y_pred_dim_0)float6416.0 3.0 115.0 ... 13.0 271.0 102.0array([ 16.,   3., 115.,  73.,  82.,  51.,  15.,  16.,  61., 152.,  30.,\n         2.,  16.,  64.,  52.,  78.,  84.,  78.,  16.,   1., 256.,  86.,\n       191., 146.,   4.,  11.,  59.,  78.,  68., 164.,  54.,  18.,   1.,\n       241.,  88., 173., 226., 135.,  33.,  20.,   8.,  92.,  87., 124.,\n       112.,  25., 236., 103., 104.,  33.,  13.,   6.,  11., 353.,  92.,\n       223., 238., 271., 520., 219., 116.,  44.,  52.,   6., 101., 517.,\n       305., 170., 189., 402., 249., 256., 171.,  29.,   7.,   4.,  14.,\n       486., 121., 420., 175., 258., 452., 213., 134.,  68.,  69.,   5.,\n       118., 182., 117., 174., 265., 317., 530., 237., 125.,  28.,   7.,\n        10., 100., 437., 163., 370., 148., 298., 292., 285., 171., 128.,\n         8.,   7., 105., 186.,  93.,  32.,  43.,  72.,  69., 360., 189.,\n       277., 482., 180., 148.,  52., 106.,   8., 111.,  67., 101., 214.,\n       256., 470., 539., 181., 166.,  31.,   1.,   8., 285., 240., 168.,\n       345., 186., 498., 204., 139.,  66.,  54.,   7.,  13., 216., 138.,\n        32., 175., 314., 416., 190., 102.,  24.,   6.,   2.,  10., 400.,\n       109., 244., 137., 101.,  95.,  19.,  10.,   6.,   5., 354.,  86.,\n       376.,  50., 134., 206.,  72.,  17.,  11.,   2.,  89., 530., 191.,\n       134., 192., 311., 181., 190.,  84.,  24.,   3.,  20.,  41., 143.,\n       190.,  94., 287., 306., 126.,  72.,   4.,   2.,  12., 281., 220.,\n       260., 554., 750., 586., 104.,  48.,  33.,  31., 110., 684., 238.,\n       457., 224., 656., 459., 271.,  70.,  88.,   1.,  24., 315., 185.,\n       229., 265., 541., 769.,  98., 270.,  74.,  21.,  14.,   8., 324.,\n       301., 520., 556., 275., 227., 453., 283., 177., 116.,  12.,  40.,\n        78., 250., 188., 300., 487., 900., 571., 213., 102.,  30.,  31.,\n        28., 497., 414., 451., 221., 292., 241., 582., 397., 189.,  19.,\n         7.,  37.,  68., 327., 260., 569., 274., 851., 491., 190., 136.,\n        42.,  53.,  42., 532., 237., 459., 234., 331., 671., 596., 317.,\n       229.,   5.,   6.,  17., 530., 334., 361., 594., 209., 901., 341.,\n       151., 136., 146.,   4.,  41., 154., 269., 253., 313., 711.,  24.,\n       357., 217., 216., 182., 605., 551., 267., 162.,  27.,   8.,   4.,\n        11., 500., 163., 509., 268., 605., 352.,  96.,  64.,  26.,  38.,\n        36., 350.,  90., 135.,  13., 271., 102.])Indexes: (1)y_pred_dim_0PandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       338, 339, 340, 341, 342, 343, 344, 345, 346, 347],\n      dtype='int64', name='y_pred_dim_0', length=348))Attributes: (4)created_at :2023-06-14T19:47:12.775956arviz_version :0.15.1inference_library :pymcinference_library_version :5.3.1\n                      \n                  \n            \n            \n              \n            \n            \n\n\nEn la siguiente figura la línea azul es la media del número de bicicletas alquiladas, esto es lo mismo que ya vimos en la figura anterior. Los nuevos elementos son la banda turquesa oscuro, que representa el 50% central (cuartiles 0,25 y 0,5) para las bicicletas alquiladas y la banda turquesa claro, que representa el 94% central (cuartiles 0,03 y 0,97).\nPodemos notar que nuestro modelo predice un número negativo de bicicletas, lo cual no tiene sentido para nuestro problema, ya que no estemas modelando robo o pérdida de bicicletas. Pero detengamonos un momento a reflexionar sobre nuestro modelo. Tiene sentido, según el modelo, que tengamos valores negativos de bicicletas?\nSi, esto debería esperarse ya que usamos una distribución Normal como likelihood en modelo_bl. Una solución muy sucia podría ser recortar las predicciones para valores inferiores a cero, pero eso es feo, feo. En la siguiente sección, veremos que podemos mejorar fácilmente este modelo para evitar predicciones sin sentido.\n\nlinea_media = idata_bl.posterior['μ'].mean((\"chain\", \"draw\"))\nidx = np.argsort(bicis.temperatura.values)\nx = np.linspace(bicis.temperatura.min(), bicis.temperatura.max(), 15)\ny_pred_q = idata_bl.posterior_predictive['y_pred'].quantile([0.03, 0.97, 0.25, 0.75], dim=['chain', 'draw'])\ny_hat_bounds = iter([PchipInterpolator(bicis.temperatura.values[idx], y_pred_q[i][idx])(x) for i in range(4)])\n\n_, ax = plt.subplots(figsize=(12, 5))\nax.plot(bicis.temperatura, bicis.alquiladas, '.', color=\"0.75\",  zorder=-3)\nax.plot(bicis.temperatura[idx], linea_media[idx], c='C0')\n\nfor lb, ub in zip(y_hat_bounds, y_hat_bounds): \n    ax.fill_between(x,\n                    lb, ub,\n                    color=\"C1\", alpha=0.5)\n\n\nax.set_xlabel('temperatura')\nax.set_ylabel('bicis alquiladas');",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#generalizando-el-modelo-lineal",
    "href": "05_Regresión_lineal.html#generalizando-el-modelo-lineal",
    "title": "6  Regresión lineal",
    "section": "6.3 Generalizando el modelo lineal",
    "text": "6.3 Generalizando el modelo lineal\nEl modelo lineal que hemos estado usando es un caso especial de un modelo más general, el modelo lineal generalizado (GLM, por su sigla en inglés). El GLM es una generalización del modelo lineal que nos permite utilizar diferentes distribuciones para el likelihood. De forma general (y omitiendo priors), podemos escribir un GLM como:\n\\[\n\\begin{aligned}\n\\mu &= \\alpha + \\beta X \\\\\nY &\\sim \\phi(f(\\mu), \\theta)\n\\end{aligned}\n\\]\ndonde \\(\\phi\\) es una distribución arbitraria algunos casos comunes son Normal, Student’s T, Gamma, NegativeBinomial, pero podemos usar otras. \\(\\theta\\) representa cualquier parámetro auxiliar o ruido que pueda tener la distribución, por ejemplo \\(\\sigma\\) para la distribución Normal. También tenemos \\(f\\), generalmente llamada función de enlace inverso. Cuando \\(\\phi\\) es Normal, entonces \\(f\\) es la función identidad. Para distribuciones como Gamma y NegativeBinomial, \\(f\\) suele ser la función exponencial. ¿Por qué necesitamos \\(f\\)? Porque \\(\\mu\\) generalmente tomará valores en los reales, para una distribución como la Normal esto es correcto ya que la media está definida en los reales, pero esto no es necesariamente así para otras distribuciones. Por ejemplo, el parámetro \\(\\mu\\) de la Negativa Binomial se define solo para números positivos, por lo que necesitamos una transformación que nos lleve de los reales a los positivos. La función exponencial es un buen candidato para esta transformación. Vamos a explorar varios GLM, un buen ejercicio es crear una tabla y cada vez que veamos una un nuevo GLM, agregar una línea que indique qué es \\(\\phi\\), \\(\\theta\\), \\(f\\) y tal vez algunas notas sobre cuándo se usa este GLM. Bien, comencemos con nuestro primer ejemplo concreto de un GLM.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#generalizando-el-modelo-lineal-para-datos-de-conteo",
    "href": "05_Regresión_lineal.html#generalizando-el-modelo-lineal-para-datos-de-conteo",
    "title": "6  Regresión lineal",
    "section": "6.4 Generalizando el modelo lineal para datos de conteo",
    "text": "6.4 Generalizando el modelo lineal para datos de conteo\n¿Cómo podemos cambiar modelo_bl para acomodar mejor los datos de las bicicletas? Hay dos cosas a tener en cuenta, el número de bicicletas alquiladas es discreto y está acotado en cero. Esto generalmente se conoce como datos de conteo. Se les llama así porque son el resultado de contar algo. Los datos de conteo a veces se modelan usando una distribución continua como una Normal, especialmente cuando el número de conteos es grande. Pero a menudo es una buena idea usar una distribución discreta. Dos opciones comunes son la distribución de Poisson y el NegativaBinomial. La principal diferencia es que, para la distribución de Poisson, la media y la varianza son iguales y están controladas por un mismo parámetro. Asumir que la media y la varianza son idénticas puede no ser adecuado. En esos casos es común tomar como alternativa la distribución NegativaBinomial, ya que permite que la media y la varianza sean diferentes. Ante la duda es posible generar dos modelos y evaluar si una Poisson o una NegativaBinomial es más adecuada. Más adelante veremos algunos criterios para comparar modelos, por ahora vamos a usar la distribución NegativaBinomial.\nEl modelo de PyMC es muy similar al anterior, pero con dos diferencias principales. Primero, usamos pm.NegativeBinomial en lugar de pm.Normal para el likelihood. La distribución NegativaBinomial tiene dos parámetros, la media \\(\\mu\\) y un parámetro de dispersión \\(\\alpha\\). La varianza de la NegativaBinomial es \\(\\mu + \\frac{\\mu^2}{\\alpha}\\). Entonces, cuanto mayor sea el valor de \\(\\alpha\\), mayor será la varianza. La segunda diferencia es que \\(\\mu\\) es pm.math.exp(α + β * bikes.temperatura) en lugar de solo α + β * bikes.temperatura, como ya explicamos, esto es necesario para transformar los realaes a valores positivos.\n\nwith pm.Model() as modelo_neg:\n    α = pm.Normal('α', mu=0, sigma=100)\n    β = pm.Normal('β', mu=0, sigma=10)\n    σ = pm.HalfCauchy('σ', 10)\n    μ = pm.Deterministic('μ', pm.math.exp(α + β * bicis.temperatura))\n    y_pred = pm.NegativeBinomial('y_pred', mu=μ, alpha=σ, observed=bicis.alquiladas)\n    idata_neg = pm.sample(random_seed=123)\n    idata_neg.extend(pm.sample_posterior_predictive(idata_neg, random_seed=123))\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α, β, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:04&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 4 seconds.\nSampling: [y_pred]\n\n\n\n\n\n\n\n    \n      \n      100.00% [4000/4000 00:00&lt;00:00]\n    \n    \n\n\nLa distribución predictiva a posteriori para modelo_neg se muestra en la siguiente figura. Podemos ver que ya no predecimos valores negativos y que la varianza de las predicciones aumenta con la media. Esto es de esperar ya que la varianza de la NegativaBinomial es \\(\\mu + \\frac{\\mu^2}{\\alpha}\\).\n\nlinea_media = idata_neg.posterior['μ'].mean((\"chain\", \"draw\"))\nidx = np.argsort(bicis.temperatura.values)\nx = np.linspace(bicis.temperatura.min(), bicis.temperatura.max(), 15)\ny_pred_q = idata_neg.posterior_predictive['y_pred'].quantile([0.03, 0.97, 0.25, 0.75], dim=['chain', 'draw'])\ny_hat_bounds = iter([PchipInterpolator(bicis.temperatura.values[idx], y_pred_q[i][idx])(x) for i in range(4)])\n\n_, ax = plt.subplots(figsize=(12, 5))\nax.plot(bicis.temperatura, bicis.alquiladas, '.', color=\"0.75\", zorder=-3)\nax.plot(bicis.temperatura[idx], linea_media[idx], c='C0')\n\nfor lb, ub in zip(y_hat_bounds, y_hat_bounds): \n    ax.fill_between(x,\n                    lb, ub,\n                    color=\"C1\", alpha=0.5)\n\nax.set_xlabel('temperatura')\nax.set_ylabel('bicis alquiladas');\n\n\n\n\n\n\n\n\nEn la siguiente figura tenemos una prueba predictiva a posteriori para modelo_bl a la izquierda y modelo_neg a la derecha. Podemos ver que cuando se usa una Normal, la discrepancia más grande es que el modelo predice valores negativos para las bicicletas alquiladas, pero incluso para los valores positivos vemos que el el ajuste no es tan bueno. Por otro lado, el modelo con la distribución NegativaBinomial ajusta mejor los datos. Aunque el ajuste no es del todo perfecto, vemos que la cola de la distribución es más pesada para las predicciones que para las observaciones, pero también observamos que la probabilidad de esta demanda tan alta es baja. Entonces, en general, reafirmamos que el modelo NegativoBinomial es mejor que el Normal.\n\n_, ax = plt.subplots(1, 2, figsize=(12, 4))\naz.plot_ppc(idata_bl,  num_pp_samples=200,  alpha=0.1, colors=[\"C1\", \"C0\", \"C0\"], ax=ax[0], mean=False)\naz.plot_ppc(idata_neg, num_pp_samples=200,  alpha=0.1, colors=[\"C1\", \"C0\", \"C0\"], ax=ax[1], mean=False)\nax[0].set_title(\"Normal\")\nax[1].set_title(\"NegativaBinomial\");",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#regresión-robusta",
    "href": "05_Regresión_lineal.html#regresión-robusta",
    "title": "6  Regresión lineal",
    "section": "6.5 Regresión robusta",
    "text": "6.5 Regresión robusta\nUna vez estaba ejecutando una simulación compleja de un sistema molecular. En cada paso de la simulación, necesitabamos calcular una regresión lineal como paso intermedio. Teníamos razones teóricas y empíricas para pensar que nuestra “Y” era condicionalmente normal dada nuestra “X”, por lo que la regresión lineal simple debía funcionar. Pero de vez en cuando la simulación generaba algunos valores de “Y” muy por encima o por debajo de la del grueso de los datos, esto arruinaba completamente nuestra simulación y tenáimos que reiniciarla. Estos valores muy diferentes al grueso de los datos se denominan valores atípicos o aberrantes. El motivo del fracaso de nuestras simulaciones era que los valores atípicos estaban tirando de la línea de regresión hacia valores que daban un muy mal ajuste para el grueso de los datos y cuando pasabamos de esta estimación al siguiente paso de la simulación, todo se detenía. Resolvimos esto con la ayuda de nuestra buena amiga, la distribución T de Student, que como vimos anteriormente, tiene colas más pesadas que la distribución Normal. Esto significa que los valores atípicos tienen menos influencia en el resultado final, que se asemeja más al resultado que hubieramos obtenido en ausencia de los valores atípicos. Esto es un ejemplo de una regresión robusta.\nPara ejemplificar la robustez que la distribución T de Student aporta a la regresión lineal, vamos a utilizar un conjunto de datos muy simple. Una versión ligeramente modificada del tercer grupo de datos del cuarteto de Anscombe.\nEn el siguiente modelo, estamos usando una exponencial desplazada (le sumamos 1) para evitar valores cercanos a cero. La distribución exponencial (no desplazada) pone demasiado peso en los valores cercanos a cero. En mi experiencia, esto está bien para datos con valores atípicos “moderados”, pero en algunos conjuntos de datos pequeños como este, es mejor evitar valores tan bajos. Esta recomendación, como otras, hay que tomarlas con una pizca de sal. Los valores por defecto son buenos puntos de partida, pero no es necesario ceñirse a ellos. Otro priors comunes para Gamma(2, 0.1) o Gamma(mu = 20, sd = 15).\n\nans = pd.read_csv('datos/anscombe_3.csv')\nans.plot(\"x\", \"y\", kind=\"scatter\");\n\n\n\n\n\n\n\n\n\nwith pm.Model() as modelo_t:\n    α = pm.Normal('α', mu=ans.y.mean(), sigma=1)\n    β = pm.Normal('β', mu=0, sigma=1)\n    σ = pm.HalfNormal('σ', 5)\n    ν_ = pm.Exponential('ν_', 1/29)\n    ν = pm.Deterministic('ν', ν_ + 1)\n    μ = pm.Deterministic('μ', α + β * ans.x)\n    _ = pm.StudentT('y_pred', mu=μ, sigma=σ, nu=ν, observed=ans.y)\n    idata_t = pm.sample(2000, random_seed=123)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α, β, σ, ν_]\n\n\n\n\n\n\n\n    \n      \n      100.00% [12000/12000 00:04&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 2_000 draw iterations (4_000 + 8_000 draws total) took 4 seconds.\n\n\nEn la siguiente figura podemos ver el ajuste robusto, según model_t, y el ajuste no robusto, según linregress de SciPy (esta función está haciendo una regresión por mínimos cuadrados).\nMientras que el ajuste no robusto trata de comprometerse e incluir todos los puntos, el ajuste Bayesiano robusto, model_t, automáticamente descarta (o le reduce peso) a un punto y ajusta una línea que pasa más cerca de todos los puntos restantes\n\nbeta_c, alpha_c, *_ = linregress(ans.x, ans.y)\n\n_, ax = plt.subplots()\nax.plot(ans.x, (alpha_c + beta_c * ans.x), 'C0:', label='non-robust')\nax.plot(ans.x, ans.y, 'C0o')\nalpha_m = idata_t.posterior['α'].mean((\"chain\", \"draw\"))\nbeta_m = idata_t.posterior['β'].mean((\"chain\", \"draw\"))\n\nx_plot = xr.DataArray(np.linspace(ans.x.min(), ans.x.max(), 50), dims=\"plot_id\")\nax.plot(x_plot, alpha_m + beta_m * x_plot, c='C0', label=\"robust\")\naz.plot_hdi(ans.x, az.hdi(idata_t.posterior['μ'])['μ'].T, ax=ax)\nax.set_xlabel('x')\nax.set_ylabel('y', rotation=0)\nax.legend(loc=2);\n\n\n\n\n\n\n\n\nEn la siguiente figura podemos ver que obtenemos una muy buena coincidencia. También podemos ver que nuestro modelo predice valores alejados del grueso de los datos hacia ambos lados.\n\npm.sample_posterior_predictive(idata_t, model=modelo_t, random_seed=2, extend_inferencedata=True)\nax = az.plot_ppc(idata_t, num_pp_samples=200, figsize=(12, 6),  colors=[\"C1\", \"C0\", \"C1\"])\n\nSampling: [y_pred]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:00&lt;00:00]",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#regresión-logística",
    "href": "05_Regresión_lineal.html#regresión-logística",
    "title": "6  Regresión lineal",
    "section": "6.6 Regresión logística",
    "text": "6.6 Regresión logística\nLa regresión logistica es la generalización del modelo de regresión simple para cuando la variable dependiente es binaria. Esta generalización se logra en dos pasos. Primero utilizamos la funcion logística como función inversa de enlace:\n\\[ \\text{logística}(z) = \\frac{1}{1 + e^{-z}} \\]\nUsamos esta función por que una de sus propiedades es que no importa el valor del argumento \\(z\\), el resultado siempre será un valor en el intervalo [0, 1]. La función logística es conocida también como función sigmoide, por su aspecto típico de S como se puede ver al ejecutar la siguiente celda:\n\nz = np.linspace(-6, 6)\nlogística = 1 / (1 + np.exp(-z))\nplt.plot(z, logística)\nplt.xlabel('z')\nplt.ylabel('logística(z)');\n\n\n\n\n\n\n\n\nEl segundo paso consiste en usar como likelihood una distribución binomial y no una Gaussiana. De esta forma el modelo queda expresado como:\n\\[\n\\begin{aligned}\n\\theta &= \\text{logística}(\\alpha + \\beta X) \\\\\nY &\\sim \\text{Bern}(\\theta)\n\\end{aligned}\n\\]\nEsto modelo se puede explicar de la siguiente forma. Si nuestros datos son binarios \\(y \\in \\{0, 1\\}\\), como con el ejemplo de la moneda, vemos que tiene sentido usar una distribución Bernoulli. Esta distribución está parametrizada por un único parámetro en el intervalo [0, 1], el cual puede ser generado desde un modelo lineal siempre y cuando los valores generados por el modelo lineal sean comprimidos al intervalo [0, 1], algo que puede ser obtenido al emplear una función logística.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#el-modelo-logístico-aplicado-al-conjunto-de-datos-del-iris.",
    "href": "05_Regresión_lineal.html#el-modelo-logístico-aplicado-al-conjunto-de-datos-del-iris.",
    "title": "6  Regresión lineal",
    "section": "6.7 El modelo logístico aplicado al conjunto de datos del iris.",
    "text": "6.7 El modelo logístico aplicado al conjunto de datos del iris.\nVamos a aplicar una regresión logística al conjunto de datos Iris. Este es un conjunto de datos clásico que contiene información sobre flores de 3 especies estrechamente relacionadas: setosa, virginica y versicolor. Estas serán nuestras variables dependientes, las clases que queremos predecir. Tenemos 50 individuos de cada especie y para cada individuo el conjunto de datos contiene cuatro variables que vamos a usar como variables independientes. Estas son el largo del pétalo, el ancho del pétalo, el largo del sépalo y el ancho del sépalo. Por si se lo están preguntando, los sépalos son hojas modificadas cuya función está generalmente relacionada con la protección de las flores en la yema.\n\niris = pd.read_csv('datos/iris.csv')\niris.head()\n\n\n\n\n\n\n\n\nsepal_length\nsepal_width\npetal_length\npetal_width\nspecies\n\n\n\n\n0\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n1\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n2\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n3\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n4\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n\n\n\n\n\nVamos a comenzar con la regresión logística más simple posible: dos clases, setosa y versicolor, y solo una variable independiente, la longitud del sépalo. Como se hace normalmente, vamos a codificar las variables categóricas setosa y versicolor con los números 0 y 1. Usando Pandas podemos hacer:\n\ndf = iris.query(\"species == ('setosa', 'versicolor')\")\ny_0 = pd.Categorical(df['species']).codes\nx_n = 'sepal_length' \nx_0 = df[x_n].values\nx_c = x_0 - x_0.mean()\n\nAl igual que con otros modelos lineales, centrar los datos puede ayudar con el muestreo. Ahora que tenemos los datos en el formato adecuado, finalmente podemos construir el modelo con PyMC.\nObserve cómo la primera parte del siguiente modelo se asemeja a un modelo de regresión lineal. Este modelo tiene dos variables deterministas: θ ybd. θ es la salida de la función logística aplicada a la variable μ y bd es límite de decisión (el cual explicaremos más adelante). Otro punto que vale la pena mencionar es que en lugar de escribir explícitamente la función logística estamos usando pm.math.sigmoid.\n\nwith pm.Model() as modelo_rl:\n    α = pm.Normal('α', mu=0, sigma=1)\n    β = pm.Normal('β', mu=0, sigma=5)\n    \n    μ = α + β * x_c   \n    θ = pm.Deterministic('θ', pm.math.sigmoid(μ))\n    bd = pm.Deterministic('bd', -α/β)\n    \n    yl = pm.Bernoulli('yl', p=θ, observed=y_0)\n\n    idata_rl = pm.sample(random_seed=123)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α, β]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:01&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.\n\n\n\naz.summary(idata_rl, var_names='~θ')\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\nmcse_mean\nmcse_sd\ness_bulk\ness_tail\nr_hat\n\n\n\n\nα\n0.261\n0.308\n-0.333\n0.821\n0.005\n0.004\n3700.0\n2828.0\n1.0\n\n\nβ\n5.209\n1.008\n3.489\n7.259\n0.018\n0.013\n3293.0\n2351.0\n1.0\n\n\nbd\n-0.049\n0.059\n-0.151\n0.071\n0.001\n0.001\n3755.0\n2745.0\n1.0\n\n\n\n\n\n\n\nAhora vamos a graficar los datos junto con la curva sigmoide ajustada:\n\nposterior = idata_rl.posterior\ntheta = posterior[\"θ\"].mean((\"chain\", \"draw\"))\nidx = np.argsort(x_c)\n\n_, ax = plt.subplots()\n\nax.plot(x_c[idx], theta[idx], color='C0', lw=2)\nax.vlines(posterior['bd'].mean((\"chain\", \"draw\")), 0, 1, color='C1', zorder=0)\nbd_hdi = az.hdi(posterior['bd'])\nax.fill_betweenx([0, 1], bd_hdi[\"bd\"][0], bd_hdi[\"bd\"][1], color='C1', alpha=0.6, lw=0)\nax.scatter(x_c, np.random.normal(y_0, 0.02), marker='.', color=[f'{0.5*x}' for x in y_0])\naz.plot_hdi(x_c, posterior['θ'], color='C0', ax=ax, fill_kwargs={\"lw\": 0})\nax.set_xlabel(x_n)\nax.set_ylabel('θ', rotation=0)\n# usar escala original para los xticks\nlocs, _ = plt.xticks()\nax.set_xticks(locs, np.round(locs + x_0.mean(), 1));\n\n\n\n\n\n\n\n\nLa figura anterior muestra la longitud del sépalo para las especies (setosa = 0, versicolor = 1). Para mitigar la superposición de los datos, hemos agregado ruido (jitter) a las variable-respuesta que es binaria. Una línea azul en forma de S representa el valor medio de \\(\\theta\\). Esta línea se puede interpretar como la probabilidad que una flor sea versicolor dado el valor de longitud del sépalo. La banda azul semitransparente es el HDI 94%.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#clasificación-con-regresión-logística",
    "href": "05_Regresión_lineal.html#clasificación-con-regresión-logística",
    "title": "6  Regresión lineal",
    "section": "6.8 Clasificación con regresión logística",
    "text": "6.8 Clasificación con regresión logística\nMi madre prepara un plato delicioso llamado sopa seca, que básicamente es una receta a base de tallarines y que prácticamente no tienen agua. Si bien puede parecer un nombre inapropiado, el nombre del plato cobra total sentido cuando aprendemos cómo se cocina, una parte del agua que se agrega inicialmente se pierde por evaporación y la otra es absorvida por los fideos. Algo similar sucede con la regresión logística. Es usual que este modelo se muestre como un método de clasificación (y no de regresión). Veamos la fuente de esta dualidad.\nLos problemas de regresión consisten en predecir un valor continuo para una variable de salida dados los valores de una o más variables de entrada. Y una clasificación es un problema de asignación de valores discretos a una variable de salida dadas unas variables de entrada. Por ejemplo, asignar la clases versicolor dada la longitud de su sépalo.\nEntonces, ¿la regresión logística es una regresión o un método de clasificación? La respuesta es que es un método de regresión, solo que la regresión se hace sobre la probabilidad de pertenecer a una de dos clases. Pero también es posible usar una regresión logística como clasificador. Lo único que necesitamos es una regla de decisión. Por ej asignár la clase versicolor si \\(\\theta \\ge 0.5\\) y setosa en caso contrario.\nLa línea vertical en la figura anterior es el límite de decisión, y se define como el valor de la variable independiente que hace que la probabilidad de la clase 1 (versicolor en nuestro ejemplo) sea igual a 0,5. Para este modelo podemos calcular este valor analíticamente y es \\(-\\frac{\\alpha}{\\beta}\\).\nA partir de la definición del modelo tenemos la relación:\n\\[\\theta = \\text{logística}(\\alpha + x \\beta)\\]\nY a partir de la definición de la función logística tenemos que \\(\\theta = 0.5\\), cuando el argumento de la regresión logística es 0, es decir:\n\\[0.5 = \\text{logística}(\\alpha + x_i \\beta) \\Leftrightarrow 0 = \\alpha + x_i \\beta\\]\nReordenando encontramos que el valor de \\(x_i\\), para el cual, \\(\\theta = 0.5\\) corresponde a la expresión:\n\\[x_i = - \\frac{\\alpha}{\\beta}\\]\nResumiendo los puntos más importantes hasta el momento:\n\nEl valor de \\(\\theta\\) es, en términos generales, \\(p(y= 1 \\mid x)\\). En este sentido, la regresión logística es en realidad una regresión, solo que estamos regresionando la probabilidad que una observación pertenezca a la clase 1.\nEstamos modelando la media de una variable dicotómica, es decir, un número en el intervalo [0-1]. Luego, introducimos una regla para convertir esta probabilidad en una asignación de dos clases. En este caso, si \\(p(y = 1) &gt;= 0.5\\) asignamos clase 1, de lo contrario clase 0.\nNo hay nada especial en el valor 0.5, aparte de que es el número en el medio entre 0 y 1. Podemos argumentar que este límite solo es razonable si estamos de acuerdo en cometer un error en una u otra dirección. En otras palabras, si es lo mismo para nosotros clasificar erróneamente una setosa como versicolor o una versicolor como setosa. Resulta que este no es siempre el caso, y el costo asociado a la clasificación errónea no tiene por qué ser simétrico.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#interpretación-de-los-coeficientes-de-una-regresión-logística",
    "href": "05_Regresión_lineal.html#interpretación-de-los-coeficientes-de-una-regresión-logística",
    "title": "6  Regresión lineal",
    "section": "6.9 Interpretación de los coeficientes de una regresión logística",
    "text": "6.9 Interpretación de los coeficientes de una regresión logística\nDebemos tener cuidado al interpretar los coeficientes \\(\\beta\\) de una regresión logística. La interpretación no es tan sencilla como con los modelos lineales en el capítulo anterior. La función logística introduce una no linearidad, que debemos tener en cuenta. Si \\(\\beta\\) es positivo, aumentar \\(x\\) aumentará \\(p(y = 1)\\) en cierta cantidad, pero la cantidad no es una función lineal de \\(x\\), es en cambio una función no-lineal de \\(x\\). Podemos visualizar este hecho en la figura 4.4, en lugar de una línea con una pendiente constante, tenemos una línea en forma de S con una pendiente que cambia en función de \\(x\\). Un poco de álgebra nos puede dar una idea de cuánto cambia \\(p(y=1)\\) con \\(\\beta\\):\nEl modelo logístico básico es:\n\\[\\theta = logistic (\\alpha + X \\beta) \\]\nEl inverso de la logística es la función logit, que es:\n\\[ logit(z) = log \\left (\\frac{z}{1-z} \\right)\\]\nPor lo tanto, si tomamos la primera ecuación en esta sección y aplicamos la función logit a ambos términos, obtenemos:\n\\[ logit(\\theta) = \\alpha + X \\beta\\]\nO equivalente:\n\\[ log \\left (\\frac{\\theta} {1-\\theta} \\right) = \\alpha + X \\beta\\]\nRecuerden que \\(\\theta\\) en nuestro modelo era la probabilidad de \\(y = 1\\), por lo tanto:\n\\[ log \\left(\\frac {p(y = 1)} {1-p (y = 1)} \\right) = \\alpha + X \\beta \\]\nLa cantidad \\[\\frac{p (y = 1)} {1-p (y = 1)}\\] se conoce como odds. Los odds a favor se definen como la relación entre la probabilidad de éxito y la probabilidad de no éxito. Mientras que la probabilidad de obtener 2 tirando un dado es 1/6, los odds para el mismo evento son \\(\\frac{1/6}{5/6} = 0.2\\) o dicho de otra forma 1 evento favorable frente a 5 eventos desfavorables. Mientras las probabilidades toman valores en el intervalo [0, 1], los odds lo hacen en \\([0, \\infty)\\). Veamos otro ejemplo, si la probabilidad de lluvia mañana es \\(\\frac{3}{4}\\), entonces la probabilidad de que no llueva es \\(\\frac{1}{4}\\) y entonces el odds será de 3. Es decir es tres veces más probable que llueva respecto de que no llueva. Si en cambio la probabilidad fuese \\(\\frac{1}{2}\\) entonces el odds sería 1. Es tan probable que llueva como que no lo haga. Los odds suelen ser utilizadas por los apostadores ya que proporcionan una herramienta más intuitiva que las probabilidades en bruto cuando se piensa en la forma correcta de apostar.\n\nEn una regresión logística, el coeficiente \\(\\beta\\) codifica el aumento en unidades de log-odds por unidad de aumento de la variable \\(x\\).\n\nLa transformación de probabilidad a odds es una transformación monotónica, lo que significa que las probabilidades aumentan a medida que aumenta la probabilidad. Mientras que las probabilidades están restringidas al intervalo \\([0, 1]\\), los odds viven en el intervalo \\([0, \\infty]\\). El logaritmo es otra transformación monótonica y los log-odds están en el intervalo \\([-\\infty, \\infty]\\). La siguiente figura muestra cómo la probabilidad está relacionada con los odds y los log-odds.\n\nprobability = np.linspace(0.01, 1, 100)\nodds = probability / (1 - probability)\n\n_, ax1 = plt.subplots()\nax2 = ax1.twinx()\nax1.plot(probability, odds, 'C0')\nax2.plot(probability, np.log(odds), 'C2')\n\nax1.set_xlabel('probabilidad')\nax1.set_ylabel('odds', color='C0')\nax2.set_ylabel('log-odds', color='C2');\n\n/tmp/ipykernel_50519/2677285095.py:2: RuntimeWarning: divide by zero encountered in divide\n  odds = probability / (1 - probability)\n\n\n\n\n\n\n\n\n\nEntonces averigüemos cuantas veces más probable es que una flor sea versicolor por unidad del largo del sépalo",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#varianza-variable",
    "href": "05_Regresión_lineal.html#varianza-variable",
    "title": "6  Regresión lineal",
    "section": "6.10 Varianza variable",
    "text": "6.10 Varianza variable\nHemos estado usando el modelo lineal para modelar la media de una distribución, dejando la varianza de lado. En caso que consideremos que el supuesto de varianza constante no tiene sentido podemos considerar la varianza como una función (lineal) de la variable dependiente.\nLa Organización Mundial de la Salud y otras instituciones de salud de todo el mundo recopilan datos para recién nacidos y diseñan estándares de crecimiento. Estas tablas son un componente esencial del conjunto de herramientas pediátricas y también como una medida del bienestar general de las poblaciones con el fin de formular políticas de salud, planificar intervenciones y controlar su eficacia. Un ejemplo de tales datos son la longitud (alturas) de las niñas recién nacidas en función de la edad (en meses):\n\ndata = pd.read_csv('datos/babies.csv')\ndata.plot.scatter('Meses', 'Longitud');\n\n\n\n\n\n\n\n\nPara modelar estos datos, presentaremos 3 elementos nuevos en comparación con los modelos anteriores:\n\n\\(\\sigma\\) ahora es una función lineal de \\(x\\), y para hacer esto agregamos dos nuevos parámetros \\(\\gamma\\) y \\(\\delta\\), estos son análogos directos de \\(\\alpha\\) y \\(\\beta\\).\nEl modelo lineal para la media es una función de \\(\\sqrt{x}\\), esto es solo un truco simple para ajustar un modelo lineal a una curva.\nHemos definido una variable compartida x_shared, esto nos permitirá cambiar los valores de la variable \\(x\\) (Meses en este ejemplo) sin la necesidad de volver a muestrear el modelo. Esto quedará más claro con el ejemplo.\n\n\nwith pm.Model() as model_vv:\n    x_shared = pm.MutableData(\"x_shared\", data.Meses.values.astype(float))\n    α = pm.Normal('α', sigma=10)\n    β = pm.Normal('β', sigma=10)\n    γ = pm.HalfNormal('γ', sigma=10)\n    δ = pm.HalfNormal('δ', sigma=10)\n\n\n    μ = pm.Deterministic('μ', α + β * x_shared**0.5)\n    σ = pm.Deterministic('σ', γ + δ * x_shared)\n    \n    y_pred = pm.Normal('y_pred', mu=μ, sigma=σ, observed=data.Longitud)\n    \n    idata_vv = pm.sample(random_seed=123)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α, β, γ, δ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:03&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 4 seconds.\n\n\nLa siguiente figura muestra el resultado de nuestro modelo. La media de \\(\\mu\\) es representada con una curva negra, y las dos bandas turquesa semitransparentes representan 1 y 2 desviaciones estándar.\n\n_, axes = plt.subplots(1, 2, figsize=(12, 4))\n\naxes[0].plot(data.Meses, data.Longitud, 'C0.', alpha=0.1);\n\nposterior = az.extract(idata_vv)\n\nμ_m = posterior['μ'].mean(\"sample\").values\nσ_m = posterior['σ'].mean(\"sample\").values\n\naxes[0].plot(data.Meses, μ_m, c='k')\naxes[0].fill_between(data.Meses, μ_m + 1 * σ_m, μ_m - 1 * σ_m, alpha=0.6, color='C1')\naxes[0].fill_between(data.Meses, μ_m + 2 * σ_m, μ_m - 2 * σ_m, alpha=0.4, color='C1')\n\naxes[0].set_xlabel('Meses')\naxes[0].set_ylabel('Longitud');\n\n\naxes[1].plot(data.Meses, σ_m)\naxes[1].set_xlabel('Meses');\naxes[1].set_ylabel(r'$\\bar ϵ$', rotation=0);\n\n\n\n\n\n\n\n\nAhora que tenemos ajustado el modelo podríamos querer usar el modelo para averiguar cómo se compara la longitud de una niña en particular respecto de la distribución. Una forma de responder a esta pregunta es preguntarle al modelo por la distribución de la variable longitud para bebas de digamos de 0.5 meses. Usando PyMC podemos hacer estas preguntas con la función pm.sample_posterior_predictive, ya que esto arrojará muestras de \\(\\tilde y\\) es decir los valores predichos considerando la incertidumbre de los parámetros. El único problema es que, por defecto, esta función devolverá valores de \\(\\tilde y\\) para los valores observados de \\(x\\), es decir los valores usando para ajustar el modelo. Pero que pasa si queremos obtener predicciones para que el modelo no vio? Como 0,5 meses que no es parte de los datos originales. La manera más fácil de obtener predicciones para valores no observados es definir una variable compartida (x_shared en el ejemplo) y luego actualizar el valor de la variable compartida justo antes del muestreo de la distribución predictiva a posteriori.\n\nwith model_vv:\n    pm.set_data({\"x_shared\": [0.5]})\n    ppc = pm.sample_posterior_predictive(idata_vv, random_seed=123)\n    y_ppc = ppc.posterior_predictive['y_pred'].stack(sample=(\"chain\", \"draw\"))\n\nSampling: [y_pred]\n\n\n\n\n\n\n\n    \n      \n      0.12% [5/4000 00:00&lt;00:03]\n    \n    \n\n\nAhora podemos graficar la distribución esperada de las longitudes para las bebas con 2 semanas de vida y calcular cantidades adicionales, por ejemplo, el percentil de una niña de esa longitud:\n\nref = 52.5\ngrid, pdf = az.stats.density_utils._kde_linear(y_ppc.values)\nplt.plot(grid, pdf)\npercentile = int((y_ppc &lt;= ref).mean() * 100)\nplt.fill_between(grid[grid &lt; ref], pdf[grid &lt; ref], label='percentil = {:2d}'.format(percentile))\nplt.xlabel('longitud')\nplt.yticks([])\nplt.legend();",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#regresión-por-cuantiles",
    "href": "05_Regresión_lineal.html#regresión-por-cuantiles",
    "title": "6  Regresión lineal",
    "section": "6.11 Regresión por cuantiles",
    "text": "6.11 Regresión por cuantiles\nEn los ejemplos anteriores nos focalizamos en usar un modelo lineal para estimar la media de la variable respuesta, también vimos que es posible usar la misma idea para estimar la varianza. Además, aprendimos que usar un likelihood Normal es solo una de muchas opciones, como Binomial, Negativa Binomial, t de Student, etc.\nEn esta sección vamos a discutir un modelo lineal, cuyo objetivo no es la estimación de media o varianza, en cambio la estimación de cuantiles. Cuando el cuantil a estimar es la mediana, la motivación suele ser la necesidad de una regresión robusta. Así como la mediana es un estimador de la media, robusto a valores extremos, una regresión mediana será también robusta. En ese caso la regresión por cuantiles cumpliría una función similar al modelo robusto que vimos anteriormente usando una distribución t de Student. Otras veces, la motivación está en modelar cuantiles específicos por que estos son “intrínsecamente” de interés. Esto sucede por ejemplo cuando nos interesa modelador valores en los extremos de una distribución. Por ejemplo podríamos estar interesados en modelar temperaturas altas, o eventos de lluvia intensos. A veces también se usa para explorar relaciones entre variables cuando no hay relación entre las medias de dichas variables, o cuando esta es muy débil. Una disciplina donde las regresiones por cuantiles son frecuentes es la ecología. Esto se debe posiblemente, a que la existencia de complejas interacciones entre variables, donde el efecto de una variable sobre otra es distinto para distintos rangos de la variable.\nPara hacer regresiones por cuantiles utilizamos la distribución asimétrica de Laplace como likelihood. Esta distribución la podemos pensar como dos distribuciones exponenciales espalda-con-espalda. La distribución tiene 3 parámetros \\(\\mu\\) controla la localización, \\(\\sigma\\) la escala y \\(q\\) la asimetría. \\(q\\) varía entre [0, 1], cuando \\(q=0.5\\) la distribución asimétrica de Laplace es en realidad simétrica. Este caso especial es conocido también como distribución de Laplace. Cuando hacemos regresión por cuantiles, podemos pensar a \\(q\\) como los cuantiles que nos interesa asociar con la variable respuesta. Por ejemplo, si \\(q=0.5\\) estamos modelando la mediana, si \\(q=0.25\\) estamos modelando el primer cuartil, etc.\nLa siguiente figuras muestras tres distribuciones de esta familia.\n\nq = np.array([0.05, 0.5, 0.95])\nfor q_i, mu in zip(q, [0, 0, -1]):\n    pz.AsymmetricLaplace(mu=mu, b=1, q=q_i).plot_pdf(support=(-6, 6))\n\n\n\n\n\n\n\n\nQuiere decir esto que al hacer una regresión por cuantiles estamos asumiendo que la variable respuesta se distribuye (condicionalmente) como una Asimétrica de Laplace? No necesariamente.\nUna forma alternativa de pensar el likelihood, es como una función de error (o de diferencia) entre el ajuste lineal y los datos. Al elegir una distribución determinada estamos, indirectamente, eligiendo como penalizaremos esa diferencia y al hacer inferencia estámos encontrando la distribución de parámetros que reducen esa diferencia. Usando esta lógica podemos pensar que una gaussiana le asigna un determinado peso a valores alejados de la media y una t de Student le asigna un menor peso, y por ende terminamos teniendo un ajuste más robusto. De la misma forma una asimétrica de Laplace le asigna una determinado peso a estas diferencias de forma tal que el resultado final es ajustar cuantiles en vez de medias. Si esto les suena extraño es por que están prestando atención.\n\nPara ejemplificar la regresión por cuantiles vamos a usar el dataset de las longitudes de bebés que usamos anteriormente. Vamos a ajustar 3 cuantiles al mismo tiempo, 0.05, 0.5, 0.95. Esto nos va a permitir ver como cambia la relación entre las variables a medida que nos movemos de los cuantiles bajos a los altos. Para esto vamos a “apilar” el dataset 3 veces, una para cada cuantil.\n\ny_con = np.stack([data.Longitud.values]* 3).T\nx_con = np.stack([data.Meses.values]* 3).T\n\n\nwith pm.Model() as model_q:\n    α = pm.Normal('α', 50, 3, shape=3)\n    β = pm.Normal('β', 0, 5, shape=3)\n    σ = pm.HalfNormal('σ', 5)\n\n    μ = pm.Deterministic('μ', α + β * x_con**0.5)\n    \n    y_pred = pm.AsymmetricLaplace('y_pred',  mu=μ, b=σ, q=q, observed=y_con)\n    \n    idata_q = pm.sample(random_seed=123)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α, β, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:07&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 8 seconds.\n\n\n\nplt.plot(data.Meses, data.Longitud, \".\", color=\"0.5\")\nfor idx, label in enumerate((\"q=0.1\", \"q=0.5\", \"q=0.9\")):\n    plt.plot(data.Meses.values, idata_q.posterior[\"μ\"].mean((\"chain\", \"draw\"))[:,idx],\n            label=label, lw=3);\n    \nplt.legend();\n\n\n\n\n\n\n\n\nPara que sea más claro que estámos haciendo al hacer una regresión por cuantiles, comparemos el resultado con una regresión “normal”.\n\nwith pm.Model() as model_n:\n    α = pm.Normal('α', 50, 3)\n    β = pm.Normal('β', 0, 5)\n    σ = pm.HalfNormal('σ', 5)\n\n    μ = pm.Deterministic('μ', α + β * data.Meses.values**0.5)\n    \n    y_pred = pm.Normal('y_pred',  μ, σ, observed=data.Longitud.values)\n    \n    idata_n = pm.sample(random_seed=123)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α, β, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:02&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\n\nfig, ax = plt.subplots()\n\nax.plot(data.Meses, data.Longitud, \".\", color=\"0.8\")\nlines = []\nfor idx, label in enumerate([f\"{q_i=:}\" for q_i in q]):\n    line, = ax.plot(data.Meses,\n                   idata_q.posterior[\"μ\"].mean((\"chain\", \"draw\"))[:,idx],\n                   label=label)\n    lines.append(line)\n    \nq_legend = ax.legend(handles=lines, loc='upper left', title=\"Regresión por cuantiles\")\n\n# aproximamos los cuantiles de la distribución posterior\nq_95 = (idata_n.posterior[\"μ\"] + idata_n.posterior[\"σ\"]*1.65).mean((\"chain\", \"draw\"))\nq_05 = (idata_n.posterior[\"μ\"] - idata_n.posterior[\"σ\"]*1.65).mean((\"chain\", \"draw\"))\n\nline0, = ax.plot(data.Meses, q_05, \"C0\", label=\"μ - 1.65σ\", ls=\"--\")\nline1, = ax.plot(data.Meses, idata_n.posterior[\"μ\"].mean((\"chain\", \"draw\")), \"C1\", label=\"μ\", ls=\"--\")\nline2, = ax.plot(data.Meses, q_95, \"C2\", label=\"μ + 1.65σ\", ls=\"--\");\n\nax.add_artist(q_legend)\n\nax.legend(handles=[line0, line1, line2], loc='lower right', title=\"Regresión normal\");\n\n\n\n\n\n\n\n\nPodemos ver que al usar una distribución Normal y a partir de ella computar los cuantiles, q=0.1 (\\(\\mu - 1.65\\sigma\\)) y q=0.9 (\\(\\mu + 1.65\\sigma\\)) estos son simétricos respecto de la media \\(\\mu\\). Además podemos ver que la forma de la curva es esencialmente la misma para los 3 casos, solo que desplazada hacia arriba o abajo. Además las curvas generadas al usar la distribución asimétrica de Laplace permite acomodarse a la varianza no constante, vean como las curvas empiezan muy cerca en el mes cero y se van separando a medida que pasan los meses.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#regresión-lineal-jerárquica",
    "href": "05_Regresión_lineal.html#regresión-lineal-jerárquica",
    "title": "6  Regresión lineal",
    "section": "6.12 Regresión lineal jerárquica",
    "text": "6.12 Regresión lineal jerárquica\nHace dos capítulos, aprendimos los rudimentos de los modelos jerárquicos. Este mismo concepto se puede aplicar a las regresiones lineales. Esto permite que los modelos realicen inferencias a nivel de subgrupo y a nivel global. Como ya vimos, esto se hace incluyendo hiperpriors.\nVamos a crear ocho grupos de datos relacionados, incluido un grupo con un solo dato\n\nN = 20\ngrupos = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]\nM = len(grupos)\nidx = np.repeat(range(M - 1), N)\nidx = np.append(idx, 7)\nnp.random.seed(314)\nalpha_real = np.random.normal(2.5, 0.5, size=M)\nbeta_real = np.random.beta(6, 1, size=M)\neps_real = np.random.normal(0, 0.5, size=len(idx))\ny_m = np.zeros(len(idx))\nx_m = np.random.normal(0, 1, len(idx))\ny_m = alpha_real[idx] + beta_real[idx] * x_m + eps_real\n_, ax = plt.subplots(2, 4, figsize=(10, 5), sharex=True, sharey=True)\nax = np.ravel(ax)\nj, k = 0, N\nfor i, g in enumerate(grupos):\n    ax[i].scatter(x_m[j:k], y_m[j:k], marker=\".\")\n    ax[i].set_title(f\"grupo {g}\")\n    j += N\n    k += N\n\n\n\n\n\n\n\n\nVeamos un posible modelo para estos datos:\n\ncoords = {\"grupo\": grupos}\n\nwith pm.Model(coords=coords) as modelo_jerárquico:\n    # hyper-priors\n    α_μ = pm.Normal(\"α_μ\", mu=y_m.mean(), sigma=1)\n    α_σ = pm.HalfNormal(\"α_σ\", 5)\n    β_μ = pm.Normal(\"β_μ\", mu=0, sigma=1)\n    β_σ = pm.HalfNormal(\"β_σ\", sigma=5)\n\n    # priors\n    α = pm.Normal(\"α\", mu=α_μ, sigma=α_σ, dims=\"grupo\")\n    β = pm.Normal(\"β\", mu=β_μ, sigma=β_σ, dims=\"grupo\")\n    σ = pm.HalfNormal(\"σ\", 5)\n    _ = pm.Normal(\"y_pred\", mu=α[idx] + β[idx] * x_m, sigma=σ, observed=y_m)\n\n    idata_mj = pm.sample(random_seed=123)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α_μ, α_σ, β_μ, β_σ, α, β, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:05&lt;00:00 Sampling 4 chains, 149 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 5 seconds.\nThe rhat statistic is larger than 1.01 for some parameters. This indicates problems during sampling. See https://arxiv.org/abs/1903.08008 for details\nThe effective sample size per chain is smaller than 100 for some parameters.  A higher number is needed for reliable rhat and ess computation. See https://arxiv.org/abs/1903.08008 for details\nThere were 149 divergences after tuning. Increase `target_accept` or reparameterize.\n\n\nVemos que obtenemos un mesaje de advertencia indicando divergencias y dos sugerencias para solucionar el problema. La primera es incrementar target_accept la segunda reparametrizar. Este mensaje indica que las muestras generadas por PyMC pueden no ser confiables, esto se vincula a los diagnósticos que vimos en el capítulo anterior.\nLa primer sugerencias es aumentar target_accept, que es un argumento de pm.sample() que por defecto toma el valor 0.8 y puede tomar valores en el intervalo (0, 1). Si ves divergencias, como en este caso, cambiar el valor por defecto a valores tales como 0.85, 0.9 o incluso más puede ayudar. En algunos casos incluso valores altos como 0.99 no serán de ayuda. Un efecto adverso de aumentar target_accept es que el sampler suele demorar más en generar una misma cantidad de muestras.\nSi las divergencias no desaparecen al cambiar target_accept, en general la única solución es reparametrizar. ¿Qué es esto? Reparametrizar es escribir un modelo de una manera diferente, pero matemáticamente equivalente a su versión original. Muchos modelos (por no decir todos) se pueden escribir de formas alternativas. A veces, la reparametrización puede tener un efecto positivo en la eficiencia del método de muestreo o en la interpretabilidad del modelo. Por ejemplo, al reparametrizar podemos eliminar las divergencias.\nSi prueban volver a correr modelo_jerárquico pero con valores más altos de target_accept verán que las divergecias disminuyen pero no desaparecen. Lamentablemente esto es algo común con modelos lineales jerárquicos, lo bueno es que existe una reparametrización que suele solucionar el problema. La reparametrización consiste en reescribir el modelo de la siguiente forma:\nEn vez definir \\(\\beta \\mathcal{N}(\\beta_\\mu, \\beta_\\sigma)\\) como en modelo_jerárquico vamos a escribir \\(\\beta = \\beta_\\mu + \\beta_\\text{offset} * \\beta_\\sigma\\). Donde \\(\\beta_\\text{offset}\\) es una distribución normal con media 0 y desviación estándar 1. Conceptualmente la diferencia es que en el primer caso estamos modelando la pendiente de cada grupo de forma explícita, mientras que en el segundo caso lo estamos haciendo como una desviación respecto de un valor común (\\(\\beta_\\mu\\)). A la primer versión se la suele llamar centrada y a la segunda no-centrada. Veamos como queda el modelo no-centrado en PyMC:\n\nwith pm.Model(coords=coords) as jerárquico_no_centrado:\n    # hyper-priors\n    α_μ = pm.Normal(\"α_μ\", mu=y_m.mean(), sigma=1)\n    α_σ = pm.HalfNormal(\"α_σ\", 5)\n    β_μ = pm.Normal(\"β_μ\", mu=0, sigma=1)\n    β_σ = pm.HalfNormal(\"β_σ\", sigma=5)\n\n    # priors\n    α = pm.Normal(\"α\", mu=α_μ, sigma=α_σ, dims=\"grupo\")\n\n    β_offset = pm.Normal(\"β_offset\", mu=0, sigma=1, dims=\"grupo\")\n    β = pm.Deterministic(\"β\", β_μ + β_offset * β_σ, dims=\"grupo\")\n\n    σ = pm.HalfNormal(\"σ\", 5)\n    _ = pm.Normal(\"y_pred\", mu=α[idx] + β[idx] * x_m, sigma=σ, observed=y_m)\n\n    idata_ncen = pm.sample(target_accept=0.85, random_seed=123)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α_μ, α_σ, β_μ, β_σ, α, β_offset, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:08&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 9 seconds.\n\n\nAl correr jerárquico_no_centrado sin modificar target_accept verán todavía quedan unas pocas divergencias. 2 en mi caso, un número tan bajo no suele ser problemático. Pero para estar seguros podemos aumentar target_accept a 0.85, como en el bloque de código anterior. Al hacer eso veremos que no hay divergencias y podremos seguir con nuestro análisis. Pero antes de hacer eso veamos que es lo que estamos haciendo al reparametrizar.\nLa siguiente figura muestra muestra dos paneles, a la izquierda tenemos un gráfico de dispersión entre los valores de \\(\\log \\beta_\\sigma\\) (el logaritmo de la desviación estándar global) y \\(\\beta_B\\). A la derecha entre \\(\\log \\beta_\\sigma\\) y la pendiente del grupo H. Los puntos negros representan divergencias. En ambos casos se observa una forma de “embudo” más ancha arriba y más angosta abajo (esto es más acentuado en el panel de la derecha). En ambos casos a medida que \\(\\beta_\\sigma\\) aumenta el embudo se ensancha, ya que la dispersión de \\(\\beta\\) aumenta. Esto es razonable ya que precisamente \\(\\beta_\\sigma\\) controla cuan variable puede ser \\(\\beta\\) respecto de su media. En si mismo esto no es un problema, es simplemente una consecuencia directa del modelo. Pero si es un problema para el método de muestreo, como vimos en el capítulo anterior, para obtener un método eficiente el método de muestreo debe “aprender” ciertos hiper-parámetros. El problema que en una geometría como el embudo, no hay un solo conjunto de hiper-parámetros que sean lo suficientemente buenos para muestrear tanto la boca del embudo como su pico. En general el método “aprende” a muestrear la parate ancha y cuando se aproxima a la parte angosta la trayectoria “diverge” de la correcta. Es como si usáramos los cálculos para poner un satélite en orbita de la tierra, para ponerlo en órbita de la luna, perderíamos el satélite en el espacio.\nNota: Para la figura usamos \\(\\log \\beta_\\sigma\\) en vez de \\(\\beta_\\sigma\\), por que esto es lo que “ve” el sampler. Por qué? Por que internamente PyMC muestrea los parámetros en un espacio sin “bordes” para eso convierte distribuciones como la Beta que tienen soporte en el intervalo (0, 1) a una distribución que tiene soporte en todo el espacio real. Lo mismo hace con distribuciones como la media-normal. En el caso de esta última la transformación es logarítmica. Una vez terminado el muestreo PyMC invierte la trasformación quedando los parámetros en la escala original y por eso nosotros vemos los valores de \\(\\beta_\\sigma\\) y no \\(\\log \\beta_\\sigma\\). Pero el sampler ve \\(\\log \\beta_\\sigma\\) por eso es conveniente graficar en esa escala.\n\nidata_mj.posterior[\"log(β_σ)\"] = np.log(idata_mj.posterior[\"β_σ\"])\n\n_, axes = plt.subplots(1, 2, sharey=\"row\", sharex=\"col\", figsize=(10, 4))\n\nvars = [\"log(β_σ)\", \"log(β_σ)\"]\nglabel = [\"B\", \"H\"]\nfor ax, var, gl in zip(axes.ravel(), vars, glabel):\n    az.plot_pair(\n        idata_mj,\n        var_names=[\"β\", var],\n        coords={\"grupo\": [gl]},\n        divergences=True,\n        scatter_kwargs={\"color\": \"C2\"},\n        divergences_kwargs={\"color\": \"k\", \"marker\": \".\", \"mec\": None},\n        ax=ax,\n    )\n\n\n\n\n\n\n\n\nAhora bien, que pasa cuando usamos un modelo jerárquico no centrado? Veamos la siguiente figura:\nAhora tenemos 4 paneles, en la primer fila vemos \\(\\log \\beta_\\sigma\\) vs \\(\\log \\beta_{text{offset}}\\), que es la nueva variable que introdujimos en la versión no centrada. Ahora vemos que el posterior es más “esférico” o al menos que la forma de embudo es mucho menos pronunciada. Esta geométrica es mucho más simple de muestrear que la anterior y por eso no observamos divergencias.\nEn la segunda fila vemos \\(\\log \\beta_\\sigma\\) vs \\(\\beta\\), ahora vemos que el embudo es aún más acentuado que en la figura anterior. Esto no debería ser aún más problemático? En realidad no, esto no es un problema para el sampler por que el sampler nunca “ve” este embudo ya que \\(\\beta\\) lo obtenemos al combinar \\(\\beta_\\text{offset}\\), \\(\\beta_\\sigma\\) y \\(\\beta_\\mu\\). Es decir con la reparametrización logramos obtener un embudo más “profundo”, pero sin muestrearlo directamente!\nAhora que quiere decir que ahora el embudo sea “más profundo”? Quiere decir que ahora somos capaces de muestrear una región de la distribución a posteriori que antes no podíamos. En la versión centrada del modelo el sampler divergía antes de poder encontrar la zona angosta y por lo tanto esa zona NO estaba presente en la distribución a posteriori. Nos estábamos perdiendo parte de la distribución a posteriori, que si no fuera por las divergencias no sabríamos que existe y estaríamos trabajando con una distribución a posteriori sesgada sin siquiera saberlo.\n\nidata_ncen.posterior[\"log(β_σ)\"] = np.log(idata_ncen.posterior[\"β_σ\"])\n\n_, axes = plt.subplots(2, 2, sharey=\"row\", sharex=\"col\", figsize=(10, 6))\n\nvars = np.repeat([\"β_offset\", \"β\"], 2)\nglabel = [\"B\", \"H\"] * 2\n\nfor ax, var, gl in zip(axes.ravel(), vars, glabel):\n    az.plot_pair(\n        idata_ncen,\n        var_names=[var, \"log(β_σ)\"],\n        coords={\"grupo\": [gl]},\n        divergences=True,\n        scatter_kwargs={\"color\": \"C2\"},\n        divergences_kwargs={\"color\": \"k\", \"marker\": \".\", \"mec\": None},\n        ax=ax,\n    )\n\n\n\n\n\n\n\n\nAhora que nuestras muestras están libres de divergencias, podemos continuar con el análisis de los resultados. La siguiente figura muestra los valores estimados para \\(\\alpha\\) y \\(\\beta\\). Podemos ver como las estimaciones para el grupo H son las de mayor incertidumbre. Lo cual es razonable dado que tenemos un solo punto.\n\naz.plot_forest(idata_ncen, var_names=['α', 'β'], figsize=(10, 4), combined=True);\n\n\n\n\n\n\n\n\nLa siguiente figura muestra las líneas ajustadas para cada uno de los ocho grupos. Podemos ver que logramos ajustar una línea a un solo punto. Al principio, esto puede sonar extraño o incluso sospechoso, pero es solo una consecuencia de la estructura del modelo jerárquico. Cada línea está informada por las líneas de los otros grupos, por lo que no estamos realmente ajustando una línea a un solo punto. En cambio, estamos ajustando una línea que ha sido informada por los puntos en los otros grupos a un solo punto.\n\n_, ax = plt.subplots(2, 4, figsize=(12, 5), sharex=True, sharey=True)\nax = np.ravel(ax)\nj, k = 0, N\nx_range = np.linspace(x_m.min(), x_m.max(), 10)\nposterior = az.extract(idata_ncen)\n\nfor i, g in enumerate(grupos):\n    ax[i].scatter(x_m[j:k], y_m[j:k], marker=\".\")\n    ax[i].set_xlabel(\"$x_{}$\".format(i))\n    ax[i].set_ylabel(\"$y_{}$\".format(i), labelpad=10, rotation=0)\n    alfas = posterior[\"α\"].sel(grupo=g)\n    betas = posterior[\"β\"].sel(grupo=g)\n    alfa_m = alfas.mean(\"sample\").item()\n    beta_m = betas.mean(\"sample\").item()\n    ax[i].plot(x_range, alfa_m + beta_m * x_range, c=\"k\")\n    az.plot_hdi(x_range, alfas + betas * xr.DataArray(x_range).transpose(), ax=ax[i])\n    plt.xlim(x_m.min() - 1, x_m.max() + 1)\n    plt.ylim(y_m.min() - 1, y_m.max() + 1)\n    j += N\n    k += N",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#regresión-lineal-múltiple",
    "href": "05_Regresión_lineal.html#regresión-lineal-múltiple",
    "title": "6  Regresión lineal",
    "section": "6.13 Regresión lineal múltiple",
    "text": "6.13 Regresión lineal múltiple\nHasta ahora, hemos estado trabajando con una variable dependiente y una variable independiente. Sin embargo, no es inusual tener varias variables independientes que queremos incluir en nuestro modelo. Algunos ejemplos podrían ser:\n\nCalidad percibida del vino (dependiente) y acidez, densidad, grado alcohólico, azúcar residual y contenido de sulfatos (variables independientes)\nCalificaciones promedio de un estudiante (dependiente) e ingreso familiar, distancia del hogar a la escuela y nivel de educación de la madre (variable categórica)\n\nPodemos extender fácilmente el modelo de regresión lineal simple para tratar con más de una variable independiente. Llamamos a este modelo regresión lineal múltiple o menos a menudo regresión lineal multivariable (que no debe confundirse con la regresión lineal multivariable, el caso en el que tenemos múltiples variables dependientes).\nEn un modelo de regresión lineal múltiple, modelamos la media de la variable dependiente de la siguiente manera:\n\\[\n\\mu = \\alpha + \\beta_1 X_{1} + \\beta_2 X_{2} + \\dots + \\beta_k X_{k}\n\\]\nUsando notación de álgebra lineal, podemos escribir una versión más corta:\n\\[\n\\mu = \\alpha + \\mathbf{X} \\beta\n\\]\ndonde \\(\\mathbf{X}\\) es una matriz de tamaño \\(n \\times k\\) con los valores de las variables independientes y \\(\\beta\\) es un vector de tamaño \\(k\\) con los coeficientes de las variables independientes, y $n $ es el número de observaciones.\nSi estás un poco oxidado con respecto al álgebra lineal, podés consultar el artículo de Wikipedia sobre el producto escalar entre dos vectores y su generalización a la multiplicación de matrices. Pero básicamente, lo que necesitás saber es que solo estamos usando una forma más corta y conveniente de escribir nuestro modelo:\n\\[\n\\mathbf{X} \\beta = \\sum_i^n \\beta_i X_{i} = \\beta_1 X_{1} + \\beta_2 X_{2} + \\dots + \\beta_k X_{k}\n\\]\nUsando el modelo de regresión lineal simple, encontramos una línea recta que (con suerte) explica nuestros datos. Bajo el modelo de regresión lineal múltiple encontramos, en cambio, un hiperplano de dimensión \\(k\\). Por lo tanto, el modelo de regresión lineal múltiple es esencialmente el mismo que el modelo de regresión lineal simple, con la única diferencia de que ahora \\(\\beta\\) es un vector y \\(\\mathbf{X}\\) es una matriz.\nPara ver un ejemplo de un modelo de regresión lineal múltiple, volvamos al ejemplo de las bicicletas. Usaremos la temperatura y la humedad del día para predecir el número de bicicletas alquiladas.\n\nwith pm.Model() as model_mlb:\n    α = pm.Normal(\"α\", mu=0, sigma=1)\n    β0 = pm.Normal(\"β0\", mu=0, sigma=10)\n    β1 = pm.Normal(\"β1\", mu=0, sigma=10)\n    σ = pm.HalfNormal(\"σ\", 10)\n    μ = pm.Deterministic(\"μ\", pm.math.exp(α + β0 * bicis.temperatura + β1 * bicis.hora))\n    _ = pm.NegativeBinomial(\"y_pred\", mu=μ, alpha=σ, observed=bicis.alquiladas)\n\n    idata_mlb = pm.sample(random_seed=123)\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α, β0, β1, σ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:07&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 7 seconds.\n\n\nTomemos un momento para comparar model_mlb que tiene dos variables independientes temperatura y hora con model_neg que solo tiene una variable independiente temperatura. La única diferencia es que ahora tenemos dos coeficientes \\(\\beta\\), uno para cada variable independiente. El resto del modelo es el mismo. Podríamos haber escrito β = pm.Normal(\"β1\", mu=0, sigma=10, shape=2) y luego usar β1[0] y β1[1] en la definición de \\(\\mu\\). Yo suelo hacer eso, pero acá por ser el primer modelo de regresión múltiple, me pareció más claro escribirlo de esta manera.\nPodemos ver que escribir un modelo de regresión múltiple no es tan diferente de escribir un modelo de regresión simple. Sin embargo, interpretar los resultados puede ser más desafiante. Por ejemplo, el coeficiente de temperatura ahora es \\(\\beta_0\\) y el coeficiente de hora es \\(\\beta_1\\). Todavía podemos interpretar los coeficientes como el cambio en la variable dependiente por cambio unitario en la variable independiente. Pero ahora debemos tener cuidado de especificar de qué variable independiente estamos hablando. Por ejemplo, podemos decir que por una unidad de aumento en la temperatura, el número de bicicletas alquiladas aumenta en \\(\\beta_0\\) unidades, manteniendo constante la hora. O podemos decir que por una unidad de aumento en la hora, el número de bicicletas alquiladas aumenta en \\(\\beta_1\\) unidades, manteniendo la temperatura constante. Pero tenemos que entender que dado que las variables participan todas del mismo modelo, no podemos hablar de sus coeficientes de forma aislada. Esto lo podemos ver en la siguiente figura, que muestra los coeficientes \\(\\beta\\) para los modelos model_neg (solo temperatura) y para el modelo model_mld (temperatura y hora).\n\n# Para hacer comparables los coeficientes los escalamos respecto de su correspondiente desviación estándar\nidata_neg.posterior[\"β0_scaled\"] = idata_neg.posterior[\"β\"] * bicis.temperatura.std()\n\nidata_mlb.posterior[\"β0_scaled\"] = idata_mlb.posterior[\"β0\"] * bicis.temperatura.std()\nidata_mlb.posterior[\"β1_scaled\"] = idata_mlb.posterior[\"β1\"] * bicis.hora.std()\n\n\naz.plot_forest([idata_neg, idata_mlb], model_names=[\"model_neg\", \"model_mlb\"], var_names=[\"β0_scaled\", \"β1_scaled\"], figsize=(10, 3), combined=True)\n\narray([&lt;Axes: title={'center': '94.0% HDI'}&gt;], dtype=object)\n\n\n\n\n\n\n\n\n\nEn la figura anterior podemos ver que el coeficiente \\(\\beta_0\\), que se corresponde con la temperatura es diferente en ambos modelos. Esto se debe a que el efecto de la hora ya explica algunas de las variaciones en el número de bicicletas alquiladas que anteriormente solo se explicaban por la temperatura. En casos extremos, la adición de una nueva variable puede llevar el coeficiente a cero o incluso cambiar el signo. Hablaremos más de esto en el próximo capítulo.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "05_Regresión_lineal.html#ejercicios",
    "href": "05_Regresión_lineal.html#ejercicios",
    "title": "6  Regresión lineal",
    "section": "6.14 Ejercicios",
    "text": "6.14 Ejercicios\n\nEn la siguiente definición de modelo probabilístico cual es el likelihood, cual es el a priori y cual el a posteriori.\n\n\\[\n\\begin{aligned}\ny_i &\\sim Normal(\\mu, \\sigma) \\\\\n\\mu &\\sim Normal(0, 10) \\\\\n\\sigma &\\sim HalfNormal(25)\n\\end{aligned}\n\\]\n\nEn el modelo del punto 1 ¿cuántos parámetros hay en el posterior? o expresado de otra forma ¿cuántas dimensiones tiene el a posteriori?\nEn el siguiente modelo ¿cuál es el modelo lineal? ¿cuál el likelihood y cuantos parámetros hay en la distribución a posteriori?\n\n\\[\n\\begin{aligned}\ny &\\sim Normal(\\mu, \\epsilon) \\\\\n\\mu &= \\alpha + \\beta x \\\\\n\\alpha &\\sim Normal(0, 10) \\\\\n\\beta &\\sim Normal(0, 1) \\\\\n\\epsilon &\\sim HalfNormal(25) \\\\\n\\end{aligned}\n\\]\n\nUsando el conjunto de datos howell (disponible junto con esta notebook) realice un modelo lineal del peso (\\(x\\)) versus la altura (\\(y\\)). Excluya a los menores de 18 años. Exponga los resultados.\nPara 4 individuos se registraron los pesos (45.73, 65.8, 54.2, 32.59), pero no las alturas. Usando el modelo del punto anterior prediga la altura esperada para cada individuo junto con un intervalo de credibilidad del 50% y del 89%.\nRepita el punto 4 pero para los menores de 18 años. Exponga los resultados.\nUse el modelo modelo_bl pero aplicada al conjunto de datos iris. Intente clasificar setosa o versicolor en función de sepal_length. ¿Cuán útil es este modelo comparado con una regresión logística?\nVuelva a correr el modelo_rl pero esta vez usando la variable petal_width ¿En que difieren los resultados? ¿Cuán ancho o angosto es el intervalo HDI 94%?\nLea este post y replique los resultados usted mismo.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Regresión lineal</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html",
    "href": "06_Regresión_lineal_con_Bambi.html",
    "title": "7  Regresión lineal con Bambi",
    "section": "",
    "text": "7.1 Una sintaxis para gobernarlos a todos\nEn el Capítulo anterior describimos los ingredientes básicos de los modelos de regresión lineal y cómo generalizarlos para que se ajusten mejor a nuestras necesidades. En este capítulo, seguiremos aprendiendo sobre modelos lineales, pero esta vez trabajaremos con Bambi, una interfaz de construcción de modelos bayesianos de alto nivel escrita sobre PyMC. Bambi está diseñado para que sea extremadamente fácil ajustar modelos lineales, incluidos los jerárquicos. Veremos que el dominio de Bambi es en realidad más completo que los simples modelos lineales. En este capítulo vamos a aprender sobre:\nPyMC tiene una sintaxis muy simple y expresiva, que nos permite construir modelos arbitrarios, esta capacidad puede ser vista como una bendición, pero también como una carga. Bambi, en cambio, se centra en modelos de regresión; esta restricción conduce a una sintaxis más focalizada y características que serían difíciles de implementar en paquetes más generales.\nBambi utiliza una sintaxis de fórmula de Wilkinson similar a la utilizada por muchos paquetes de R como nlme, lme4 o brms. Supongamos que tenemos un DataFrame como el siguiente:\nSIZE = 117\ndatos = pd.DataFrame(\n    {\n        \"y\": np.random.normal(size=SIZE),\n        \"x\": np.random.normal(size=SIZE),\n        \"z\": np.random.normal(size=SIZE),\n        \"g\": [\"Group A\", \"Group B\", \"Group C\"] * 39,\n    }\n)\ndatos.head()\n\n\n\n\n\n\n\n\ny\nx\nz\ng\n\n\n\n\n0\n0.754899\n-0.632978\n1.127906\nGroup A\n\n\n1\n1.430386\n-0.311282\n0.450401\nGroup B\n\n\n2\n-1.439206\n0.646127\n-1.427421\nGroup C\n\n\n3\n0.919614\n-0.408645\n-1.658352\nGroup A\n\n\n4\n-1.617014\n-0.930976\n-0.090931\nGroup B\nUsando estos datos queremos construir un modelo lineal que prediga y a partir de x. Usando PyMC haríamos algo como:\nUsando la sintaxis de Bambi, podemos escribir el mismo modelo como:\nun_modelo = bmb.Model(\"y ~ x\", datos)\nEn el lado izquierdo de ~ tenemos la variable dependiente y en el lado derecho la(s) variable(s) independiente(s). Con esta sintaxis, solo estamos especificando la media (\\(\\mu\\) en el modelo lm de PyMC). De forma predeterminada, Bambi asume que el likelihood es una Normal. Esto se puede cambiar con el argumento family. Esta sintáxis solo especifica cómo se relacionan las variables dependientes e independiente, pero no especifica las distribuciones a priori. Bambi internamente define distribuciones a priori debilmente informativas. Al imprimir un modelo de Bambi obtenemos mucha información útil sobre su especificación.\nun_modelo\n\n       Formula: y ~ x\n        Family: gaussian\n          Link: mu = identity\n  Observations: 117\n        Priors: \n    target = mu\n        Common-level effects\n            Intercept ~ Normal(mu: -0.0014, sigma: 2.3329)\n            x ~ Normal(mu: 0.0, sigma: 2.4855)\n        \n        Auxiliary parameters\n            sigma ~ HalfStudentT(nu: 4.0, sigma: 0.9325)\nLa primera línea muestra la fórmula que usamos para definir el modelo y la segunda línea es el likelihood. En Bambi, usamos el argumento family para especificar el . La tercera línea es la función de enlace. Por defecto cada familia tiene asociada una función de enlace, por ej la Gaussiana se asocia a la función identidad. Luego tenemos el número de observaciones utilizadas para ajustar el modelo, y lo siguiente nos dice que estamos modelando linealmente el parámetro \\(\\mu\\) de la Gaussiana. Luego, en las siguientes líneas tenemos la estructura del modelo. La primera parte muestra los efectos de nivel común, en este caso, el intercepto y el coefficiente de regressión (la “pendiente”) asociado a x. En la segunda parte se muestran los parámetros auxiliares, es decir, todos los parámetros no modelados linealmente, en este caso, la desviación estándar.\nSi querés omitir el intercepto, tenés dos opciones:\nno_intercepto_1 = bmb.Model(\"y ~ 0 + x\", datos)\nno_intercepto_1\n\n       Formula: y ~ 0 + x\n        Family: gaussian\n          Link: mu = identity\n  Observations: 117\n        Priors: \n    target = mu\n        Common-level effects\n            x ~ Normal(mu: 0.0, sigma: 2.4855)\n        \n        Auxiliary parameters\n            sigma ~ HalfStudentT(nu: 4.0, sigma: 0.9325)\nno_intercepto_2 = bmb.Model(\"y ~ -1 + x\", datos)\nno_intercepto_2\n\n       Formula: y ~ -1 + x\n        Family: gaussian\n          Link: mu = identity\n  Observations: 117\n        Priors: \n    target = mu\n        Common-level effects\n            x ~ Normal(mu: 0.0, sigma: 2.4855)\n        \n        Auxiliary parameters\n            sigma ~ HalfStudentT(nu: 4.0, sigma: 0.9325)\nCon Bambi también podemos incluir efectos a nivel de grupo (es decir jerarquías), por ejemplo, si queremos usar la variable g para agrupar parcialmente las estimaciones de x podemos hacerlo así:\nmodelo_h = bmb.Model(\"y ~ x + z + (x | g)\", datos)\nPara obtener una representación gráfica de la estructura de un modelo de Bambi podemos usar el método .graph(), esto requiere que previamente hayamos usado el método .build() para construir el modelo. O el método .fit() para ajustar el modelo (calcular la distribución posterior de los parámetros). Veamos como lucen un_modelo y modelo_h:\nun_modelo.build()\nun_modelo.graph()\nmodelo_h.build()\nmodelo_h.graph()\nLa sintaxis de la fórmula es muy simple, pero también muy poderosa. Acabamos de arañar la superficie de lo que podemos hacer con él. En lugar de describir la sintaxis de una vez, la mostraremos mediante ejemplos. Así que comencemos ajustando el modelo de bicicleta del capítulo anterior.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#una-sintaxis-para-gobernarlos-a-todos",
    "href": "06_Regresión_lineal_con_Bambi.html#una-sintaxis-para-gobernarlos-a-todos",
    "title": "7  Regresión lineal con Bambi",
    "section": "",
    "text": "with pm.Model() as lm:\n    Intercept = pm.Normal(\"Intercept\", 0, 1)\n    x = pm.Normal(\"x\", 0, 1)\n    y_sigma = pm.HalfNormal(\"sigma\", 1)\n    y_mean = Intercept + x * data[\"x\"]\n    y = pm.Normal(\"y\", y_mean, y_sigma, observed=data[\"y\"])",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#bicicletas-bambinas",
    "href": "06_Regresión_lineal_con_Bambi.html#bicicletas-bambinas",
    "title": "7  Regresión lineal con Bambi",
    "section": "7.2 Bicicletas bambinas",
    "text": "7.2 Bicicletas bambinas\n\nbicis = pd.read_csv(\"datos/bicis.csv\")\n\n\nmodelo_t = bmb.Model(\"alquiladas ~ temperatura\", bicis, family=\"negativebinomial\")\nidata_t = modelo_t.fit()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [alquiladas_alpha, Intercept, temperatura]\n\n\n\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.\n\n\n\nmodelo_t.graph()\n\n\n\n\n\n\n\n\nAhora vamos a graficar el ajuste medio a posteriori y las predicciones. Para ello usaremos la función plot_predictions del módulo interpret.\n\n_, axes = plt.subplots(1, 2, sharey=True, figsize=(12, 4)) \nbmb.interpret.plot_predictions(modelo_t, idata_t, \"temperatura\", ax=axes[0])\nbmb.interpret.plot_predictions(modelo_t, idata_t, \"temperatura\", pps=True, ax=axes[1])\n\naxes[0].plot(bicis.temperatura, bicis.alquiladas, \".\", color=\"0.5\",  zorder=-3)\naxes[1].plot(bicis.temperatura, bicis.alquiladas, \".\", color=\"0.5\", zorder=-3)\naxes[0].set_title(\"media\")\naxes[1].set_title(\"predicciones\");\n\n\n\n\n\n\n\n\nProbemos ahora ajustar un modelo de regresión con dos variables predictoras, temperatura y humedad.\n\nmodelo_th = bmb.Model(\"alquiladas ~ temperatura + humedad\", bicis, \n                     family=\"negativebinomial\")\n                     \nidata_th = modelo_th.fit()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [alquiladas_alpha, Intercept, temperatura, humedad]\n\n\n\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\n\nbmb.interpret.plot_predictions(modelo_th, idata_th, [\"temperatura\", \"humedad\"],\n                               subplot_kwargs={\"group\":None, \"panel\":\"humedad\"},\n                               legend=False,\n                               fig_kwargs={\"sharey\":True, \"sharex\":True});\n\n/home/osvaldo/anaconda3/envs/pymc/lib/python3.11/site-packages/bambi/interpret/utils.py:383: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if is_string_dtype(x) or is_categorical_dtype(x):\n\n\n\n\n\n\n\n\n\nEn la figura anterior podemos ver que la temperatura tiene un efecto positivo en el número de bicicletas alquiladas, mientras que la humedad tiene un efecto negativo. También podemos ver que el efecto de la temperatura es más fuerte que el de la humedad.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#regresión-polinomial",
    "href": "06_Regresión_lineal_con_Bambi.html#regresión-polinomial",
    "title": "7  Regresión lineal con Bambi",
    "section": "7.3 Regresión polinomial",
    "text": "7.3 Regresión polinomial\nUna forma de ajustar curvas usando un modelo de regresión lineal es construyendo un polinomio, como este:\n\\[\n   \\mu = \\beta_0 + \\beta_1 x + \\beta_2 x^2 + \\beta_3 x^3 + \\beta_4 x^4 \\dots \\beta_m x^m\n\\]\ndonde \\(m\\) es el grado del polinomio.\nHay dos cosas importantes a tener en cuenta. Primero, la regresión polinómica sigue siendo una regresión lineal; la linealidad se refiere a los coeficientes (los \\(\\beta\\)s), no a las variables (los \\(x\\)s). La segunda es que simplemente estamos creando nuevas variables de la nada. La única variable observada es , el resto son sólo potencias de . Crear nuevas variables a partir de las observadas es un “truco” perfectamente válido al hacer regresión, a veces la transformación puede estar motivada o justificada por la teoría (como sacar la raíz cuadrada de la longitud de los bebés), pero a veces es solo una forma de ajustar una curva. La intuición con los polinomios es que para un valor dado de , cuanto mayor sea el grado del polinomio, más flexible será el ajuste. Un polinomio de grado 1 es una línea, un polinomio de grado 2 es una curva que puede subir o bajar, un polinomio de grado 3 es una curva que puede subir y luego bajar (o al revés), y así sucesivamente. Note que dije “puede” porque si tenemos un polinomio de grado 3 como \\(\\beta_0 + \\beta_1 x + \\beta_2 x^2 + \\beta_3 x^3\\) pero los coeficientes \\(\\beta_2\\) y \\(\\beta_3\\) son 0 (o prácticamente 0), entonces la curva será una línea.\nHay dos formas de definir una regresión polinómica con Bambi. Podemos escribir los polinomios brutos:\n\"y ~ x + I(x ** 2) + I(x ** 3) + I(x ** 4)\"\ndonde usamos la función de identidad I para dejar claro que queremos elevar \\(x\\) a alguna potencia. Necesitamos esto porque el operador ** tiene un significado especial para Bambi. Si usamos esta sintaxis, le estamos diciendo a Bambi que modele la media de \\(y\\) como \\(\\alpha + \\beta_0 x + \\beta_0 x^2 + \\beta_0 x^3 + \\beta_0 x^4\\)\nAlternativamente podemos escribir\n\"y ~ poly(x, 4)\"\nEsto también generará un polinomio de grado 4, pero los términos del polinomio serán ortogonales entre sí, lo que significa que la correlación entre los términos se reduce. Sin entrar en detalles matemáticos, esto tiene al menos dos consecuencias importantes con respecto a los polinomios brutos. En primer lugar, la estimación puede ser numéricamente más estable y, en segundo lugar, la interpretación de los coeficientes es diferente. En la regresión polinómica estándar, los coeficientes pueden ser difíciles de interpretar, ya que cambiar el valor de un coeficiente afecta a todo el polinomio. En cambio, los polinomios ortogonales permiten interpretar más claramente el efecto de cada término, ya que son independientes entre sí. Si bien la interpretación de los coeficientes es diferente, otros resultados siguen siendo los mismos. Por ejemplo, deberías obtener las mismas predicciones con ambos enfoques.\nConstruyamos un polinomio ortogonal de grado 4 para modelar los datos de la bicis. Para este ejemplo, usaremos la variable hora:\n\nmodelo_poly4 = bmb.Model(\"alquiladas ~ poly(hora, degree=4)\", bicis,\n                       family=\"negativebinomial\")\nidata_poly4 = modelo_poly4.fit()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [alquiladas_alpha, Intercept, poly(hora, degree=4)]\n\n\n\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\n\n_, axes = plt.subplots(1, 2, sharey=True, sharex=\"col\", figsize=(12, 3)) \nbmb.interpret.plot_predictions(modelo_poly4, idata_poly4, \"hora\", ax=axes[0])\nbmb.interpret.plot_predictions(modelo_poly4, idata_poly4, \"hora\", pps=True, ax=axes[1])\n\nfor ax in axes.ravel():\n    ax.plot(bicis.hora, bicis.alquiladas, \"C2.\", zorder=-3)\naxes[0].set_title(\"media\")\naxes[1].set_title(\"predicciones\")\naxes[0].set_xlabel(\"\")\naxes[1].set_ylabel(\"\")\n\nText(0, 0.5, '')\n\n\n\n\n\n\n\n\n\nUn problema con los polinomios es que actúan globalmente. Cuando aplicamos un polinomio de grado \\(m\\) estamos diciendo que la relación entre las variables independientes y dependientes es de grado \\(m\\) para todo el conjunto de datos. Esto puede resultar problemático cuando diferentes regiones de nuestros datos necesitan diferentes niveles de flexibilidad. Esto podría conducir, por ejemplo, a curvas demasiado flexibles. A medida que aumenta el grado, el ajuste se vuelve más sensible a la eliminación de puntos o, de manera equivalente, a la adición de datos futuros. En otras palabras, a medida que aumenta el grado, el modelo se vuelve más propenso a sobreajustarse. La regresión polinomial Bayesiana generalmente sufre menos de este “exceso” gracias al uso de priors y al cálculo de toda una distribución a posteriori y no una estimación puntual.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#splines",
    "href": "06_Regresión_lineal_con_Bambi.html#splines",
    "title": "7  Regresión lineal con Bambi",
    "section": "7.4 Splines",
    "text": "7.4 Splines\nUna forma general de escribir modelos muy flexibles es aplicar funciones \\(B_{m}\\) a \\(X_{m}\\) y luego multiplicarlas por coeficientes \\(\\beta_m\\):\n\\[\n\\mu = \\beta_0 + \\beta_1 B_{1}(X_{1}) + \\beta_2 B_{2}(X_{2}) + \\cdots + \\beta_m B_{m}(X_{m})\n\\]\nSomos libres de elegir las funciones \\(B_{m}\\), por ejemplo, podemos elegir polinomios. Una opción popular es usar B-splines, no vamos a discutir su definición, pero podemos pensar en ellos como una forma de crear curvas suaves de tal manera que obtengamos flexibilidad, como con los polinomios, pero menos propensos al sobreajuste. Los B-splines son polinomios por partes, es decir, polinomios que están restringidos a afectar solo una parte de los datos. La siguiente figura muestra 3 ejemplos de polinomios por partes de grado creciente. Las líneas verticales punteadas muestran los “nudos”, que son los puntos utilizados para restringir las regiones, la línea gris discontinua representa la función que queremos aproximar y las líneas negras son los polinomios por partes.\n\nLa siguiente figura muestra ejemplos de splines de grado 1 y 3, los puntos en la parte inferior representan los nudos y las líneas discontinuas son los B-splines. En la parte superior tenemos todos los B-splines con igual peso, usamos una escala de grises para resaltar que tenemos muchos B-splines. En el panel inferior, cada B-splines tiene un peso diferente (los multiplicamos por coeficientes \\(\\beta_m\\)), si sumamos los B-splines ponderados obtenemos como resultado la línea negra. Esta línea negra es lo que solemos llamar “la spline”. Podemos utilizar la estadística Bayesiana para encontrar los pesos adecuados para los B-splines.\n\nPodemos usar B-splines con Bambi usando la función bs. Por ejemplo, ajustemos un spline de grado 3 a los datos de las bicis:\n\nnum_knots = 6\nknots = np.linspace(0, 23, num_knots+2)[1:-1]\nmodelo_spline = bmb.Model(\"alquiladas ~ bs(hora, degree=3, knots=knots)\", bicis,           \n                         family=\"negativebinomial\")\nidata_spline = modelo_spline.fit()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [alquiladas_alpha, Intercept, bs(hora, degree=3, knots=knots)]\n\n\n\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 4 seconds.\n\n\nEn la siguiente figura podemos ver que el número de bicicletas de alquiler es el más bajo a altas horas de la noche. Luego se produce un aumento, probablemente cuando la gente se despierta y va al trabajo, a la escuela u otras actividades. Tenemos un primer pico alrededor de la hora 8, luego un ligero descenso, seguido por el segundo pico alrededor de la hora 18, probablemente porque la gente regresa a casa, después del cual hay un descenso constante. Observe que la curva no es muy suave, esto se debe a que los datos están discretizados (por hora).\n\n_, ax = plt.subplots(sharey=True, sharex=\"col\", figsize=(12, 6)) \nbmb.interpret.plot_predictions(modelo_spline, idata_spline, \"hora\", ax=ax)\nax.plot(bicis.hora, bicis.alquiladas, \"C2.\", zorder=-3)\n\n\n\n\n\n\n\n\nCuando trabajamos con splines, una decisión importante es determinar el número y la ubicación de los nudos. Esto puede ser una tarea algo desalentadora ya que el número óptimo de nudos y su espaciado no son evidentes de inmediato. Una sugerencia útil para determinar las ubicaciones de los nudos es considerar colocarlos según cuantiles en lugar de hacerlo de manera uniforme. Por ejemplo nudos = np.quantile(bicis.hora, np.linspace(0, 1, num_knots)). Al hacerlo, colocaríamos más nudos en áreas donde tenemos una mayor cantidad de datos, y menos nudos en áreas con menos datos. Esto da como resultado una aproximación más adaptable que captura efectivamente la variabilidad en regiones con una mayor densidad de puntos de datos. Además, es posible que deseemos ajustar splines con distintos números de nudos y posiciones y luego evaluar los resultados, utilizando herramientas como LOO, como veremos en el próximo capítulo.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#modelos-distribucionales",
    "href": "06_Regresión_lineal_con_Bambi.html#modelos-distribucionales",
    "title": "7  Regresión lineal con Bambi",
    "section": "7.5 Modelos distribucionales",
    "text": "7.5 Modelos distribucionales\nAnteriormente vimos que podemos usar modelos lineales para parámetros distintos de la media. Por ejemplo, podemos utilizar un modelo lineal para la media y un modelo lineal para la desviación estándar de una distribución Gaussiana. Estos modelos suelen denominarse modelos distribucionales. La sintaxis de Bambi para los modelos distribucionales es muy similar, sólo necesitamos agregar una línea para los parámetros auxiliares que queremos modelar. Por ejemplo, sigma para una Gaussiano o alfa para un NegativaBinomial\nReproduzcamos ahora un ejemplo del capítulo anterior, el ejemplo de los bebés.\n\nbebes = pd.read_csv('datos/babies.csv')\n\n\nmodelo_cons = bmb.Model(\"Longitud ~ np.sqrt(Meses)\", bebes)\nidata_cons = modelo_cons.fit()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [Longitud_sigma, Intercept, np.sqrt(Meses)]\n\n\n\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.\n\n\nEn el modelo anterior sigma es constante, ahora veamos un modelo distribucional. En este modelo sigma es una función lineal de Meses.\n\nformula = bmb.Formula(\n    \"Longitud ~ np.sqrt(Meses)\",\n    \"sigma ~ Meses\"\n)\nmodelo_dis = bmb.Model(formula, bebes)\nidata_dis = modelo_dis.fit()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [Intercept, np.sqrt(Meses), sigma_Intercept, sigma_Meses]\n\n\n\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\nEn la siguiente figura podemos ver los valores a posteriori de sigma para los modelos con sigma constante y variable. Podemos ver que cuando se permite que sigma varíe obtenemos valores por debajo y por encima de la estimación para un sigma constante, lo que significa que estamos subestimando y sobreestimando este parámetro cuando no permitimos que cambie.\n\n\nMostrar Código\nfig, ax = plt.subplots(figsize=(12, 4))\nfrom matplotlib.lines import Line2D\n\nfor idx in idata_dis.posterior.coords.get(\"Longitud_obs\"):\n    values = idata_dis.posterior[\"sigma\"].sel(Longitud_obs=idx).to_numpy().flatten()\n    grid, pdf = az.kde(values)\n    ax.plot(grid, pdf, lw=1, color=\"C1\")\n\nvalues = idata_cons.posterior[\"Longitud_sigma\"].to_numpy().flatten()\ngrid, pdf = az.kde(values)\nax.plot(grid, pdf, lw=3, color=\"C0\")\n\nhandles = [\n    Line2D([0], [0], label=\"sigma variable\", lw=1.5, color=\"k\", alpha=0.6),\n    Line2D([0], [0], label=\"sigma constante\", lw=1.5, color=\"C0\")\n]\n\nlegend = ax.legend(handles=handles, loc=\"upper right\")\n\nax.set(xlabel=\"Alfa a posteriori\", yticks=[]);\n\n\n\n\n\n\n\n\n\nLa siguiente figura muestra el ajuste a posteriori para model_dis. Observe que el modelo puede capturar el aumento de la variabilidad a medida que los bebés crecen.\n\n_, ax = plt.subplots(sharey=True, sharex=\"col\", figsize=(12, 6)) \nbmb.interpret.plot_predictions(modelo_dis, idata_dis, \"Meses\", ax=ax, fig_kwargs={\"color\":\"k\"})\nbmb.interpret.plot_predictions(modelo_dis, idata_dis, \"Meses\", pps=True, ax=ax)\nax_ = bmb.interpret.plot_predictions(modelo_dis, idata_dis, \"Meses\", pps=True, ax=ax, prob=0.65)\nax_[1][0].get_children()[5].set_facecolor('C1')  \n\nax.plot(bebes.Meses, bebes.Longitud, \"C2.\", zorder=-3);\n\n\n\n\n\n\n\n\nAl trabajar con PyMC vimos que el muestreo de la distribución predictiva a posteriori, evaluado en valores no observados, requiere que definamos el modelo con las “X” como Mutable_data y luego actualicemos el valor de la variable mutable antes de calcular la distribución predictiva posterior. Con Bambi esto no es necesario, podemos usar el método predict para predecir nuevos valores pasando los nuevos valores al argumento data. Por ejemplo, predigamos la longitud de un bebé a los 0,5 meses (15 días):\n\nmodelo_dis.predict(idata_dis, kind=\"pps\", data=pd.DataFrame({\"Meses\":[0.5]}))\n\nEsto agrega un grupo posterior_predictive a idata_dis\n\nidata_dis\n\n\n            \n              \n                arviz.InferenceData\n              \n              \n              \n            \n                  \n                  posterior\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (chain: 4, draw: 1000, Longitud_obs: 1)\nCoordinates:\n  * chain            (chain) int64 0 1 2 3\n  * draw             (draw) int64 0 1 2 3 4 5 6 ... 993 994 995 996 997 998 999\n  * Longitud_obs     (Longitud_obs) int64 0\nData variables:\n    Intercept        (chain, draw) float64 48.44 48.44 48.36 ... 48.39 48.0\n    np.sqrt(Meses)   (chain, draw) float64 7.697 7.697 7.74 ... 7.8 7.786 7.805\n    sigma_Intercept  (chain, draw) float64 0.8343 0.8343 0.8914 ... 0.808 0.8874\n    sigma_Meses      (chain, draw) float64 0.03451 0.03451 ... 0.03537 0.03419\n    Longitud_mean    (chain, draw, Longitud_obs) float64 53.89 53.89 ... 53.52\n    Longitud_sigma   (chain, draw, Longitud_obs) float64 2.343 2.343 ... 2.471\nAttributes:\n    created_at:                  2024-06-05T18:21:11.098236+00:00\n    arviz_version:               0.19.0.dev0\n    inference_library:           pymc\n    inference_library_version:   5.15.1\n    sampling_time:               3.078589677810669\n    tuning_steps:                1000\n    modeling_interface:          bambi\n    modeling_interface_version:  0.13.0xarray.DatasetDimensions:chain: 4draw: 1000Longitud_obs: 1Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])Longitud_obs(Longitud_obs)int640array([0])Data variables: (6)Intercept(chain, draw)float6448.44 48.44 48.36 ... 48.39 48.0array([[48.44293368, 48.44293368, 48.36039184, ..., 48.27682431,\n        48.02375781, 48.48783755],\n       [48.11187103, 47.7256746 , 48.14707988, ..., 47.81390197,\n        47.80847726, 47.75665644],\n       [47.73471442, 47.88412742, 47.99550077, ..., 48.07249159,\n        47.98683426, 48.02668406],\n       [48.16876678, 48.11500324, 47.84851193, ..., 48.28145512,\n        48.39490346, 48.00230026]])np.sqrt(Meses)(chain, draw)float647.697 7.697 7.74 ... 7.786 7.805array([[7.69656065, 7.69656065, 7.7400628 , ..., 7.77157731, 7.79544571,\n        7.65576051],\n       [7.82852268, 7.9919875 , 7.82503509, ..., 7.93262145, 8.00758962,\n        7.97253799],\n       [7.97224438, 7.99326531, 7.82267111, ..., 7.86107407, 7.88660552,\n        7.8884398 ],\n       [7.8139373 , 7.84931745, 7.94983312, ..., 7.79963224, 7.78642727,\n        7.80532478]])sigma_Intercept(chain, draw)float640.8343 0.8343 ... 0.808 0.8874array([[0.83432278, 0.83432278, 0.89142131, ..., 0.83996461, 0.92322135,\n        0.83152889],\n       [0.8616674 , 0.82137011, 0.84346199, ..., 0.89369876, 0.93395968,\n        0.81059174],\n       [0.83594799, 0.8722287 , 0.82357709, ..., 0.95442163, 0.77021651,\n        0.94390128],\n       [0.78731921, 0.82930343, 0.84564086, ..., 0.83751167, 0.80798124,\n        0.88739966]])sigma_Meses(chain, draw)float640.03451 0.03451 ... 0.03537 0.03419array([[0.03450583, 0.03450583, 0.03361624, ..., 0.03324357, 0.03327298,\n        0.03582484],\n       [0.03368295, 0.03367979, 0.03392756, ..., 0.03186976, 0.03225318,\n        0.03356651],\n       [0.03379542, 0.03254186, 0.0336443 , ..., 0.02928198, 0.03828739,\n        0.02711679],\n       [0.03687392, 0.03591957, 0.03113851, ..., 0.03474482, 0.03536545,\n        0.03418826]])Longitud_mean(chain, draw, Longitud_obs)float6453.89 53.89 53.83 ... 53.9 53.52array([[[53.88522391],\n        [53.88522391],\n        [53.83344274],\n        ...,\n        [53.77215932],\n        [53.53597033],\n        [53.90127772]],\n\n       [[53.6474725 ],\n        [53.37686316],\n        [53.68021526],\n        ...,\n        [53.42311238],\n        [53.47069818],\n        [53.39409211]],\n\n       [[53.37194247],\n        [53.53621953],\n        [53.52696456],\n        ...,\n        [53.63111037],\n        [53.56350651],\n        [53.60465334]],\n\n       [[53.69405484],\n        [53.66530884],\n        [53.46989284],\n        ...,\n        [53.79662797],\n        [53.90073898],\n        [53.52149834]]])Longitud_sigma(chain, draw, Longitud_obs)float642.343 2.343 2.48 ... 2.283 2.471array([[[2.34333634],\n        [2.34333634],\n        [2.47992775],\n        ...,\n        [2.35510753],\n        [2.55961752],\n        [2.33834008]],\n\n       [[2.40730743],\n        [2.3122244 ],\n        [2.36416706],\n        ...,\n        [2.48341255],\n        [2.58593275],\n        [2.28730667]],\n\n       [[2.34631427],\n        [2.4314788 ],\n        [2.31729194],\n        ...,\n        [2.63547287],\n        [2.20198716],\n        [2.60507034]],\n\n       [[2.23838846],\n        [2.33325251],\n        [2.36602212],\n        ...,\n        [2.35110183],\n        [2.28339636],\n        [2.47068092]]])Indexes: (3)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))Longitud_obsPandasIndexPandasIndex(Index([0], dtype='int64', name='Longitud_obs'))Attributes: (8)created_at :2024-06-05T18:21:11.098236+00:00arviz_version :0.19.0.dev0inference_library :pymcinference_library_version :5.15.1sampling_time :3.078589677810669tuning_steps :1000modeling_interface :bambimodeling_interface_version :0.13.0\n                      \n                  \n            \n            \n            \n                  \n                  posterior_predictive\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:       (chain: 4, draw: 1000, Longitud_obs: 1)\nCoordinates:\n  * chain         (chain) int64 0 1 2 3\n  * draw          (draw) int64 0 1 2 3 4 5 6 7 ... 993 994 995 996 997 998 999\n  * Longitud_obs  (Longitud_obs) int64 0\nData variables:\n    Longitud      (chain, draw, Longitud_obs) float64 52.17 52.06 ... 57.27 48.1\nAttributes:\n    modeling_interface:          bambi\n    modeling_interface_version:  0.13.0xarray.DatasetDimensions:chain: 4draw: 1000Longitud_obs: 1Coordinates: (3)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])Longitud_obs(Longitud_obs)int640array([0])Data variables: (1)Longitud(chain, draw, Longitud_obs)float6452.17 52.06 51.24 ... 57.27 48.1array([[[52.16742413],\n        [52.05695854],\n        [51.24251147],\n        ...,\n        [51.43823928],\n        [51.992515  ],\n        [52.86269241]],\n\n       [[46.99460036],\n        [52.66624866],\n        [54.73354292],\n        ...,\n        [49.77116369],\n        [54.82759178],\n        [47.92800991]],\n\n       [[54.19423851],\n        [53.62918757],\n        [52.09729938],\n        ...,\n        [51.87768525],\n        [55.43204583],\n        [51.5494679 ]],\n\n       [[54.65772582],\n        [55.87492211],\n        [56.53158018],\n        ...,\n        [54.27311397],\n        [57.2660512 ],\n        [48.09801786]]])Indexes: (3)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))Longitud_obsPandasIndexPandasIndex(Index([0], dtype='int64', name='Longitud_obs'))Attributes: (2)modeling_interface :bambimodeling_interface_version :0.13.0\n                      \n                  \n            \n            \n            \n                  \n                  sample_stats\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:                (chain: 4, draw: 1000)\nCoordinates:\n  * chain                  (chain) int64 0 1 2 3\n  * draw                   (draw) int64 0 1 2 3 4 5 ... 994 995 996 997 998 999\nData variables: (12/17)\n    acceptance_rate        (chain, draw) float64 0.9999 0.5393 ... 0.7002 0.9405\n    diverging              (chain, draw) bool False False False ... False False\n    energy                 (chain, draw) float64 2.129e+03 ... 2.13e+03\n    energy_error           (chain, draw) float64 -0.1638 0.0 ... 0.536 -0.209\n    index_in_trajectory    (chain, draw) int64 2 0 1 -3 0 1 1 ... 1 -2 -5 2 -1 2\n    largest_eigval         (chain, draw) float64 nan nan nan nan ... nan nan nan\n    ...                     ...\n    process_time_diff      (chain, draw) float64 0.0004697 ... 0.0005636\n    reached_max_treedepth  (chain, draw) bool False False False ... False False\n    smallest_eigval        (chain, draw) float64 nan nan nan nan ... nan nan nan\n    step_size              (chain, draw) float64 0.8525 0.8525 ... 1.136 1.136\n    step_size_bar          (chain, draw) float64 0.9132 0.9132 ... 0.8944 0.8944\n    tree_depth             (chain, draw) int64 2 3 3 2 1 2 2 2 ... 2 2 3 3 2 2 2\nAttributes:\n    created_at:                  2024-06-05T18:21:11.107541+00:00\n    arviz_version:               0.19.0.dev0\n    inference_library:           pymc\n    inference_library_version:   5.15.1\n    sampling_time:               3.078589677810669\n    tuning_steps:                1000\n    modeling_interface:          bambi\n    modeling_interface_version:  0.13.0xarray.DatasetDimensions:chain: 4draw: 1000Coordinates: (2)chain(chain)int640 1 2 3array([0, 1, 2, 3])draw(draw)int640 1 2 3 4 5 ... 995 996 997 998 999array([  0,   1,   2, ..., 997, 998, 999])Data variables: (17)acceptance_rate(chain, draw)float640.9999 0.5393 ... 0.7002 0.9405array([[0.99986304, 0.53925713, 0.94078698, ..., 0.94260797, 0.61384011,\n        0.8628982 ],\n       [1.        , 0.64555551, 1.        , ..., 0.81066672, 0.64543934,\n        0.94697239],\n       [1.        , 0.56886998, 1.        , ..., 1.        , 0.93784845,\n        0.79072915],\n       [0.9625825 , 1.        , 0.83325665, ..., 0.90347303, 0.70024344,\n        0.94049658]])diverging(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])energy(chain, draw)float642.129e+03 2.133e+03 ... 2.13e+03array([[2128.87276639, 2133.04984242, 2130.14403527, ..., 2128.70169991,\n        2131.46894539, 2133.6662019 ],\n       [2127.85340154, 2129.84500587, 2127.75593711, ..., 2128.5550997 ,\n        2131.50732669, 2131.91516801],\n       [2132.50282521, 2129.92338114, 2128.92061644, ..., 2131.15600759,\n        2129.97670001, 2129.80874096],\n       [2127.33859464, 2127.2312736 , 2128.10522471, ..., 2127.5903735 ,\n        2128.48998766, 2129.71688757]])energy_error(chain, draw)float64-0.1638 0.0 ... 0.536 -0.209array([[-0.1638016 ,  0.        ,  0.00172233, ..., -0.03891625,\n         0.64061522, -0.51372942],\n       [-0.41280389,  0.28179713, -0.32174279, ...,  0.00694281,\n         0.63565112, -0.39447937],\n       [-1.07156177,  0.24052964, -0.05041441, ..., -0.30878242,\n        -0.38742131,  0.28434482],\n       [ 0.10885425, -0.19260795,  0.28973573, ...,  0.05218795,\n         0.53598008, -0.20899542]])index_in_trajectory(chain, draw)int642 0 1 -3 0 1 1 ... 1 -2 -5 2 -1 2array([[ 2,  0,  1, ...,  2, -2, -1],\n       [-1, -1, -2, ...,  1,  2, -2],\n       [ 2, -2, -2, ..., -3, -2, -3],\n       [-2,  1, -2, ...,  2, -1,  2]])largest_eigval(chain, draw)float64nan nan nan nan ... nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])lp(chain, draw)float64-2.128e+03 ... -2.128e+03array([[-2128.00250572, -2128.00250572, -2128.12919327, ...,\n        -2126.96588425, -2130.48481758, -2128.82223783],\n       [-2126.01361629, -2127.73086594, -2126.03092856, ...,\n        -2126.58273938, -2130.66851691, -2128.17264419],\n       [-2126.77806792, -2127.95618791, -2127.44994016, ...,\n        -2128.96424333, -2127.48561335, -2128.31356197],\n       [-2126.93383996, -2126.05212217, -2127.64202624, ...,\n        -2126.53795317, -2128.24409007, -2128.24832098]])max_energy_error(chain, draw)float64-0.3215 0.9764 ... 0.536 -0.3406array([[-0.32148565,  0.97642086,  0.29411898, ...,  0.18895483,\n         0.64061522, -0.51372942],\n       [-0.41280389,  0.56143672, -0.32174279, ...,  0.43940302,\n         0.65319026, -0.39447937],\n       [-1.07156177,  1.02667069, -0.34619047, ..., -0.70159518,\n        -0.38742131,  0.47855154],\n       [ 0.10885425, -0.19260795,  0.28973573, ...,  0.14723681,\n         0.53598008, -0.34064534]])n_steps(chain, draw)float643.0 7.0 7.0 3.0 ... 7.0 3.0 3.0 3.0array([[3., 7., 7., ..., 3., 3., 3.],\n       [3., 3., 3., ..., 3., 3., 3.],\n       [3., 3., 3., ..., 3., 3., 3.],\n       [3., 3., 3., ..., 3., 3., 3.]])perf_counter_diff(chain, draw)float640.0004697 0.0008929 ... 0.0005629array([[0.00046971, 0.00089294, 0.00089978, ..., 0.00045685, 0.0004466 ,\n        0.00044829],\n       [0.00069804, 0.00067167, 0.00068786, ..., 0.00072536, 0.00064348,\n        0.00052389],\n       [0.00069045, 0.00069548, 0.00069009, ..., 0.00039129, 0.00041891,\n        0.00038302],\n       [0.00042106, 0.00041932, 0.00041471, ..., 0.00042082, 0.00041263,\n        0.00056294]])perf_counter_start(chain, draw)float642.426e+04 2.426e+04 ... 2.426e+04array([[24257.04731343, 24257.0478862 , 24257.04886589, ...,\n        24257.75787857, 24257.75841846, 24257.75894767],\n       [24257.23339987, 24257.23422631, 24257.23501706, ...,\n        24258.21795199, 24258.21881699, 24258.21955826],\n       [24257.51220296, 24257.51302506, 24257.51384824, ...,\n        24258.40726047, 24258.40772524, 24258.40821785],\n       [24257.41807322, 24257.41858208, 24257.41908315, ...,\n        24258.37752693, 24258.37802489, 24258.37898916]])process_time_diff(chain, draw)float640.0004697 0.000893 ... 0.0005636array([[0.00046973, 0.00089301, 0.00089992, ..., 0.00045697, 0.00044667,\n        0.0004484 ],\n       [0.00069807, 0.00067174, 0.00068794, ..., 0.00072562, 0.00064358,\n        0.00052395],\n       [0.00069056, 0.00069568, 0.00068996, ..., 0.00039139, 0.00040424,\n        0.00038308],\n       [0.00042104, 0.00041935, 0.0004148 , ..., 0.00042089, 0.00041263,\n        0.00056356]])reached_max_treedepth(chain, draw)boolFalse False False ... False Falsearray([[False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False],\n       [False, False, False, ..., False, False, False]])smallest_eigval(chain, draw)float64nan nan nan nan ... nan nan nan nanarray([[nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan],\n       [nan, nan, nan, ..., nan, nan, nan]])step_size(chain, draw)float640.8525 0.8525 ... 1.136 1.136array([[0.85253827, 0.85253827, 0.85253827, ..., 0.85253827, 0.85253827,\n        0.85253827],\n       [0.97092773, 0.97092773, 0.97092773, ..., 0.97092773, 0.97092773,\n        0.97092773],\n       [0.65623995, 0.65623995, 0.65623995, ..., 0.65623995, 0.65623995,\n        0.65623995],\n       [1.13615712, 1.13615712, 1.13615712, ..., 1.13615712, 1.13615712,\n        1.13615712]])step_size_bar(chain, draw)float640.9132 0.9132 ... 0.8944 0.8944array([[0.91319623, 0.91319623, 0.91319623, ..., 0.91319623, 0.91319623,\n        0.91319623],\n       [0.86880419, 0.86880419, 0.86880419, ..., 0.86880419, 0.86880419,\n        0.86880419],\n       [0.86744024, 0.86744024, 0.86744024, ..., 0.86744024, 0.86744024,\n        0.86744024],\n       [0.89443309, 0.89443309, 0.89443309, ..., 0.89443309, 0.89443309,\n        0.89443309]])tree_depth(chain, draw)int642 3 3 2 1 2 2 2 ... 2 2 2 3 3 2 2 2array([[2, 3, 3, ..., 2, 2, 2],\n       [2, 2, 2, ..., 2, 2, 2],\n       [2, 2, 2, ..., 2, 2, 2],\n       [2, 2, 2, ..., 2, 2, 2]])Indexes: (2)chainPandasIndexPandasIndex(Index([0, 1, 2, 3], dtype='int64', name='chain'))drawPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       990, 991, 992, 993, 994, 995, 996, 997, 998, 999],\n      dtype='int64', name='draw', length=1000))Attributes: (8)created_at :2024-06-05T18:21:11.107541+00:00arviz_version :0.19.0.dev0inference_library :pymcinference_library_version :5.15.1sampling_time :3.078589677810669tuning_steps :1000modeling_interface :bambimodeling_interface_version :0.13.0\n                      \n                  \n            \n            \n            \n                  \n                  observed_data\n                  \n                  \n                      \n                          \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:       (Longitud_obs: 796)\nCoordinates:\n  * Longitud_obs  (Longitud_obs) int64 0 1 2 3 4 5 6 ... 790 791 792 793 794 795\nData variables:\n    Longitud      (Longitud_obs) float64 49.19 51.22 51.22 ... 90.93 97.35 94.19\nAttributes:\n    created_at:                  2024-06-05T18:21:11.110803+00:00\n    arviz_version:               0.19.0.dev0\n    inference_library:           pymc\n    inference_library_version:   5.15.1\n    modeling_interface:          bambi\n    modeling_interface_version:  0.13.0xarray.DatasetDimensions:Longitud_obs: 796Coordinates: (1)Longitud_obs(Longitud_obs)int640 1 2 3 4 5 ... 791 792 793 794 795array([  0,   1,   2, ..., 793, 794, 795])Data variables: (1)Longitud(Longitud_obs)float6449.19 51.22 51.22 ... 97.35 94.19array([49.19285714, 51.22142857, 51.22142857, 52.74285714, 48.17857143,\n       49.7       , 46.15      , 49.19285714, 50.71428571, 48.17857143,\n       50.20714286, 49.7       , 50.20714286, 49.19285714, 49.19285714,\n       49.7       , 50.71428571, 48.68571429, 50.20714286, 50.20714286,\n       52.23571429, 49.7       , 49.19285714, 53.75714286, 46.15      ,\n       52.23571429, 51.72857143, 48.17857143, 52.23571429, 50.71428571,\n       49.19285714, 47.67142857, 51.22142857, 48.68571429, 47.67142857,\n       49.19285714, 49.19285714, 50.20714286, 49.7       , 52.23571429,\n       51.22142857, 49.7       , 48.17857143, 52.23571429, 51.72857143,\n       55.27857143, 50.71428571, 53.25      , 52.09239497, 52.9773925 ,\n       52.15931415, 54.79551317, 55.88960402, 56.15775148, 56.71321613,\n       56.14531822, 54.27152775, 53.18845079, 51.58980471, 56.52740991,\n       54.27041965, 53.90327795, 56.31186537, 52.85389383, 56.2498965 ,\n       55.3230851 , 52.96168533, 54.83012442, 56.90657333, 56.1674208 ,\n       57.87042139, 55.03640928, 61.33037799, 52.78255116, 53.94307754,\n       54.84143382, 51.75248234, 56.48636007, 56.19388644, 54.60045215,\n       53.89607373, 56.1067215 , 61.39098782, 60.03948235, 59.12081467,\n       59.47145582, 56.87930169, 57.01821414, 55.0298334 , 57.57946143,\n       59.89906647, 57.77073394, 56.61548298, 57.92039996, 59.38318439,\n       57.60909694, 59.98242783, 55.18881162, 56.40744072, 56.98018785,\n...\n       82.65200072, 84.37440979, 91.3085265 , 79.96338712, 81.61261347,\n       84.29581338, 88.81517149, 80.29882513, 77.40305079, 87.23796829,\n       84.06027194, 91.38395098, 89.59787794, 91.62079733, 92.81936454,\n       92.24137361, 76.43942909, 77.71863214, 88.55951887, 88.96395213,\n       77.95509383, 82.74625965, 91.23181564, 92.76141866, 85.54573872,\n       89.36846664, 89.10512726, 90.92382869, 90.97831844, 85.31646661,\n       83.2178514 , 82.74694287, 84.24183082, 88.53873707, 84.24292413,\n       77.67609253, 91.9678806 , 91.14871479, 84.65728687, 97.43958338,\n       86.3573666 , 90.30806077, 86.76620237, 78.94318283, 89.86260498,\n       86.70593948, 92.2386928 , 86.73034187, 81.02343959, 90.37105389,\n       80.49576392, 85.51492889, 91.65871132, 88.5279465 , 94.06219176,\n       87.13126778, 82.14414651, 83.48512537, 84.1944379 , 90.25150091,\n       85.40245169, 84.7221104 , 74.23082134, 92.32109173, 85.30380521,\n       86.94866672, 88.17681991, 79.07148226, 87.27725659, 93.07974128,\n       87.50474804, 78.82336361, 88.3197443 , 89.21055719, 85.10846706,\n       87.99056523, 84.5124126 , 87.9681095 , 83.8704532 , 89.92279315,\n       89.15198916, 87.85582658, 83.9765828 , 94.82978854, 89.38589518,\n       94.6727304 , 75.4419031 , 95.4900717 , 96.4306434 , 84.42186434,\n       86.15102724, 83.64517681, 81.13556856, 90.92918567, 97.35113965,\n       94.193379  ])Indexes: (1)Longitud_obsPandasIndexPandasIndex(Index([  0,   1,   2,   3,   4,   5,   6,   7,   8,   9,\n       ...\n       786, 787, 788, 789, 790, 791, 792, 793, 794, 795],\n      dtype='int64', name='Longitud_obs', length=796))Attributes: (6)created_at :2024-06-05T18:21:11.110803+00:00arviz_version :0.19.0.dev0inference_library :pymcinference_library_version :5.15.1modeling_interface :bambimodeling_interface_version :0.13.0\n                      \n                  \n            \n            \n              \n            \n            \n\n\n\n\nMostrar Código\nref = 52.5\ny_ppc = idata_dis.posterior_predictive[\"Longitud\"].stack(sample=(\"chain\", \"draw\"))\ngrid, pdf = az.stats.density_utils._kde_linear(y_ppc.values)\nplt.plot(grid, pdf)\npercentile = int((y_ppc &lt;= ref).mean() * 100)\nplt.fill_between(\n    grid[grid &lt; ref],\n    pdf[grid &lt; ref],\n    label=\"percentilo = {:2d}\".format(percentile),\n    color=\"C1\",\n)\nplt.xlabel(\"Longitud\")\nplt.yticks([])\nplt.legend();",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#predictores-categóricos",
    "href": "06_Regresión_lineal_con_Bambi.html#predictores-categóricos",
    "title": "7  Regresión lineal con Bambi",
    "section": "7.6 Predictores Categóricos",
    "text": "7.6 Predictores Categóricos\nUna variable categórica representa distintos grupos o categorías. La variable solo puede tomar un conjunto limitado de valores de esas categorías. Estos valores suelen ser etiquetas o nombres que no poseen significado numérico por sí solos. Algunos ejemplos son:\n\nAfiliación política: conservadora, liberal o progresista.\nSexo: femenino o masculino.\nNivel de satisfacción del cliente: muy insatisfecho, insatisfecho, neutral, satisfecho o muy satisfecho.\n\nLos modelos de regresión lineal pueden acomodar fácilmente variables categóricas, solo necesitamos codificar las categorías como números. Hay algunas opciones para hacerlo. Bambi puede manejar fácilmente los detalles por nosotros. El diablo está en los detalles de como interpretamos los resultados.\n\n7.6.1 Pingüinos Categóricos\nPara el ejemplo actual, vamos a utilizar el conjunto de datos de Palmer Penguins, que contiene 344 observaciones de 8 variables. Por el momento nos interesa modelar la masa de los pingüinos en función de la longitud de su pico. Se espera que la masa de los pingüinos aumente a medida que aumenta la longitud del pico. La novedad de este ejemplo es que vamos a considerar la variable categórica, species. Esta variable tiene 3 categorías o niveles, a saber, Adelie, Chinstrap y Gentoo. La Figura 7.1 muestra un diagrama de dispersión para las variables que queremos modelar.\n\n\nMostrar Código\npenguins = pd.read_csv(\"datos/penguins.csv\").dropna()\npenguins.head()\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length\nbill_depth\nflipper_length\nbody_mass\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n3.91\n1.87\n18.1\n3.75\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n3.95\n1.74\n18.6\n3.80\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n4.03\n1.80\n19.5\n3.25\nfemale\n2007\n\n\n4\nAdelie\nTorgersen\n3.67\n1.93\n19.3\n3.45\nfemale\n2007\n\n\n5\nAdelie\nTorgersen\n3.93\n2.06\n19.0\n3.65\nmale\n2007\n\n\n\n\n\n\n\n\n\nMostrar Código\n# Get unique categories\nunique_categories = np.unique(penguins.species)\n\n# Create color map for categories\ncategory_color_map = {cat: f\"C{i}\" for i, cat in enumerate(unique_categories)}\n\n# Generate colors for each category\ncolors = [category_color_map[cat] for cat in penguins.species]\n\n# Create scatter plot for each category\nfor cat in unique_categories:\n    category_data = penguins[penguins.species == cat]\n    plt.scatter(category_data.body_mass, category_data.bill_length, c=category_color_map[cat], label=cat)\n\n# Add labels and legend\nplt.ylabel(\"Body mass (g)\")\nplt.xlabel(\"Bill length (mm)\")\nplt.legend(labels=unique_categories, loc=\"lower right\");\n\n\n\n\n\n\n\n\nFigura 7.1: Largo del pico (bill_length) vs masa (body_mass) para 3 especies de pingüinos.\n\n\n\n\n\nPara ajustar un modelo con variables categoricas no necesitamos de ninguna sintáxis especial\n\nmodelo_p = bmb.Model(\"body_mass ~ bill_length + species\", data=penguins)\nidata_p = modelo_p.fit()\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [body_mass_sigma, Intercept, bill_length, species]\n\n\n\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 3 seconds.\n\n\nLa Figura 7.2 muestra un forest plot para model_p. ¿Notás algo inesperado? No hay valores posteriores para Adelie. Esto no es un error. De forma predeterminada, Bambi codifica variables categóricas con N niveles (3 especies) como N-1 variables (2 especies). Así, los coeficientes species-Chinstrap y species-Gentoo representan deflecciones del modelo base:\n\\[\n\\text{body\\_mass} = \\beta_0 + \\beta_1 \\text{bill\\_length}\n\\]\n\n\nMostrar Código\nax = az.plot_forest(idata_p, combined=True, figsize=(12, 3))\nmean_chinstrap = idata_p.posterior[\"species\"].sel(species_dim=\"Chinstrap\").mean()\nmean_gentoo = idata_p.posterior[\"species\"].sel(species_dim=\"Gentoo\").mean()\nax[0].annotate(f\"{mean_chinstrap.item():.2f}\", (mean_chinstrap , 2.5), weight='bold')\nax[0].annotate(f\"{mean_gentoo.item():.2f}\", (mean_gentoo , 1.7), weight='bold');\n\n\n\n\n\n\n\n\nFigura 7.2: Fores plot para la distribución a posteriori de modelo_p.\n\n\n\n\n\nPara que esto quede más claro, revisemos un par de gráficos. Podemos leer la Figura 7.2 como que la masa corporal de Chinstrap es en promedio -0.89 respecto de la masa corporal media de Adelie. Lo mismo ocurre con Gentoo, pero esta vez tenemos que agregar 0,66 a la media del modelo base. Podés comprobar que estas dos afirmaciones son verdaderas mirando la Figura 7.3. Observá cómo las 3 líneas son esencialmente paralelas entre sí con Adelie en el medio, Chinstrap debajo (-0,89) y Gentoo arriba (0,58).\n\n\nMostrar Código\nbmb.interpret.plot_predictions(modelo_p, idata_p, [\"bill_length\",  \"species\"])\n\n\n\n\n\n\n\n(&lt;Figure size 3450x1500 with 1 Axes&gt;,\n array([&lt;Axes: xlabel='bill_length', ylabel='body_mass'&gt;], dtype=object))\n\n\n(a) Predicciones del ajuste medio para modelo_p.\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\nFigura 7.3\n\n\n\n\n\n\n7.6.2 Relación con modelos jerárquicos\nEn el Capítulo 4 analizamos y contrastamos los modelos agrupados y jerárquicos (o parcialmente agrupados). Allí mostramos que a menudo podemos aprovechar la estructura o las jerarquías de los datos. Siguiendo la lógica de ese capítulo, se podría argumentar que Adelie, Gentoo y Chinstrap, aunque son especies diferentes, son todos pingüinos. Por lo tanto, modelar jerárquicamente sus masas corporales puede ser una buena idea. Entonces, ¿Cuál es la diferencia entre dicho modelo y el que utilizamos en esta sección?\nEl factor distintivo reside en las sutilezas de los componentes de pendiente e intersección. En el caso de model_p (variables categóricos), la pendiente sigue siendo la misma en las tres especies de pingüinos, mientras que los interceptos pueden variar. Intercept + 0 para Adelie, Intercept + species[Chinstrap] para Chinstrap, y Intercept + species[Gentoo] para Gentoo. Por lo tanto, este modelo resalta los distintos incerceptos manteniendo la pendiente uniforme.\nSi, en cambio, hubiéramos construido el modelo jerárquico body_mass ~ bill_length|species), habríamos estado pidiendo una pendiente y un intercepto parcialmente agrupados. Y si en lugar de eso hubiéramos modelado body_mass ~ (0 + bill_length | specie) habríamos estado pidiendo una pendiente parcialmente agrupada y un intercepto común.\nEntonces, ¿Cuál es mejor modelo? Como siempre, depende, incluso en algunos casos podría ser mejor una combinación de ambos enfoques, ya que no son ideas mutuamente excluyentes. Como ya comentamos, el mejor modelo es el que se alinea con los objetivos de tu análisis y proporciona información útil. A menudo es una buena idea explorar múltiples modelos, comparar su desempeño usando criterios apropiados (como los discutidos en el Capítulo 8 y considerar las implicaciones prácticas de cada modelo en el contexto de la investigación o proceso de toma de decisiones.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#interacciones",
    "href": "06_Regresión_lineal_con_Bambi.html#interacciones",
    "title": "7  Regresión lineal con Bambi",
    "section": "7.7 Interacciones",
    "text": "7.7 Interacciones\nUn efecto de interacción o interacción estadística, ocurre cuando el efecto de una variable independiente sobre la respuesta cambia dependiendo del valor de otra variable independiente en el mismo modelo. Una interacción puede ocurrir entre dos o más variables. Algunos ejemplos son:\n\nEficacia de los medicamentos y edad: un medicamento que funciona mejor en personas mayores que en personas más jóvenes\nNivel de educación e impacto en los ingresos: Es posible que la educación superior tenga un efecto positivo más fuerte en los ingresos de un género en comparación con el otro, lo que resulta en una interacción entre la educación y el género.\nEfectos del ejercicio y la dieta sobre la pérdida de peso: Podría ser que el efecto de la dieta sobre la pérdida de peso sea pequeño para las personas que hacen nada o poco ejercicio y muy importante para las personas que hacen ejercicio moderado.\n*Temperatura y humedad para el crecimiento de los cultivos: El efecto de la temperatura y la humedad en el crecimiento de los cultivos puede depender del tipo de cultivo que se esté cultivando. Algunos cultivos podrían prosperar en condiciones cálidas y húmedas, mientras que otros podrían funcionar mejor en ambientes más fríos y menos húmedos, creando una interacción entre temperatura, humedad y tipo de cultivo.\n\nTenemos una interacción cuando el efecto combinado de dos o más variables actuando conjuntamente no es igual a la suma de sus efectos individuales. Si tenemos un modelo como\n\\[\n\\mu = \\alpha + \\beta_0 X_0 + \\beta_1 X_1\n\\]\nno podemos modelar un interacción, ya que los efectos son aditivos. La forma más común de modelar una interacción es multiplicando 2 o más variables. Por ejemplo en un modelo como:\n\\[\n\\mu = \\alpha + \\overbrace{\\beta_0 X_0 + \\beta_1 X_1 }^{\\text{término principal}} \\; + \\underbrace{\\beta_3 X_0X_1}_{\\text{término de interacción}}\n\\]\nEs común que al modelar una interacción se incluya también el término principal.\n\nMultiplicar dos variables puede verse como un truco similar al que usamos para la regresión polinómica (o cualquier transformación de una variable determinada). En lugar de multiplicar un predictor consigo mismo, multiplicamos dos predictores diferentes y obtenemos uno nuevo.\n\nDefinir una interacción es fácil; para un modelo PyMC, solo necesitamos multiplicar los dos predictores y agreagar un coeficiente más al modelo. Para que un modelo de Bambi es aún más fácil, usamos el operador :. Veamos un ejemplo de un modelo con y sin interacciones.\n\n# Sin interacción\nmodel_noint = bmb.Model(\"body_mass ~ bill_depth + bill_length\", data=penguins)\nidata_noint = model_noint.fit()\n\n# COn interacción\nmodel_int = bmb.Model(\"body_mass ~ bill_depth + bill_length + bill_depth:bill_length\", data=penguins)\nidata_int = model_int.fit()\n                    \n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [body_mass_sigma, Intercept, bill_depth, bill_length]\n\n\n\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 2 seconds.\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [body_mass_sigma, Intercept, bill_depth, bill_length, bill_depth:bill_length]\n\n\n\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 11 seconds.\n\n\nEn la Figura 7.4 tenemos el ajuste de regresión media para bill_depth evaluado en 5 valores fijos de bill_length. A la izquierda tenemos el resultado dpara model_noint (sin interacciones) y a la derecha para model_int (con interacciones). Podemos ver que cuando no tenemos interacciones las rectas ajustadas para bill_ depth son paralelas en diferentes niveles de bill_length. En cambio, cuando tenemos interacciones las rectas ya no son paralelas, precisamente porque el efecto de cambiar bill_depth sobre cuánto cambia body_mass ya no es constante sino que está modulado por los valores de bill_length. Si generás una figura como Figura 7.4, pero fijando bill_depth en vez de bill_length observarás un fenómeno parecido.\n\n\nMostrar Código\n_, axes = plt.subplots(1, 2, figsize=(12, 4.5), gridspec_kw={'hspace': 0.1})\n\nbmb.interpret.plot_predictions(model_noint, idata_noint,\n                                [\"bill_depth\",  \"bill_length\"],\n                                ax=axes[0],\n                                legend=False,\n                                )\naxes[0].set_title(\"Sin interacción\")\n\n\nbmb.interpret.plot_predictions(model_int, idata_int,\n                               [\"bill_depth\",  \"bill_length\"],\n                                ax=axes[1],\n                                )\naxes[1].set_title(\"Con interacción\");\n\n\n/home/osvaldo/anaconda3/envs/pymc/lib/python3.11/site-packages/bambi/interpret/utils.py:383: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if is_string_dtype(x) or is_categorical_dtype(x):\n/home/osvaldo/anaconda3/envs/pymc/lib/python3.11/site-packages/bambi/interpret/utils.py:383: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if is_string_dtype(x) or is_categorical_dtype(x):\n\n\n\n\n\n\n\n\nFigura 7.4: Comparación de un modelo sin interacción (las lineas se mantienen paralelas) y con interacción (las lineas se cruzan).\n\n\n\n\n\nAcabamos de ver visualmente que interpretar modelos lineales con interacciones no es tan fácil como interpretar modelos lineales sin ellas. Veamos esto matemáticamente:\nSupongamos que tenemos un modelo con 2 variables \\(X_0\\) y \\(X_1\\) y una interacción entre ellas:\n\\[\n     \\mu = \\alpha + \\beta_0 X_0 + \\beta_1 X_1 + \\beta_3 X_0X_1\n\\]\npodemos reescribir este modelo como:\n\\[\n\\mu = \\alpha + \\underbrace{{(\\beta_0 + \\beta_2} X_1)}_{\\text{pendiente de } X_0} X_0 + \\beta_1 X_1\n\\]\no así:\n\\[\n\\mu = \\alpha + \\beta_0 X_0 + \\underbrace{(\\beta_1 + \\beta_2 x_0)}_{\\text{pendiente de } X_1} X_1\n\\]\nEsto nos muestra el siguiente gráfico de Fores para la distribución a posteriori de:\n\n¡El término de interacción puede entenderse como un modelo lineal dentro de un modelo lineal!\nLa interacción es simétrica; podemos pensar en ello como la pendiente de \\(x_0\\) en función de \\(x_1\\) y al mismo tiempo como la pendiente de \\(x_1\\) en función de \\(x_0\\). Esto también se puede ver en la figura interactiva.\nSabemos desde antes que el coeficiente \\(\\beta_0\\) se puede interpretar como la cantidad de cambio de \\(\\mu\\) por unidad de cambio de \\(x_0\\) (por eso lo llamamos pendiente). Si agregamos un término de interacción, entonces esto solo es cierto en \\(x_1 = 0\\). Intente utilizar la figura interactiva para verlo usted mismo. Matemáticamente, esto es cierto porque cuando \\(x_1 = 0\\) entonces \\(\\beta_2x_1 = 0\\), y por lo tanto la pendiente de \\(x_0\\) se reduce a \\(\\beta_0 x_0\\). Por simetría, el mismo razonamiento se puede aplicar a \\(\\beta_1\\). \\end{detallar}",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#interpretando-modelos-con-bambi",
    "href": "06_Regresión_lineal_con_Bambi.html#interpretando-modelos-con-bambi",
    "title": "7  Regresión lineal con Bambi",
    "section": "7.8 Interpretando modelos con Bambi",
    "text": "7.8 Interpretando modelos con Bambi\nYa hemos usado bmb.interpret_plot_predictions en este capítulo. Pero esa no es la única herramienta que nos ofrece Bambi para ayudarnos a comprender los modelos. Otra opción es bmb.interpret_plot_comparisons. Esta herramienta nos ayuda a responder la pregunta: ¿Cuál es la diferencia predictiva esperada cuando comparamos dos valores de una variable determinada mientras mantenemos el resto en valores constantes?\nComo ejemplo usemos model_int, que ya ajustamos en la sección anterior.\n\nbmb.interpret.plot_comparisons(model_int, idata_int,\n                               contrast={\"bill_depth\":[1.4, 1.8]},\n                               conditional={\"bill_length\":[3.5, 4.5, 5.5]});\n\n\n\n\n\n\n\nFigura 7.5: Contraste de para bill_length de 1,8 a 1,4 cm para 3 valores fijos de bill_length, 3.5, 4.5 y 5.5.\n\n\n\n\n\nFigura 7.5 muestra que al comparar un pingüino hipotético con profundidad de pico (bill_depth) de 1,8 con uno con profundida de pico de 1,4, la diferencia esperada es:\n\naproximadamente 0,8 kg para un pico de 3,5 de longitud\n-0,7 kg para un pico de 4,5 de largo\naproximadamente -2 kg para un pico de 5,5 de largo\n\nPara obtener esta misma información, pero en forma de tabla podemos usar la función bmb.interpret.comparisons y obtendremos un DataFrame de Pandas.\n\n\nMostrar Código\nbmb.interpret.comparisons(model_int, idata_int,\n                          contrast={\"bill_depth\":[1.4, 1.8]},\n                          conditional={\"bill_length\":[3.5, 4.5, 5.5]})\n\n\n\n\n\n\n\n\n\nterm\nestimate_type\nvalue\nbill_length\nestimate\nlower_3.0%\nupper_97.0%\n\n\n\n\n0\nbill_depth\ndiff\n(1.4, 1.8)\n3.5\n0.771034\n0.493606\n1.022379\n\n\n1\nbill_depth\ndiff\n(1.4, 1.8)\n4.5\n-0.567754\n-0.674837\n-0.458393\n\n\n2\nbill_depth\ndiff\n(1.4, 1.8)\n5.5\n-1.906541\n-2.176603\n-1.656448\n\n\n\n\n\n\n\nOtra función muy útil es Otra función útil es bmb.interpret_plot_slopes. Esta función es similar a bmb.interpret_plot_comparison, la “tasa de cambio instantánea” o pendiente en un valor dado.\n\nbmb.interpret.plot_slopes(model_int, idata_int,\n                          wrt={\"bill_depth\":1.8},\n                          conditional={\"bill_length\":[3.5, 4.5, 5.5]});\n\n/home/osvaldo/anaconda3/envs/pymc/lib/python3.11/site-packages/bambi/interpret/effects.py:841: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if is_categorical_dtype(model.data[wrt_name]) or is_string_dtype(model.data[wrt_name]):\n\n\n\n\n\n\n\n\nFigura 7.6: Comparación de las pendientes de bill_depth evaluada en 1.8 para tres valores de bill_length, 3.5, 4.5 y 5.5.\n\n\n\n\n\nLa Figura 7.6 muestra que las pendientes para bill_depth en 1.8 son:\n\n\\(\\approx\\) 2 kg/cm para un largo de pico de 3.5\n-1.4 kg/cm para un largo de pico de4.5\n\\(\\approx\\) -5 kg/cm para un largo de pico de 5.5\n\nSi deseas esta información en forma tabular, podés usar: la función bmb.interpret.slopes y obtendrás un DataFrame en lugar de un gráfico.\n\n\nMostrar Código\nbmb.interpret.slopes(model_int, idata_int,\n                     wrt={\"bill_depth\":1.8},\n                     conditional={\"bill_length\":[3.5, 4.5, 5.5]})\n\n\n/home/osvaldo/anaconda3/envs/pymc/lib/python3.11/site-packages/bambi/interpret/effects.py:841: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead\n  if is_categorical_dtype(model.data[wrt_name]) or is_string_dtype(model.data[wrt_name]):\n\n\n\n\n\n\n\n\n\nterm\nestimate_type\nvalue\nbill_length\nestimate\nlower_3.0%\nupper_97.0%\n\n\n\n\n0\nbill_depth\ndydx\n(1.8, 1.8001)\n3.5\n1.927586\n1.234014\n2.555948\n\n\n1\nbill_depth\ndydx\n(1.8, 1.8001)\n4.5\n-1.419384\n-1.687093\n-1.145983\n\n\n2\nbill_depth\ndydx\n(1.8, 1.8001)\n5.5\n-4.766354\n-5.441507\n-4.141119\n\n\n\n\n\n\n\nEn esta sección, apenas hemos arañado la superficie de lo que podemos hacer con las herramientas del módulo bmb.interpret. Este módulo es una característica muy útil de Bambi, especialmente para modelos con interacciones y/o modelos con funciones de enlace distintas a la función de identidad. Les recomiendo que lea la documentación de Bambi para obtener más ejemplos y detalles que no se tratan aquí.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#selección-de-variables",
    "href": "06_Regresión_lineal_con_Bambi.html#selección-de-variables",
    "title": "7  Regresión lineal con Bambi",
    "section": "7.9 Selección de Variables",
    "text": "7.9 Selección de Variables\nLa selección de variables se refiere al proceso de identificar las variables más relevantes en un modelo a partir de un conjunto más amplio de predictores. Realizamos la selección de variables bajo el supuesto de que sólo un subconjunto de variables tiene un impacto considerable en el resultado de interés, mientras que otras aportan poco o ningún valor adicional.\nPodría decirse que “lo más bayesiano que se puede hacer” al construir un modelo es incluir todas las variables que podamos pensar en un solo modelo y luego usar la distribución a posteriori de ese modelo para hacer predicciones o comprender las relaciones de las variables. Este es el enfoque “más bayesiano” porque utilizamos la mayor cantidad de datos posible e incorporamos en la distribución a posteriori la incertidumbre sobre la importancia de las variables. Sin embargo, ser más bayesiano que Bayes no siempre es la mejor idea.\nRealizar selección de variables es una buena idea cuando:\n\nNecesitamos reducir el costo de medición. Por ejemplo, en medicina, es posible que tengamos el dinero y los recursos para realizar un estudio piloto y medir 30 variables para 200 pacientes. Pero no podemos hacer lo mismo con miles de personas. O tal vez podamos colocar muchos sensores en un campo para modelar el rinde de un cultivo, pero no podemos extender eso mismo al tamaño de toda una región productiva. Reducir costos no siempre es cuestión de dinero o tiempo. Cuando se trabaja con humanos u otros animales, también es importante reducir el dolor y la incomodidad.\nQueremos reducir el costo computacional. Esto no es un problema para modelos pequeños y simples, pero cuando tenemos muchas variables, muchos datos o ambos, el costo computacional puede ser prohibitivo.\nBuscamos una mejor comprensión de las estructuras de correlación significativas. Es decir, nos interesa entender qué variables proporcionan mejores predicciones. Es importante aclarar que no estamos hablando de causalidad. Si bien los modelos estadísticos, en particular los GLMS, pueden usarse para inferir causalidad, hacerlo requiere pasos y suposiciones adicionales. En este curso no discutimos cómo realizar inferencia causal. Para obtener una introducción muy sencilla a la inferencia causal, consulte este vídeo. O si su inteŕes es más serio, puede consultar el libro en Causal Inference: The Mixtape de Scott Cunningham. También el paquete CausalPy\nCuando deseamos un modelo que sea más robusto a los cambios en la distribución generadora de datos, podemos ver la selección de variables como un método para hacer que el modelo sea más robusto frente a datos no representativos.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#inferencia-predictiva-por-proyección",
    "href": "06_Regresión_lineal_con_Bambi.html#inferencia-predictiva-por-proyección",
    "title": "7  Regresión lineal con Bambi",
    "section": "7.10 Inferencia predictiva por proyección",
    "text": "7.10 Inferencia predictiva por proyección\nExisten muchos métodos para realizar selección de variables. En esta sección, nos centraremos en uno de ellos llamado inferencia predictiva por proyección . La razón principal por la que nos centramos en este método es que ha mostrado un rendimiento muy bueno en una amplia gama de problemas.\nLos principales pasos de la iinferencia predictiva por proyección son:\n\nGenerar un modelo de referencia, es decir, un modelo con todas las variables que creas que pueden ser relevantes y/o pudiste medir.\nGenerar un conjunto de submodelos, es decir, modelos que solo incluyen algún subconjunto de las variables presentens en el modelo de referencia.\nEligir el modelo más pequeño que haga predicciones lo suficientemente cercanas al modelo de referencia.\n\nAl realizar inferencia predictiva por proyección, solo necesitamos realizar la inferencia Bayesiana “tradicional” una sola vez, solo para el modelo de referencia. Para los submodelos, las distribuciones a psoteriori se obtienen por proyección. Sin entrar en detalles técnicos, la proyección consiste en encontrar los parámetros para los submodelos de tal forma que las predicciones de los submodelos sean lo más cercanas posible a las predicciones del modelo de referencia. La proyección se puede realizar de una manera computacionalmente eficiente, por lo que el costo de estimar un posterior es mucho más económico que con los métodos MCMC. Esto es relevante porque el número total de submodelos posibles explota a medida que aumentamos el número de variables en el modelo de referencia. Considere que necesitamos evaluar todas las combinaciones posibles, sin repetir variables. Por ejemplo, digamos que tenemos cuatro variables (\\(A\\), \\(B\\), \\(C\\) y \\(D\\)) y necesitamos evaluar 7 modelos, a saber, \\(A\\), \\(B\\), \\(C\\), \\(AB\\), \\(BC\\), \\(AC\\) y el modelo de referencia \\(ABC\\). Siete no parece mucho, pero cuando tengamos 8 variables, necesitaremos evaluar 92 modelos diferentes. Duplicamos la cantidad de variables y la cantidad de modelos aumentó más de 10 veces!\nPor supuesto, hay formas de reducir el número total de submodelos a explorar. Por ejemplo, podríamos utilizar algún método económico para filtrar las variables más prometedoras y solo hacer inferencias predictivas de proyección sobre ellas. Otra alternativa se conoce como búsqueda directa; es decir, primero ajustamos tantos modelos como variables tenemos. Luego seleccionamos un modelo/variable, el que genera las predicciones más cercanas al modelo de referencia. Luego generamos todos los submodelos con 2 variables que incluyan la variable seleccionada en el paso anterior y así sucesivamente. Si hacemos este procedimiento directo para un modelo de referencia con 8 variables en lugar de 92 modelos diferentes, necesitaremos evaluar solo 36.\nOtro aspecto que es relevante considerar al realizar inferencia predictiva por proyección es que solo proporcionamos a prioris para el modelo de referencia. Los submodelos no tienen priors explícitos; simplemente heredan los priors del modelo de referencia a través del procedimiento de proyección.\nUna de las razones por las que la predicción proyectiva funciona en la práctica es gracias al uso de un modelo de referencia. Al ajustar los submodelos a las predicciones dentro de la muestra realizadas por el modelo de referencia, en lugar de los datos observados, estamos filtrando el ruido en los datos. Esto ayuda a separar las variables más relevantes de las menos relevantes.",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "06_Regresión_lineal_con_Bambi.html#selección-de-variables-con-kulprit",
    "href": "06_Regresión_lineal_con_Bambi.html#selección-de-variables-con-kulprit",
    "title": "7  Regresión lineal con Bambi",
    "section": "7.11 Selección de variables con Kulprit",
    "text": "7.11 Selección de variables con Kulprit\nKulprit es un paquete de Python para inferencia predictiva por proyecciones. Funciona con Bambi, ya que podemos pasar un modelo de referencia creado con él y Kulprit hará todo el trabajo pesado por nosotros.\nPara ilustrar cómo usar Kulprit, usaremos el conjunto de datos de grasa corporal. Este conjunto de datos tiene medidas de 251 individuos, incluida su edad, peso, altura, circunferencia del abdomen, etc. Nuestro propósito es predecir el porcentaje de grasa corporal (según lo estimado por la variable siri). Dado que obtener mediciones precisas de la grasa corporal es costoso y potencialmente molesto para los pacientes, queremos reducir las mediciones manteniendo una buena precisión predictiva para siri. El conjunto de datos original incluye 13 variables. Para que este ejemplo sea realmente simple, he preseleccionado 6.\nLo primero que debemos hacer es definir y ajustar un modelo de Bambi, como es habitual. Tenemos que asegurarnos de incluir el argumento idata_kwargs={'log_likelihood':True}}. Internamente, Kulprit calcula el ELPD, usando LOO.\n\nbody = pd.read_csv(\"datos/body_fat.csv\")\n\n\nmodel = bmb.Model(\"siri ~ age + weight + height + abdomen + thigh + wrist\",\n                  data=body)\nidata = model.fit(idata_kwargs={'log_likelihood': True})\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [siri_sigma, Intercept, age, weight, height, abdomen, thigh, wrist]\n\n\n\n\n\n\n\n\n\n\n\nSampling 4 chains for 1_000 tune and 1_000 draw iterations (4_000 + 4_000 draws total) took 8 seconds.\n\n\nEl principal punto de entrada de Kulprir es mediante la clase ProjectionPredictive. Una vez provista del modelo de Bambi y los datos resultantes del ajuste de ese modelo. Podemos pedirle a Kulprit que realice una búsqueda. Este paso puede demorar un rato, es la parte pesada de todo el proceso.\n\nppi = kpt.ProjectionPredictive(model, idata)\nppi.search()\n\nUna vez finalizada la búsqueda, podemos pedirle a Kulprit que compare los submodelos en términos del ELPD. Los submodelos se mostrarán ordenados desde el ELPD más bajo hasta el más alto, como en la siguiente figura\n\nppi.plot_compare(plot=True, figsize=(10, 4));\n\n/home/osvaldo/proyectos/00_BM/arviz-devs/arviz/arviz/stats/stats.py:792: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.62 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n/home/osvaldo/proyectos/00_BM/arviz-devs/arviz/arviz/stats/stats.py:792: UserWarning: Estimated shape parameter of Pareto distribution is greater than 0.62 for one or more samples. You should consider using a more robust model, this is because importance sampling is less likely to work well if the marginal posterior and LOO posterior are very different. This is more likely to happen with a non-robust model and highly influential observations.\n  warnings.warn(\n\n\n\n\n\n\n\n\n\nEn el eje x, tenemos el tamaño del submodelo, es decir, el número de variables; Comenzamos en cero porque incluimos un modelo con solo un intercepto y sin ninguna covariables. La línea gris discontinua corresponde al ELPD del modelo de referencia.\nPodemos ver que un submodelo de tamaño 3 es prácticamente equivalente al modelo de referencia. Pero ¿qué variables se incluyen exactamente en este y otros submodelos? Si imprimimos el objeto ppi, luego de realizar una búsqueda, obtendremos una lista ordenada de las fórmulas de los submodelos que coinciden con el orden en el gráfico obtenido con el comando ppi.plot_compare()\n\nppi\n\n  0 siri ~ 1\n  1 siri ~ abdomen\n  2 siri ~ abdomen + weight\n  3 siri ~ abdomen + weight + wrist\n  4 siri ~ abdomen + weight + wrist + height\n  5 siri ~ abdomen + weight + wrist + height + age\n  6 siri ~ abdomen + weight + wrist + height + age + thigh\n\n\nEl modelo de tamaño 3 es el que incluye las variables abdomen, wrist y height. Este resultado nos dice que si queremos elegir un modelo con menos variables que el modelo de referencia pero con una precisión predictiva similar, entonces esta es una buena opción. Dependiendo del contexto, otros submodelos también pueden ser una buena idea. Por ejemplo, podemos argumentar que la diferencia entre el submodelo de tamaños 2 y 3 es bastante pequeña. Por lo tanto, es posible que estemos dispuestos a sacrificar algo de precisión en favor de un modelo aún más pequeño. Para este ejemplo, medir la altura de los pacientes puede no ser tan problemático, pero para otros escenarios, agregar una tercera variable podría resultar costoso, molesto, peligroso, etc.\nOtra forma de interpretar este resultado es notar qué los ELPD para modelos con tamaño 3 o mayor son esencialmente idénticos. Puede darse el caso de que si repetimos el análisis con un conjunto de datos ligeramente diferente, o incluso el mismo conjunto de datos pero con más muestras a posteriori, podamos obtener un orden ligeramente diferente. Por lo tanto, es posible que tengamos otros modelos de tamaño 3 con potencialmente la misma capacidad predictiva, entonces podríamos justificar la selección de la tercera variable por factores externos como qué tan fácil o barato es medirla, o cuál sería menos dolorosa de medir para los pacientes, etc.\nEn resumen, como ocurre con otras herramientas estadísticas, los resultados no deben tomarse a ciegas sino en contexto; usted deben tener la última palabra y no sus herramientas. Las herramientas solo deben ayudar a fundamentar sus decisiones.\nBien, digamos que efectivamente estamos interesados en el submodelo de tamaño 3 calculado por Kulprit; podemos conseguirlo con:\n\nsubmodelo = ppi.project(3)\n\nDesde el objeto submodel, podemos recuperar información útil como el modelo de Bambi submodelo.model o el objeto InferenceData submodelo.idata.\nUna advertencia al interpretar estos dos objetos: submodelo.model es un modelo de Bambi generado a partir de una fórmula. Así, sus priors serán los computados automáticamente por Bambi. Pero el posterior que calcula Kulprit, que está almacenado en submodelo.idata.posterior, no proviene directamente de este modelo. Ya que los priors son “heredados” implícitamente durante el paso de proyección.\n\naz.plot_posterior(submodelo.idata, figsize=(12, 6));\n\n\n\n\n\n\n\n\n¿Podemos confiar en las distribuciones a posteriori proyectados?\nEn condiciones muy generales, deberían ser distribuciones válidas, lo son al menos para obtener una idea aproximada de los valores de los parámetros y, por supuesto, es suficiente para la selección de variables. La falta de priors explícitos podría dificultar la interpretación del modelo, pero si solo nos importan las predicciones, eso no debería ser un problema. Por supuesto, siempre es posible usar Kulprit para determianr el submodelo y luego Bambi (o PyMC) para calcular explícitamente el posterior de ese modelo adaptado los priors de ser necesario.\nLa siguiente figura muestra un forestplot para el posteriors del submodelo 3 y para el modelo de referencia. Observe que aquí hay dos posibles fuentes de diferencias: las diferencias entre MCMC y los métodos predictivos por proyección y las diferencias intrínsecas entre los posteriors para ambos modelos.\n\nppi.plot_densities(var_names=[\"~Intercept\", \"~age\", \"~height\", \"~thigh\"],\n                   submodels=[3],\n                   kind=\"forest\",\n                   figsize=(11, 4),\n                   plot_kwargs={\"colors\":[\"C0\", \"C2\"]});",
    "crumbs": [
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Regresión lineal con Bambi</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html",
    "href": "07_Comparación_de_modelos.html",
    "title": "8  Comparación de modelos",
    "section": "",
    "text": "8.1 Pruebas predictivas a posteriori\nTodos los modelos son erróneos, en el sentido de que solo son aproximaciones que se utilizan para intentar comprender un problema a través de datos y no una copia literal del mundo real. Si bien todos los modelos son incorrectos, no todos los modelos son igualmente incorrectos; algunos modelos serán mejores que otros al describir los mismos datos. Incluso algunos modelos serán mejores que otros solo para cierto rango o subconjunto de los datos.\nEn los capítulos anteriores, centramos nuestra atención en el problema de inferencia, es decir, cómo aprender el valor de los parámetros a partir de los datos. En este capítulo, nos centraremos en un problema complementario: cómo comparar dos o más modelos utilizados para explicar los mismos datos. Como veremos, este no es un problema trivial y, al mismo tiempo, es un problema central en el análisis de datos.\nEn el presente capítulo, exploraremos los siguientes temas:\nPreviamente hemos presentado y discutido las pruebas predictivas a posteriori como una forma de evaluar qué tan bien los modelos explican los mismos datos que se usan para ajustar al modelo. El propósito de este tipo de pruebas no es el de dictaminar que un modelo es incorrecto; ¡Esto ya lo sabemos! El objetivo del ejercicio es comprender qué tan bien estamos capturando los datos. Es frecuente que capturemos diferentes aspectos de los datos de diferentes maneras. Al realizar pruebas predictivas a posteriori, esperamos comprender mejor las limitaciones de un modelo, ya sea para tenerlas en cuenta o para intentar mejorar el modelo. Es esperable que un modelo no sea capaz de reproducir todos los aspectos de un problema y, por lo general, esto no es un problema ya que los modelos se construyen con un propósito en mente. Una prueba predictiva a posteriori es una forma de evaluar ese propósito, por lo tanto, si tenemos más de un modelo, podemos compararlos mediante pruebas predictivas a posteriori.\nVeamos un ejemplo sencillo. Tenemos un conjunto de datos x e y. Vamos a ajustar estos datos con un modelo lineal:\n\\[\ny = \\alpha + \\beta x\n\\]\nY un polinomio de orden 2:\n\\[\ny = \\alpha + \\beta_0 x + \\beta_1 x^2\n\\]\nEn el siguiente bloque de código cargamos los datos en las variables x e y “apilamos” x, x**2 y estandarizamos.\ndummy_data = np.loadtxt('datos/dummy.csv')\nx = dummy_data[:,0]\ny = dummy_data[:,1]\n\norder = 2\nx_p = np.vstack([x**i for i in range(1, order+1)])\nx_c = (x_p - x_p.mean(axis=1, keepdims=True)) / x_p.std(axis=1, keepdims=True)\ny_c = (y - y.mean()) / y.std()\nplt.scatter(x_c[0], y_c)\nplt.xlabel('x')\nplt.ylabel('y');\nAhora, vamos a ajustar estos datos con dos modelos ligeramente diferentes, uno lineal y el otro un polinomio de orden 2, también conocido como modelo parabólico o cuadrático:\nwith pm.Model() as model_l:\n    α = pm.Normal('α', mu=0, sigma=1)\n    β = pm.Normal('β', mu=0, sigma=10)\n    σ = pm.HalfNormal('σZ', 5)\n\n    μ = α + β * x_c[0]\n    \n    y_pred = pm.Normal('y_pred', mu=μ, sigma=σ, observed=y_c)\n\n    idata_l = pm.sample(2000, idata_kwargs={\"log_likelihood\": True})\n    idata_l.extend(pm.sample_posterior_predictive(idata_l))\n\nwith pm.Model() as model_p:\n    α = pm.Normal('α', mu=0, sigma=1)\n    β = pm.Normal('β', mu=0, sigma=10, shape=order)\n    σ = pm.HalfNormal('σ', 5)\n\n    μ = α + pm.math.dot(β, x_c)\n    \n    y_pred = pm.Normal('y_pred', mu=μ, sigma=σ, observed=y_c)\n\n    idata_p = pm.sample(2000, idata_kwargs={\"log_likelihood\": True})\n    idata_p.extend(pm.sample_posterior_predictive(idata_p))\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α, β, ϵ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [12000/12000 00:02&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 2_000 draw iterations (4_000 + 8_000 draws total) took 2 seconds.\nSampling: [y_pred]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:00&lt;00:00]\n    \n    \n\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [α, β, ϵ]\n\n\n\n\n\n\n\n    \n      \n      100.00% [12000/12000 00:04&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 2_000 draw iterations (4_000 + 8_000 draws total) took 5 seconds.\nSampling: [y_pred]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:00&lt;00:00]\nAhora, vamos a visualizar el ajuste para ambos modelos:\nx_new = np.linspace(x_c[0].min(), x_c[0].max(), 100)\n\nposterior_l = az.extract(idata_l)\nposterior_p = az.extract(idata_p)\n\nα_l_post = posterior_l['α'].mean().item()\nβ_l_post = posterior_l['β'].mean().item()\ny_l_post = α_l_post + β_l_post *  x_new\n\nplt.plot(x_new, y_l_post, 'C0', label='modelo lineal')\n\nα_p_post = posterior_p['α'].mean().item()\nβ_p_post = posterior_p['β'].mean(\"sample\")\nidx = np.argsort(x_c[0])\ny_p_post = α_p_post + np.dot(β_p_post, x_c)\n\nplt.plot(x_c[0][idx], y_p_post[idx], 'C1', label=f'polinomio de orden {order}')\n\nplt.plot(x_c[0], y_c, \"k.\")\nplt.legend();\nAmbos modelos parecen brindar ajustes razonables, aunque el modelo de orden 2 parece estar haciendo un mejor trabajo, pero el modelo lineal no es tan malo.\nEn el mismo sentido la siguiente figura muestra un mejor acuerdo del ajuste polinomial sobre el lineal\n_, axes = plt.subplots(1, 2, figsize=(10, 4), sharey=True)\naz.plot_ppc(idata_l, num_pp_samples=100, ax=axes[0], legend=False)\naxes[0].set_title('modelo lineal')\naz.plot_ppc(idata_p, num_pp_samples=100, ax=axes[1]);\naxes[1].set_title(f'polinomio de orden {order}');\nEn vez de comparar directamente la distribución de datos observados versus la distribución predicha podemos comparar estadísticos sumarios.\nEn el panel superior de la siguiente figura se muestra 2 KDEs, representando la distribución de las medias predichas por los modelos. El punto sobre eje x indica el valor observado.\nEn el segundo panel lo mismo pero para el rango intercuartil.\nfig, axes = plt.subplots(2, 1, figsize=(12, 8), sharey=\"row\")\ncolors = [\"C0\", \"C1\"]\ntitles = [\"media\", \"rango intercuartil\"]\nmodelos = [\"lineal\", f'orden {order}']\nidatas = [idata_l, idata_p]\n\ndef iqr(x, a=-1):\n    return np.subtract(*np.percentile(x, [75, 25], axis=a))\n\nfor idata, c in zip(idatas, colors):\n    az.plot_bpv(idata, kind=\"t_stat\", t_stat=\"mean\", ax=axes[0], color=c)\n    \n\nfor idata, c in zip(idatas, colors):\n    az.plot_bpv(idata, kind=\"t_stat\", t_stat=iqr, ax=axes[1], color=c)\n\nfor ax, title, in zip(axes, titles):\n    ax.set_title(title)\n    for idx, (c, modelo) in enumerate(zip(colors, modelos)):\n        ax.legend_.legend_handles [idx]._alpha = 1\n        ax.legend_.legend_handles [idx]._color = c\n        ax.legend_._loc = 1\n        ax.legend_.texts[idx]._text = modelo + \" \" + ax.legend_.texts[idx]._text\nEn la figura anterior también se incluyen unos valores llamados bpv, por Bayesian p-value. Los bpv son una forma numérica de resumir una comparación entre datos simulados y datos reales. Para obtenerlos se elige un estadístico sumario \\(T\\), como por ejemplo la la media, mediana, desviación estándar etc. Luego se calcula \\(T\\) para los datos observados \\(T_{\\text{obs}}\\) y para los datos simulados \\(T_{\\text{sim}}\\). Luego podemos hacernos dos preguntas:\n\\[\\text{valor p Bayesiano} \\triangleq p(T_{\\text{sim}} \\le T_{\\text{obs}}  \\mid \\tilde Y)\\]\nPara quienes estén familiarizados con los valores p y su uso en estadística frecuentista van un par de aclaraciones. Lo Bayesiano de estos valores p es que NO estamos usando una distribución de muestreo sino la distribución predictiva a posteriori. Y una diferencia importante con la versión frecuentista es que en este caso no estamos haciendo una prueba de hipótesis nula, ni intentando declarar que una diferencia es “significativa”.\nEn la figura anterior \\(T\\) es la media (panel superior) o el rango interquartil (panel inferior). En este ejemplo es razonable que la media de bien ya que el modelo lineal está construido para capturar la media. Si \\(T\\) fuese la mediana, observaríamos diferencias algo más grandes. En general un estadístico que sea ortogonal a lo que el modelo ajusta de forma directa será más informativo para evaluar al modelo. Ante la duda puede ser conveniente evaluar más de un estadístico. En general es útil preguntarse que aspectos de los datos nos interesa capturar mejor.\nfig, ax = plt.subplots(figsize=(10, 3))\n\nfor idata, c in zip(idatas, colors):\n    az.plot_bpv(idata, color=c, ax=ax)\nLas pruebas predictivas a posteriori ofrecen un marco muy flexible para evaluar y comparar modelos, ya sea utilizando gráficos o resúmenes numéricos como los valores p bayesianos, o incluso una combinación de ambos. El concepto es lo suficientemente general para permitir que una analista use su imaginación para encontrar diferentes formas de explorar la distribución predictiva a posteriori y use las que mejor se ajusten a los fines de poder interpretar los datos y modelos.\nEn las siguientes secciones vamos a explorar otros métodos para comparar modelos.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html#pruebas-predictivas-a-posteriori",
    "href": "07_Comparación_de_modelos.html#pruebas-predictivas-a-posteriori",
    "title": "8  Comparación de modelos",
    "section": "",
    "text": "Cual es la probabilidad que \\(T_{\\text{sim}}\\) sea menor o igual a \\(T_{\\text{obs}}\\)?. Si los valores observados concuerdan con los predichos, el valor esperado será 0.5. Es decir la mitad de las predicciones están por debajo y la mitad por encima de lo observado. Esta cantidad es lo que se conoce como valor p Bayesiano.\n\n\n\n\n\nOtra forma de usar los bpv, es preguntar para cada valor observado, cual es la probabilidad de predecir un valor menor o igual. Si el modelo está bien calibrado la probabilidad debería ser la misma para todos los valores. Es decir para cualquier observación que tomemos deberíamos encontrar tantas simulaciones por encima como por debajo de ese valor. En definitiva deberíamos esperar una distribución uniforme. En la siguiente figura se muestran las distribuciones para el modelo lineal y polinomio de orden 2. La linea blanca indica la distribución uniforme esperada y la banda gris indica las desviaciones esperadas dado el tamaño finito de la muestra. Se puede ver que ambos modelos son muy similares.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html#el-equilibro-entre-simplicidad-y-exactitud",
    "href": "07_Comparación_de_modelos.html#el-equilibro-entre-simplicidad-y-exactitud",
    "title": "8  Comparación de modelos",
    "section": "8.2 El equilibro entre simplicidad y exactitud",
    "text": "8.2 El equilibro entre simplicidad y exactitud\nAl elegir entre explicaciones alternativas, existe un principio conocido como la navaja de Occam. En lineas muy generales este principio establece que dadas dos o más explicaciones equivalentes para el mismo fenómeno, la más simple es la explicación preferida. Un criterio común de simplicidad es la cantidad de parámetros de un modelo.\nHay muchas justificaciones para esta heurística, no vamos a discutir ninguna simplemente vamos a aceptarla como una guía razonable.\nOtro factor que generalmente debemos tener en cuenta al comparar modelos es su exactitud, es decir, qué tan bueno es un modelo ajustando los datos. Según este criterio si tenemos dos (o más) modelos y uno de ellos explica los datos mejor que el otro, entonces ese es el modelo preferido.\nIntuitivamente, parece que al comparar modelos, tendemos a preferir aquellos que mejor ajusten los datos y aquellos que sean más simples. ¿Pero que hacer si estos dos principios se contraponen? O de forma más general, ¿Existe una forma cuantitativa de contemplar ambas contribuciones? La respuesta corta es que si, de hecho hay más de una forma de hacerlo. Pero antes veamos un ejemplo a fin de generar mayor intuición.\n\n8.2.1 Muchos parámetros (pueden) conducir a sobreajuste\nVamos a comenzar por combinar polinomios cada vez más complejos en un conjunto de datos muy simple. En lugar de utilizar la maquinaria Bayesiana, usaremos la aproximación de mínimos cuadrados para ajustar modelos lineales.\n\n_, ax = plt.subplots(1, 1, figsize=(12, 4))\n\n\nx0 = np.array([4., 5., 6., 9., 12, 14.])\ny0 = np.array([4.2, 6.1, 5., 10., 10, 14.])\n\norder = [0, 1, 5]\nax.plot(x0, y0, 'ko', zorder=3)\n\n\nax.set_yticks([])\nax.set_xticks([])\n\nx_n = np.linspace(x0.min(), x0.max(), 100)\nps = []\nfor i in order:\n    p = np.polynomial.Polynomial.fit(x0, y0, deg=i)\n    ps.append(p)\n    yhat = p(x0)\n    ybar = np.mean(y0)\n    ss_regression = np.sum((yhat-y0)**2)\n    ss_total = np.sum((ybar-y0)**2)\n    r2 = 1 - ss_regression / ss_total\n    ax.plot(x_n, p(x_n), label=f'orden {i}, $R^2$= {r2:.3f}')\n\n    \nax.legend(loc=2, fontsize=12);\n\n\n\n\n\n\n\n\nDe la figura anterior podemos ver que el aumento de la complejidad del modelo se acompaña de una mayor exactitud reflejada en el coeficiente de determinación R². De hecho, podemos ver que el polinomio de orden 5 se ajusta perfectamente a los datos, obteniendo un R²=1.\n¿Por qué el polinomio de grado 5 puede capturar los datos sin perder uno solo de ellos? La razón es que tenemos el mismo número de parámetros que de datos es decir 6. Por lo tanto, el modelo está actuando simplemente como una forma alternativa de expresar los datos. El modelo no está aprendiendo algo sobre los datos, ¡Está memorizando los datos! A partir de este simple ejemplo, podemos ver que un modelo con mayor ajuste no siempre es lo ideal.\nAhora agregaremos dos datos nuevos y sin volver a ajustar los modelos veremos como cambia el R². Se puede ver que al modelo lineal le va mejor en este caso que al polinomial.\n\n_, ax = plt.subplots( figsize=(12, 4))\nx_ = np.array([6.5, 10])\ny_ = np.array([7, 10])\n\nax.plot(x0, y0, 'ko', zorder=3)\nax.plot(x_, y_, 'ks', zorder=3)\n\nax.set_yticks([])\nax.set_xticks([])\n\nx1 = np.concatenate((x0, x_))\ny1 = np.concatenate((y0, y_))\n\nfor idx, i in enumerate(order):\n    yhat = ps[idx](x1)\n    ybar = np.mean(y1)\n    ss_regression = np.sum((yhat-y1)**2)\n    ss_total = np.sum((ybar-y1)**2)\n    r2 = 1 - ss_regression / ss_total\n    ax.plot(x_n, ps[idx](x_n), label=f'orden {i}, $R^2$= {r2:.3f}')\n\n    \nax.legend(loc=2, fontsize=12);\n\n\n\n\n\n\n\n\nCuando un modelo ajusta muy bien, el conjunto de datos utilizado para aprender los parámetros de ese modelo, pero muy mal otros conjuntos de datos, decimos que tenemos sobreajuste (overfitting). Este es un problema muy común al analizar datos.\nUna forma muy útil de pensar el sobreajuste es considerar que un conjunto de datos tiene dos componentes; la señal y el ruido. La señal es lo que queremos capturar (o aprender) de los datos. Si usamos un conjunto de datos es porque creemos que hay una señal allí, de lo contrario será un ejercicio fútil. El ruido, en cambio, no es útil y es el producto de los errores de medición, las limitaciones en la forma en que se generaron o capturaron los datos, la presencia de datos corruptos, etc. Un modelo sobreajusta cuando es tan flexible (para un conjunto de datos) que es capaz de aprender el ruido. Esto tiene como consecuencia que la señal queda oculta.\nEsta es una justificación práctica para la navaja de Occam. Y nos advierte que al menos en principio, siempre es posible crear un modelo tan complejo que explique todos los detalles, incluso los más irrelevantes. Tal como en el Imperio descripto por Borges, donde los cartógrafos alcanzaron tal nivel de sofisticación que crearon un mapa del Imperio cuyo tamaño era el del propio Imperio, y que coincidía punto por punto con él.\n\n\n8.2.2 Muy pocos parámetros conducen a un subajuste\nContinuando con el mismo ejemplo pero en el otro extremo de complejidad, tenemos el modelo de orden 0. Este modelo es simplemente una Gaussiana disfrazada de modelo lineal. Este modelo solo es capaz de capturar el valor de la media de \\(Y\\), y es por lo tanto totalente indiferente a los valores de \\(x\\). Decimos que este modelo ha subajustado los datos.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html#medidas-de-exactitud-predictiva",
    "href": "07_Comparación_de_modelos.html#medidas-de-exactitud-predictiva",
    "title": "8  Comparación de modelos",
    "section": "8.3 Medidas de exactitud predictiva",
    "text": "8.3 Medidas de exactitud predictiva\nTodo debe hacerse tan simple como sea posible, pero no más simple es una cita que a menudo se atribuye a Einstein. Al igual que en una dieta saludable, al modelar tenemos que mantener un balance. Idealmente, nos gustaría tener un modelo que ni sub-ajuste ni sobre-ajuste los datos. De alguna forma hay que balancear simplicidad y bondad de ajuste.\nEn el ejemplo previo, es relativamente facil de ver que el modelo de orden 0 es demasiado simple mientras que el modelo de orde 5 es demasiado complejo. Pero que podemos decir de los otros dos modelos? Cómo podríamos establecer un ranking numérico de estos modelos? Para poder hacer esto necesitamos formalizar nuestra intuición sobre este balance entre simplicidad y exactitud\nVeamos un par de términos que nos serán de utilidad.\n\nExactitud dentro de la muestra (within-sample accuracy). La exactitud medida con los mismos datos usado para ajustar el modelo.\nExactitud fuera de la muestra (out-of-sample accuracy). La exactitud medida con datos no usados para ajustar el modelo.\n\nLa exactitud dentro de la muestra será, en promedio, menor a la exactitud fuera de la muestra. Es por ello que usar la exactitud dentro de la muestra para evaluar un modelo en general conducirá a pensar que tenemos un mejor modelo de lo que realmente es. Utilizar la exactitud fuera de la muestra es por lo tanto una mejor idea para evitar engañarnos a nosotros mismos. Sin embargo, esta aproximación requiere dejar datos fuera del ajuste, lo cual es un lujo que en general no nos podemos dar. Ya que este es un problema central en el análisis de datos existen varias propuestas para abordarlo. Dos aproximaciones muy populares son:\n\nValidación cruzada: esta es una estrategia empírica basada en dividir los datos disponibles en subconjuntos separados que se utilizan para ajustar y evaluar de forma alternativa\nCriterios de información: este es un término general usado para referirse a varias expresiones que aproximan la exactitud fuera de la muestra como la exactitud dentro de la muestra más un término que penaliza la complejidad del modelo.\n\n\n8.3.1 Validación cruzada\nLa validación cruzada es una solución simple y, en la mayoría de los casos, efectiva para comparar modelos. Tomamos nuestros datos y los dividimos en K porciones. Intentamos mantener las porciones más o menos iguales (en tamaño y, a veces, también en otras características, como, por ejemplo, un número igual de clases). Luego usamos K-1 porciones para entrenar el modelo y el resto para evaluarlo. Este proceso se repite sistemáticamente dejando, por cada iteración, una porción diferente fuera del conjunto de entrenamiento y usando esa porción como el conjunto de evaluación. Esto se repite hasta que hayamos completado K rondas de ajuste-evaluación. La exactitud del modelo será la del promedio a lo largo de las K rondas. Esto se conoce como validación cruzada K-fold. Por último, una vez que hemos relizado la validación cruzada, usamos todos los datos para ajustar por última vez nuestro modelo y este es el modelo que se utiliza para hacer predicciones o para cualquier otro fin.\n\nCuando K es igual a la cantidad de puntos de datos, obtenemos lo que se conoce como validación cruzada dejando uno afuera (LOOCV del inglés leave-one-out cross-validation).\nLa validación cruzada es una práctica de rutina en machine learning. Y apenas hemos descripto los aspectos más esenciales de esta práctica. Para mayor información pueden leer The Hundred-Page Machine Learning Book o Python Machine Learning, by Sebastian Raschka, o Python Data Science Handbook by Jake Vanderplas.\nLa validación cruzada es una idea muy simple y útil, pero para algunos modelos o para grandes cantidades de datos, el costo computacional de la validación cruzada puede estar más allá de nuestras posibilidades. Muchas personas han tratado de encontrar cantidades más simples de calcular que se aproximen a los resultados obtenidos con la validación cruzada o que funcionen en escenarios donde la validación cruzada no puede ser tan fácil de realizar. Y ese es el tema de la siguiente sección.\n\n\n8.3.2 Criterios de información\nLos criterios de información son una colección de herramientas estrechamente relacionadas que se utilizan para comparar modelos en términos de la bondad del ajuste y de la complejidad del modelo. En otras palabras, los criterios de información formalizan la intuición que desarrollamos al comienzo del capítulo. La forma exacta en que se derivan estas cantidades tiene que ver con un campo conocido como Teoría de la Información.\nUna forma intuitiva de medir qué tan bien un modelo se ajusta a los datos es calcular el error cuadrático medio entre los datos y las predicciones realizadas por el modelo:\n\\[\\frac{1}{n} \\sum_{i=1}^{n}  (y_i - \\operatorname{E} (y_i \\mid \\theta))^2\\]\n\\(\\operatorname{E} (y_i \\mid \\theta)\\) es el valor predicho dados los parámetros estimados. Es importante notar que esto es esencialmente el promedio de la diferencia entre los datos observados y los predichos. Tomar el cuadrado de los errores asegura que las diferencias no se cancelen y enfatiza grandes errores comparado con otros alternativas como por ejemplo calcular el valor absoluto.\nEl error cuadrático medio, puede resultarnos familiar ya que es muy popular. Pero si nos detenemos a reflexionar sobre esta cantidad veremos que en principio no tiene nada de especial y bien podríamos idear otras expresiones similares. Cuando adoptamos una aproximación probabilista vemos que una expresión más general (y natural) es la siguiente:\n\\[ \\sum_{i=1}^{n} \\log p(y_i \\mid \\theta)\\]\nEsto es, la suma (sobre \\(n\\) datos) de los likelihoods (en escala logarítmica). Esto es natural por que al elegir un likelihood en un modelo estamos eligiendo implícitamente una métrica para evaluar el ajuste del modelo. Cuando \\(p(y_i \\mid \\theta)\\) es una gaussiana entonces la suma de log-likelihood será proporcional al error cuadrático medio.\n\n8.3.2.1 Criterio de información de Akaike\nEste es un criterio de información muy conocido y ampliamente utilizado fuera del universo Bayesiano y se define como:\n\\[AIC = -2 \\sum_{i=1}^{n} \\log p(y_i \\mid \\hat{\\theta}_{mle}) + 2 k \\]\nDonde, k es el número de parámetros del modelo y \\(\\hat{\\theta}_{mle}\\) es la estimación por máxima verosimilitud para \\(\\theta\\).\nLa estimación de máxima verosimilitud es una práctica común para los no-bayesianos y, en general, es equivalente a la estimación Bayesiana del máximo a posteriori (MAP) cuando se usan priors planos. Es importante notar que \\(\\hat{\\theta}_{mle}\\) es una estimación puntual y no una distribución.\nEl factor \\(-2\\) es tan solo una constante, y podríamos omitirla pero usualmente no se hace. Lo importante, desde el punto de vista práctico, es que el primer término toma en cuenta cuan bien el modelo ajusta los datos, mientras que el segundo término penaliza la complejidad del modelo. Por lo tanto si dos modelos ajustan los datos igualmente bien. AIC dice que deberemos elegir aquel modelo con el menor número de parámetros.\nAIC funciona bien en enfoques no-bayesianos, pero de lo contrario es problemático. Una de las razones es que no utiliza la distribución a posteriori de \\(\\theta\\) y, por lo tanto, descarta información sobre la incertidumbre en la estimación. Además AIC, desde una pespectiva Bayesiana, asume que los priors son planos y, por lo tanto, AIC es incompatible con priors informativos y ligeramente informativos como los utilizados en este libro. Además, la cantidad de parámetros de un modelo no es una buena medida de la complejidad del mismo cuando se usan priors informativos o estructuras como la jerárquica ya que estas son formas de reducir la cantidad efectiva de parámetros, algo también conocido como regularización. Más adelante volveremos sobre esta idea de regularización.\n\n\n8.3.2.2 Widely applicable information criterion\nWAIC es algo así como la versión Bayesiana de AIC, al igual que este último WAIC se compone de dos términos uno que mide el ajuste y otro que penaliza. La siguiente expresión asume que la distribución a posteriori está representada como una muestra de tamaño S (como la obtenida de un método MCMC).\n\\[WAIC = -2 \\sum_i^n \\log \\left(\\frac{1}{S} \\sum_{s=1}^S p(y_i \\mid \\theta^s) \\right) + 2 \\sum_i^n  \\left( V_{s=1}^S \\log p(y_i \\mid \\theta^s) \\right)\\]\nEl primer término es similar al criterio de Akaike, solo que evaluado para todas las observaciones y todas las muestras del posterior. El segundo término es un poco más difícil de justificar sin entrar en tecnicismos. Pero es también una forma de penalizar la complejidad del modelo. Lo importante desde el punto de vista práctico es que WAIC usa todo el posterior (y no una estimación puntual) para el cálculo de ambos términos, por lo que WAIC puede ser aplicado virtualmente a cualquier modelo Bayesiano.\n\n\n8.3.2.3 Validación cruzada (aproximada)\nEl problema clave con la validación cruzada dejando uno fuera es que es muy costosa ya que tenemos que reajustar el modelo tantas veces como datos tengamos. Por suerte, es posible aproximarla con un solo ajuste a los datos! El método para hacer esto se llama “muestreo de importancia usando un suavizado de Pareto”. El nombre es tan poco agraciado que en la práctica le decimos LOO. Conceptualmente lo que estamos tratando de calcular es:\n\\[\n\\text{ELPD}_\\text{LOO-CV} = \\sum_{i=1}^{n} \\log\n    \\int \\ p(y_i \\mid \\theta) \\; p(\\theta \\mid y_{-i}) d\\theta\n\\]\n\\[\n\\sum_{i}^{n} \\log\n    \\left( \\frac{1}{s}\\sum_j^s \\mathbin{\\color{#E9692C}{p(y_i \\mid \\theta_{-i}^j)}} \\right)\n\\]\ndonde \\(_{-i}\\) quiere decir que dejamos la observación \\(i\\) afuera. Es posible aproximar \\(\\color{#E9692C}{p(y_i \\mid \\theta_{-i}^j})\\) usando importance sampling, que es una forma de aproximar una distribución repesando valores obtenidos a partir de otra distribución. En nuestro caso la distribución conocida, una vez ajustado un modelo, es el log-likelihood para todas las observaciones. Y queremos aproximar el log-likelihood si hubieramos eliminado una observación. Para ello necesitamos estimar la “importancia” (o peso) que cada observación tiene en determinar la distribución a posteriori. Una observación será más “importante” (o pesada) mientras más cambie el posterior al eliminar esa observación. Intuitivamente una observación relativamente poco probable es más importante (o tiene más peso) que una esperada. Por suerte estos pesos se puede estimar sin necesidad de reajustar el modelo, de hecho el peso de la observación \\(i\\) para la muestra del posterior \\(s\\) es:\n\\[\nw_s = \\frac{1}{p(y_i \\mid \\theta_s)}\n\\]\nEl problema es que bajo ciertas condiciones estos pesos puede no ser confiables. El principal problema es que unos pocos \\(w_s\\) podrían ser tan grandes que dominan el cálculo, y es aquí donde entra el suavizado de Pareto que basicamente consiste en reemplazar algunos de estos pesos por pesos obtenidos a partir de ajustar una distribución de Pareto ¿por qué una distribución de Pareto? Por que la teoría indica que los pesos deberían seguir esta distribución. Entonces para cada observation \\(y_i\\) , los pesos más grandes se usan para estimar una distribución de Pareto y esa distribución se usa para reemplazar esos pesos por pesos “suavizados”. Este procedimiento le da robustez a la estimación del ELPD y además provee de un diagóstico ya que valores de \\(k\\) (uno de los parámetros de la distribución de Pareto) mayores a 0.7 indican que posiblemente tengamos observaciones “muy influyentes”.\n\n\n8.3.2.4 Otros criterios de información\nOtro criterio de información muy usado es DIC, si usamos el bayesómetro™, DIC es más bayesiano que AIC pero menos que WAIC. Aunque aún es popular, WAIC y principalmentete LOO han demostrado ser más útiles tanto teóricamente como empíricamente que DIC. Por lo cual NO recomendamos su uso.\nOtro criterio muy usado es BIC (del inglés Bayesian Information Criteria), al igual que la regresión logística y la sopa seca de mi madre, este nombre puede ser engañoso. BIC se propuso como una forma de corregir algunos de los problemas con AIC y el autor propuso una justificación Bayesiana para ello. Pero BIC no es realmente Bayesiano en el sentido que al igual que AIC asume priors planos y utiliza una estimación por máxima verosimilitud.\nPero lo que es más importante, es que BIC difiere de AIC y WAIC en su objetivo. AIC y WAIC intentan reflejar cual modelo generaliza mejor a otros datos (exactitud predictiva) mientras que BIC intenta identificar cual es el modelo correcto y por lo tanto está más relacionado los factores de Bayes que con WAIC. Más adelante discutiremos Factores de Bayes y veremos como se diferencia de criterios como WAIC y LOO.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html#calculo-de-exactitud-predictiva-usando-arviz",
    "href": "07_Comparación_de_modelos.html#calculo-de-exactitud-predictiva-usando-arviz",
    "title": "8  Comparación de modelos",
    "section": "8.4 Calculo de exactitud predictiva usando ArviZ",
    "text": "8.4 Calculo de exactitud predictiva usando ArviZ\nAfortunadamente, calcular los criterios de información con ArviZ es muy simple. Veamos:\n\nwaic_l = az.waic(idata_l)\nwaic_l\n\nComputed from 8000 posterior samples and 33 observations log-likelihood matrix.\n\n          Estimate       SE\nelpd_waic   -14.29     2.67\np_waic        2.38        -\n\n\n\nwaic_p = az.waic(idata_p)\nwaic_p\n\nComputed from 8000 posterior samples and 33 observations log-likelihood matrix.\n\n          Estimate       SE\nelpd_waic    -4.54     2.31\np_waic        2.61        -\n\n\nLo mismo para LOO.\n\nloo_l = az.loo(idata_l)\nloo_l\n\nComputed from 8000 posterior samples and 33 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo   -14.31     2.67\np_loo        2.40        -\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.5]   (good)       33  100.0%\n (0.5, 0.7]   (ok)          0    0.0%\n   (0.7, 1]   (bad)         0    0.0%\n   (1, Inf)   (very bad)    0    0.0%\n\n\n\nloo_p = az.loo(idata_p)\nloo_p\n\nComputed from 8000 posterior samples and 33 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo    -4.58     2.32\np_loo        2.65        -\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.5]   (good)       33  100.0%\n (0.5, 0.7]   (ok)          0    0.0%\n   (0.7, 1]   (bad)         0    0.0%\n   (1, Inf)   (very bad)    0    0.0%\n\n\nTanto az.waic como az.loo devuelven 3 valores\n\nUna estimación puntual del ELPD.\nEl error estándar de esa estimación\nEl número efectivo de parámetros\n\nAdemás LOO devuelve un diagnóstico basado en el parámetro k, correspondiente al ajuste de la distribución de Pareto.\nLos valores de WAIC o LOO no tienen sentido por si mismos, y deben ser interpretados de forma relativa. Es por ello que ArviZ ofrece dos funciones auxiliares para facilitar esta comparación veamos primero a az.compare.\n\ncmp_df = az.compare({'modelo_l':idata_l, 'modelo_p':idata_p})\ncmp_df\n\n\n\n\n\n\n\n\nrank\nelpd_loo\np_loo\nelpd_diff\nweight\nse\ndse\nwarning\nscale\n\n\n\n\nmodelo_p\n0\n-4.575778\n2.646204\n0.000000\n1.000000e+00\n2.318739\n0.00000\nFalse\nlog\n\n\nmodelo_l\n1\n-14.309050\n2.399241\n9.733272\n3.215206e-13\n2.673219\n2.68794\nFalse\nlog\n\n\n\n\n\n\n\nEn las filas tenemos los modelos comparados y en la columnas tenemos\n\nrank : el orden de los modelos (de mejor a peor)\nelpd : la estimación puntual del elpd usando\np : los parámetros efectivos\nelpd_diff : la diferencia entre el ELPD del mejor modelo y los demás modelos\nweight : el peso relativo de cada modelo. Si quisieramos hacer predicciones combinando los distintos modelos, en vez de elegir uno solo, este sería el peso que deberíamos asignar a cada modelo. En este caso vemos que el modelo polinomial se lleva todo el peso.\nse : el error estándard del ELPD\ndse : el error estándard de las difencias\nwarning : una advertencia sobre valores de k altos\nscale : la escala en la que se calcula el ELPD\n\nTambién podemos obtener más o menos la misma información de forma gráfica usando la función az.compareplot.\n\naz.plot_compare(cmp_df);\n\n\n\n\n\n\n\n\n\nLos círculos vacíos representan los valores del ELPD y lineas negras el error estándar.\nEl valor más alto del ELPD se indica con una línea gris discontinua vertical para facilitar la comparación con otros valores.\nPara todos los modelos, excepto el mejor, también obtenemos un triángulo que indica el valor de la diferencia del ELPD entre cada modelo y el mejor modelo. La barra de error gris que indica el error estándar de las diferencias entre las estimaciones puntuales.\n\nLa forma más sencilla de utilizar los criterios de información es elegir un único modelo. Simplemente elija el modelo con el valor más alto de ELPD. Si seguimos esta regla tendremos que aceptar que el modelo cuadrático es el mejor. Incluso si tenemos en cuenta los errores estandar podemos ver que estos no se solapan. Lo que nos da cierta seguridad que efectivamente los modelos son diferentes entre si. Si, en cambio, los errores estándar se superpusieran, deberíamos proporcionar una respuesta más matizada.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html#promedio-de-modelos",
    "href": "07_Comparación_de_modelos.html#promedio-de-modelos",
    "title": "8  Comparación de modelos",
    "section": "8.5 Promedio de modelos",
    "text": "8.5 Promedio de modelos\nLa selección de modelos es atractiva por su simplicidad, pero podríamos estar descartando información sobre la incertidumbre en nuestros modelos. Esto es de alguna manera similar a calcular el posterior completo y luego solo mantener la media del posterior; esto puede conducirnos a confiar demasiado en lo que creemos saber.\nUna alternativa es seleccionar un solo modelo, pero informar y analizar los diferentes modelos junto con los valores de los criterios de información calculados, sus valores de error estándar y quizás también las pruebas predictivas a posteriori. Es importante poner todos estos números y pruebas en el contexto de nuestro problema para que nosotros y nuestra audiencia podamos tener una mejor idea de las posibles limitaciones y deficiencias de los modelos. Para quienes trabajan en el mundo académico, estos elementos se pueden utilizar para agregar elementos a la sección de discusión de un paper, presentación, tesis, etc. Y en la industria esto puede ser útil para informar a clientes sobre las ventajas y limitaciones de las predicciones o conclusiones del modelado.\nOtra posibilidad es promediar los modelos. De esta forma estamos introduciendo la incertidumbre que tenemos sobre la bondad de cada modelo, y podemos generar un metamodelo (y meta-predicciones) usando un promedio pesado de cada modelo.\n\nidata_w = az.weight_predictions(idatas, weights=[0.35, 0.65])\n\n\n_, ax = plt.subplots(figsize=(10, 6))\naz.plot_kde(idata_l.posterior_predictive['y_pred'].values, plot_kwargs={'color':'C0'}, label='modelo lineal', ax=ax)\naz.plot_kde(idata_p.posterior_predictive['y_pred'].values, plot_kwargs={'color':'C1'}, label='orden 2', ax=ax)\naz.plot_kde(idata_w.posterior_predictive['y_pred'].values, plot_kwargs={'color':'C2'}, label='modelo pesado', ax=ax)\n\nplt.plot(y_c, np.zeros_like(y_c), 'k|', label='observed data')\nplt.yticks([])\nplt.legend();\n\n\n\n\n\n\n\n\nHay otras formas de promediar modelos, como, por ejemplo, construir explícitamente un metamodelo que incluya todos los modelos de interés como casos particulares. Por ejemplo un polinomio de grado 2 contiene como caso particular un modelo lineal, o un modelo jerárquico es la versión continua entre dos extremos un modelo agrupado y uno desagrupado.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html#factores-de-bayes",
    "href": "07_Comparación_de_modelos.html#factores-de-bayes",
    "title": "8  Comparación de modelos",
    "section": "8.6 Factores de Bayes",
    "text": "8.6 Factores de Bayes\nUna alternativa a LOO, la validación cruzada y los criterios de información son los factores de Bayes. Es común que los factores de Bayes aparezcan en la literatura como una alternativa Bayesiana al contraste de hipótesis frecuentista.\nLa “manera Bayesiana” de comparar \\(k\\) modelos es calcular la verosimilitud marginal de cada modelo \\(p(y \\mid M_k)\\), es decir, la probabilidad de los datos observados \\(Y\\) dado el modelo \\(M_k\\). Esta cantidad, la verosimilitud marginal, es simplemente la constante de normalización del teorema de Bayes. Podemos ver esto si escribimos el teorema de Bayes y hacemos explícito el hecho de que todas las inferencias dependen del modelo.\n\\[p (\\theta \\mid Y, M_k ) = \\frac{p(Y \\mid \\theta, M_k) p(\\theta \\mid M_k)}{p(Y \\mid M_k)}\\]\ndónde:\n\n\\(y\\) son los datos\n\\(\\theta\\) los parámetros\n\\(M_k\\) un modelo de k modelos competidores\n\nSi nuestro objetivo principal es elegir solo un modelo, el mejor, de un conjunto de modelos podemos elegir el que tiene el mayor valor de \\(p(y \\mid M_k)\\). Esto está bien si asumimos que todos los modelos tienen la misma probabilidad a priori. De lo contrario debemos calcular:\n\\[p(M_k \\mid y) \\propto p(y \\mid M_k) p(M_k)\\]\nSi en cambio, nuestro objetivo principal es comparar modelos para determinar cuáles son más probables y en qué medida. Esto se puede lograr utilizando los factores de Bayes:\n\\[FB_{01} = \\frac{p(y \\mid M_0)}{p(y \\mid M_1)}\\]\nes decir, el cociente entre la verosimilitud marginal de dos modelos. Cuanto mayor sea el FB, mejor el modelo en el numerador (\\(M_0\\) en este ejemplo). Para facilitar la interpretación de los FB, Harold Jeffreys propuso una escala para la interpretación de los Factores de Bayes con niveles de apoyo o fuerza. Esta es solo una manera de poner números en palabras.\n\n1-3: anecdótico\n3-10: moderado\n10-30: fuerte\n30-100: muy fuerte\n\\(&gt;\\) 100: extremo\n\nHay que tener en cuenta que si se obtiene números por debajo de 1, entonces el soporte es para el modelo en el denominador, también hay tablas disponibles para esos casos. O simplemente podemos tomar la inversa del valor obtenido.\nEs muy importante recordar que estas reglas son solo convenciones, guías simples en el mejor de los casos. Los resultados siempre deben ponerse en el contexto de nuestros problemas y deben ir acompañados de suficientes detalles para que otros puedan evaluar por sí mismos si están de acuerdo con nuestras conclusiones. No es lo mismo la prueba necesaria para asegurar algo en física de partículas, o en un juzgado, o para decidir realizar una evacuación frente a una catástrofe natural que se avecina.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html#algunas-observaciones",
    "href": "07_Comparación_de_modelos.html#algunas-observaciones",
    "title": "8  Comparación de modelos",
    "section": "8.7 Algunas observaciones",
    "text": "8.7 Algunas observaciones\nAhora discutiremos brevemente algunos hechos clave sobre la verosimilitud marginal\n\nEl bueno\n\nNavaja de Occam incluida: Los modelos con más parámetros tienen una penalización mayor que los modelos con menos parámetros. La razón intuitiva es que cuanto mayor es el número de parámetros, más se extiende el prior con respecto al likelihood. Un ejemplo donde es facil ver esto es con los modelos anidados, por ej un polinomio de orden 2 “contiene” a los modelos modelos “polinomio de orden 1” y polinimo de orden 0.\n\nEl malo\n\nPara muchos problemas la verosimilitud marginal no puede ser calculada analiticamente. Y aproximarla numéricamente suele ser una tarea difícil que en el mejor de los casos requiere de métodos especializados y en el peor las estimaciones o no son prácticas o no son confiables. De hecho la popularidad de los métodos MCMC es que permiten obtener la distribución a posteriori sin necesidad de calcular esta cantidad.\n\nEl feo\n\nLa probabilidad marginal depende muy sensiblemente de la distribución a priori de los parámetros en cada modelo \\(p(\\theta_k \\mid M_k)\\).\n\n\nEs importante notar que lo bueno y lo feo están relacionados. Usar la verosimilitud marginal para comparar modelos es una buena idea por que ya incluye una penalización para modelos complejos (lo que nos ayuda a prevenir el sobreajuste) y, al mismo tiempo, un cambio en el prior afectará los cálculos de la verosimilitud marginal. Al principio esto suena un poco tonto; ya sabemos que los priors afectan los cálculos (de lo contrario, simplemente podríamos evitarlos), pero el punto aquí es la palabra sensiblemente. Estamos hablando que cambios en el prior que apenas tendrían efecto en el posterior tendrán un gran impacto en el valor de la verosimilitud marginal.\nEl uso de los FB suele ser una divisoria de aguas entre Bayesianos. La dificultad de su cálculo y la sensibilidad a los priors son algunos de los argumentos en contra. Otra razón es que al igual que lo p-valores y en general las pruebas de hipótesis los BF favorecen el pensamiento dicotómico por sobre la estimación del “tamaño del efecto”. Es decir en vez de hacernos preguntas del estilo ¿Cuantos años más de vida puede proporcionar, en promedio, un tratamiento oncológico? Terminamos preguntando si la diferencia entre tratar y no tratar a un paciente es “estadísticamente significativa”. Ojo que esta última pregunta puede ser útil en algunos contextos, el punto es que en muchos otros contextos, ese tipo de preguntas no es la pregunta que nos interesa, solo la que nos enseñaron a contestar.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html#cálculo-de-los-fb",
    "href": "07_Comparación_de_modelos.html#cálculo-de-los-fb",
    "title": "8  Comparación de modelos",
    "section": "8.8 Cálculo de los FB",
    "text": "8.8 Cálculo de los FB\nComo ya mencionamos la verosimilitud marginal (y los factores de Bayes derivadas de ella) generalmente no está disponible en forma cerrada, excepto para algunos modelos. Por esta razón, se han ideado muchos métodos numéricos para su cálculo. Algunos de estos métodos son tan simples e ingenuos que funciona muy mal en la práctica.\n\n8.8.1 Analiticamente\nPara algunos modelos, como el modelo beta-binomial, podemos calcular la verosimilitud marginal analíticamente. Si escribimos este modelo como:\n\\[\\theta \\sim Beta(\\alpha, \\beta)\\] \\[y \\sim Bin(n=1, p=\\theta)\\]\nla verosimilitud marginal será:\n\\[p(y) = \\binom {n}{h} \\frac{B(\\alpha + h,\\ \\beta + n - h)} {B(\\alpha, \\beta)}\\]\ndónde:\n\n\\(B\\) es la función beta no confundirse con la distribución \\(Beta\\)\n\\(n\\) es el número de intentos\n\\(h\\) es el número de éxito\n\nComo solo nos importa el valor relativo de la verosimilitud marginal bajo dos modelos diferentes (para los mismos datos), podemos omitir el coeficiente binomial \\(\\binom {n}{h}\\), por lo que podemos escribir:\n\\[p(y) \\propto \\frac{B(\\alpha + h,\\ \\beta + n - h)} {B(\\alpha, \\beta)}\\]\nEsta expresión ha sido codificada en la siguiente celda, pero con un giro. Usaremos la función betaln, que devuelve el logaritmo natural de la función beta, es común en estadística hacer cálculos en escala logaritmica, esto reduce problemas numéricos al trabajar con probabilidades.\n\ndef beta_binom(prior, y):\n    \"\"\"\n    Calcula la probabilidad marginal, analíticamente, para un modelo beta-binomial.\n\n     prior : tupla\n         tupla de parámetro alfa y beta para el prior (distribución beta)\n     y : array\n         array con \"1\" y \"0\" correspondientes al éxito y falla respectivamente\n    \"\"\"\n    alpha, beta = prior\n    h = np.sum(y)\n    n = len(y)\n    p_y = np.exp(betaln(alpha + h, beta + n - h) - betaln(alpha, beta))\n    return p_y\n\nNuestros datos para este ejemplo consisten en 100 “lanzamientos de una moneda” y el mismo número de “caras” y cecas” observadas. Compararemos dos modelos uno con un prior uniforme y otro con un a priori más concentrado alrededor de \\(\\theta = 0.5\\)\n\ny = np.repeat([1, 0], [50, 50])  # 50 \"caras\" y 50 \"cecas\"\npriors = ((1, 1), (30, 30))\n\n\nfor a, b in priors:\n    x = np.linspace(0, 1, 300)\n    x_pdf = pz.Beta(a, b).pdf(x)\n    plt.plot(x, x_pdf, label=rf\"$\\alpha$ = {a:d}, $\\beta$ = {b:d}\")\n    plt.yticks([])\n    plt.xlabel(\"$\\\\theta$\")\n    plt.legend()\n\n\n\n\n\n\n\n\nLa siguiente celda devuelve el factor de Bayes\n\nBF = beta_binom(priors[1], y) / beta_binom(priors[0], y)\nprint(round(BF))\n\n5\n\n\nVemos que el modelo con el prior \\(\\text{beta}(30, 30)\\), más concentrado, tiene \\(\\approx 5\\) veces más apoyo que el modelo con el \\(\\text{beta}(1, 1)\\). Esto es esperable ya que el prior para el primer caso se concentra alrededor de \\(\\theta = 0.5\\) y los datos \\(Y\\) tienen el mismo número de caras y cruces, es decir acuerdan con un valor de \\(\\theta\\) alrededor de 0.5.\n\n\n8.8.2 Sequential Monte Carlo\nEl método Sequential Monte Carlo es un método de muestreo que básicamente progresa mediante una serie de secuencias sucesivas desde el prior al posterior. Un subproducto de este proceso es la estimación de la verosimilitud marginal. En realidad, por razones numéricas, el valor devuelto es el logaritmo de la verosimilitud marginal.\n\nmodels = []\nidatas = []\nfor alpha, beta in priors:\n    with pm.Model() as model:\n        a = pm.Beta(\"a\", alpha, beta)\n        yl = pm.Bernoulli(\"yl\", a, observed=y)\n        idata = pm.sample_smc(random_seed=42)\n        models.append(model)\n        idatas.append(idata)\n\nInitializing SMC sampler...\nSampling 4 chains in 4 jobs\n\n\n\n\n\n\n\n    \n      \n      100.00% [100/100 00:00&lt;?  Stage: 2 Beta: 1.000]\n    \n    \n\n\n    \n\n\n/home/osvaldo/anaconda3/envs/pymc/lib/python3.10/site-packages/arviz/data/base.py:221: UserWarning: More chains (4) than draws (3). Passed array should have shape (chains, draws, *shape)\n  warnings.warn(\nInitializing SMC sampler...\nSampling 4 chains in 4 jobs\n\n\n\n\n\n\n\n    \n      \n      100.00% [100/100 00:00&lt;?  Stage: 0 Beta: 1.000]\n    \n    \n\n\n    \n\n\n/home/osvaldo/anaconda3/envs/pymc/lib/python3.10/site-packages/arviz/data/base.py:221: UserWarning: More chains (4) than draws (1). Passed array should have shape (chains, draws, *shape)\n  warnings.warn(\n\n\n\nBF_smc = np.exp(\n    idatas[1].sample_stats[\"log_marginal_likelihood\"].mean()\n    - idatas[0].sample_stats[\"log_marginal_likelihood\"].mean()\n)\nnp.round(BF_smc).item()\n\n5.0\n\n\nComo podemos ver en la celda anterior, ¡SMC da esencialmente la misma respuesta que el cálculo analítico!\nNota: En la celda de arriba calculamos una diferencia (en lugar de una división) porque estamos en la escala logarítmica, por la misma razón tomamos la exponencial antes de devolver el resultado. Finalmente, la razón por la que calculamos la media es porque obtenemos un valor logarítmico de probabilidad marginal por cadena.\nLa ventaja de usar SMC para calcular la verosimilitud marginal es que podemos usarlo para una gama más amplia de modelos, ya que ya no necesitamos conocer una expresión en forma cerrada. El costo que pagamos por esta flexibilidad es un cálculo más costoso. Además hay que tener en cuenta que SMC (con un kernel Metropolis independiente implementado en PyMC) no es tan eficiente como NUTS. A medida que aumenta la dimensionalidad del problema, una estimación más precisa de la posterior y la verosimilitud marginal requerirá un mayor número de muestras del posterior.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html#factores-de-bayes-e-inferencia",
    "href": "07_Comparación_de_modelos.html#factores-de-bayes-e-inferencia",
    "title": "8  Comparación de modelos",
    "section": "8.9 Factores de bayes e inferencia",
    "text": "8.9 Factores de bayes e inferencia\nHasta ahora hemos usado los factores de Bayes para juzgar qué modelo parece ser mejor para explicar los datos, y obtenemos que uno de los modelos es \\(\\approx 5\\) veces mejor que el otro.\nPero, ¿qué pasa con el posterior que obtenemos de estos modelos? ¿Qué tan diferentes son?\n\naz.summary(idatas[0], var_names=\"a\", kind=\"stats\").round(2)\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\n\n\n\n\na\n0.5\n0.05\n0.4\n0.59\n\n\n\n\n\n\n\n\naz.summary(idatas[1], var_names=\"a\", kind=\"stats\").round(2)\n\n\n\n\n\n\n\n\nmean\nsd\nhdi_3%\nhdi_97%\n\n\n\n\na\n0.5\n0.04\n0.42\n0.57\n\n\n\n\n\n\n\nPodemos argumentar que los resultados son bastante similares, tenemos el mismo valor medio para \\(\\theta\\) y un posterior ligeramente más ancho para model_0, como se esperaba ya que este modelo tiene un prior más amplio. También podemos verificar la distribución predictiva posterior para ver qué tan similares son.\n\nppc_0 = pm.sample_posterior_predictive(idatas[0], model=models[0]).posterior_predictive\nppc_1 = pm.sample_posterior_predictive(idatas[1], model=models[1]).posterior_predictive\n\nSampling: [yl]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:00&lt;00:00]\n    \n    \n\n\nSampling: [yl]\n\n\n\n\n\n\n\n    \n      \n      100.00% [8000/8000 00:00&lt;00:00]\n    \n    \n\n\n\n_, ax = plt.subplots(figsize=(9, 6))\n\nbins = np.linspace(0.2, 0.8, 8)\nax = az.plot_dist(\n    ppc_0[\"yl\"].mean(\"yl_dim_2\"),\n    label=\"model_0\",\n    kind=\"hist\",\n    hist_kwargs={\"alpha\": 0.5, \"bins\": bins},\n)\nax = az.plot_dist(\n    ppc_1[\"yl\"].mean(\"yl_dim_2\"),\n    label=\"model_1\",\n    color=\"C1\",\n    kind=\"hist\",\n    hist_kwargs={\"alpha\": 0.5, \"bins\": bins},\n    ax=ax,\n)\nax.legend()\nax.set_xlabel(\"$\\\\theta$\")\nax.xaxis.set_major_formatter(FormatStrFormatter(\"%0.1f\"))\nax.set_yticks([]);\n\n\n\n\n\n\n\n\nEn este ejemplo, los datos observados son más consistentes con el modelo_1, por que el prior se concentra en torno al valor correcto de \\(\\theta\\), mientras que el modelo_0, asigna la misma probabilidad a todos los valores posibles de \\(\\theta\\). Esta diferencia entre los modelos es capturada por el factor de Bayes. Podríamos decir que los factores de Bayes miden qué modelo, en su conjunto, es mejor para explicar los datos. Y esto incluye los detalles del prior, sin importar cuan similares son las predicciones de los modelos. En muchos escenarios lo que nos interesa al comparar modelos es cuan similares son las predicciones. Que es lo que estima LOO o validación cruzada.",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  },
  {
    "objectID": "07_Comparación_de_modelos.html#cociente-de-savage-dickey",
    "href": "07_Comparación_de_modelos.html#cociente-de-savage-dickey",
    "title": "8  Comparación de modelos",
    "section": "8.10 Cociente de Savage-Dickey",
    "text": "8.10 Cociente de Savage-Dickey\nPara los ejemplos anteriores hemos comparado dos modelos beta-binomiales, podríamos haber comparado dos modelos completamente diferentes. Pero hay veces que queremos comparar una hipótesis nula H_0 (o modelo nulo) contra una alternativa H_1. Por ejemplo, para responder a la pregunta ¿Está sesgada esta moneda?, podríamos comparar el valor \\(\\theta = 0.5\\) (que representa el no-sesgo) con el resultado de un modelo en el que permitimos que \\(\\theta\\) varíe. Para este tipo de comparación, el modelo nulo está anidado dentro de la alternativa, lo que significa que el valor nulo es un valor particular del modelo que estamos construyendo. En esos casos, calcular el factor de Bayes es muy fácil y no requiere ningún método especial. Solo necesitamos comparar el prior y el posterior evaluados en el valor nulo (por ejemplo \\(\\theta = 0.5\\) ), bajo el modelo alternativo. Podemos ver que esto es cierto a partir de la siguiente expresión:\n\\[\nBF_{01} = \\frac{p(y \\mid H_0)}{p(y \\mid H_1)} \\frac{p(\\theta=0.5 \\mid y, H_1)}{p(\\theta=0.5 \\mid H_1)}\n\\]\nQue es cierta solo cuando H_0 es un caso particular de H_1.\nHagámoslo con PyMC y ArviZ. Solo necesitamos obtener muestras del prior y del posterior para un modelo. Probemos con el modelo beta-binomial con prior uniforme.\n\nwith pm.Model() as model_uni:\n    a = pm.Beta(\"a\", 1, 1)\n    yl = pm.Bernoulli(\"yl\", a, observed=y)\n    idata_uni = pm.sample(2000, random_seed=42)\n    idata_uni.extend(pm.sample_prior_predictive(8000))\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [a]\n\n\n\n\n\n\n\n    \n      \n      100.00% [12000/12000 00:01&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 2_000 draw iterations (4_000 + 8_000 draws total) took 2 seconds.\nSampling: [a, yl]\n\n\nY ahora llamamos a la función de ArviZ az.plot_bf\n\naz.plot_bf(idata_uni, var_name=\"a\", ref_val=0.5);\n\n\n\n\n\n\n\n\nEl gráfico muestra un KDE para el prior (azul) y otro para el posterior (turquesa). Los dos puntos negros muestran que evaluamos ambas distribuciones en el valor 0.5. Podemos ver que el factor de Bayes a favor de la hipótesis nula, BF_01, es \\(\\approx 8\\), lo que podemos interpretar como una evidencia moderada a favor de la hipótesis nula (ver la escala de Jeffreys que discutimos antes).\nComo ya comentamos, los factores de Bayes miden qué modelo, en su conjunto, es mejor para explicar los datos. Y esto incluye el prior, incluso si el prior tiene un impacto relativamente bajo en el cómputo del posterior. También podemos ver este efecto del prior al comparar un segundo modelo con el modelo nulo.\nSi en cambio nuestro modelo fuera un beta-binomial con beta prior (30, 30), el BF_01 sería más bajo (anecdótico en la escala de Jeffrey). Esto se debe a que, según este modelo, el valor de \\(\\theta=0.5\\) es mucho más probable priori que para un prior uniforme y, por lo tanto, el posterior y el prior serán mucho más similares. Es decir, no hay demasiada sorpresa al ver la que el posterior se concentra alrededor de 0.5 después de recopilar datos.\nVamos a calcularlo para verlo por nosotros mismos.\n\nwith pm.Model() as model_conc:\n    a = pm.Beta(\"a\", 30, 30)\n    yl = pm.Bernoulli(\"yl\", a, observed=y)\n    idata_conc = pm.sample(2000, random_seed=42)\n    idata_conc.extend(pm.sample_prior_predictive(8000))\n\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (4 chains in 4 jobs)\nNUTS: [a]\n\n\n\n\n\n\n\n    \n      \n      100.00% [12000/12000 00:01&lt;00:00 Sampling 4 chains, 0 divergences]\n    \n    \n\n\nSampling 4 chains for 1_000 tune and 2_000 draw iterations (4_000 + 8_000 draws total) took 2 seconds.\nSampling: [a, yl]\n\n\n\naz.plot_bf(idata_conc, var_name=\"a\", ref_val=0.5);",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Comparación de modelos</span>"
    ]
  }
]